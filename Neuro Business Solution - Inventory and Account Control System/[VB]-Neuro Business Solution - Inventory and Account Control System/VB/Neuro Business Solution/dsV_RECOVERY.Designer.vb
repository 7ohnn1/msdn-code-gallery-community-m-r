'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("dsV_RECOVERY"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsV_RECOVERY
    Inherits System.Data.DataSet
    
    Private tableV_RECOVERY_MASTER As V_RECOVERY_MASTERDataTable
    
    Private tableSV_CLIENT_BALANCE_TOT As SV_CLIENT_BALANCE_TOTDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("V_RECOVERY_MASTER")) Is Nothing) Then
                MyBase.Tables.Add(New V_RECOVERY_MASTERDataTable(ds.Tables("V_RECOVERY_MASTER")))
            End If
            If (Not (ds.Tables("SV_CLIENT_BALANCE_TOT")) Is Nothing) Then
                MyBase.Tables.Add(New SV_CLIENT_BALANCE_TOTDataTable(ds.Tables("SV_CLIENT_BALANCE_TOT")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property V_RECOVERY_MASTER() As V_RECOVERY_MASTERDataTable
        Get
            Return Me.tableV_RECOVERY_MASTER
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SV_CLIENT_BALANCE_TOT() As SV_CLIENT_BALANCE_TOTDataTable
        Get
            Return Me.tableSV_CLIENT_BALANCE_TOT
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As dsV_RECOVERY = CType(MyBase.Clone,dsV_RECOVERY)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("V_RECOVERY_MASTER")) Is Nothing) Then
                MyBase.Tables.Add(New V_RECOVERY_MASTERDataTable(ds.Tables("V_RECOVERY_MASTER")))
            End If
            If (Not (ds.Tables("SV_CLIENT_BALANCE_TOT")) Is Nothing) Then
                MyBase.Tables.Add(New SV_CLIENT_BALANCE_TOTDataTable(ds.Tables("SV_CLIENT_BALANCE_TOT")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableV_RECOVERY_MASTER = CType(MyBase.Tables("V_RECOVERY_MASTER"),V_RECOVERY_MASTERDataTable)
        If (initTable = true) Then
            If (Not (Me.tableV_RECOVERY_MASTER) Is Nothing) Then
                Me.tableV_RECOVERY_MASTER.InitVars
            End If
        End If
        Me.tableSV_CLIENT_BALANCE_TOT = CType(MyBase.Tables("SV_CLIENT_BALANCE_TOT"),SV_CLIENT_BALANCE_TOTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSV_CLIENT_BALANCE_TOT) Is Nothing) Then
                Me.tableSV_CLIENT_BALANCE_TOT.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsV_RECOVERY"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsV_RECOVERY.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableV_RECOVERY_MASTER = New V_RECOVERY_MASTERDataTable
        MyBase.Tables.Add(Me.tableV_RECOVERY_MASTER)
        Me.tableSV_CLIENT_BALANCE_TOT = New SV_CLIENT_BALANCE_TOTDataTable
        MyBase.Tables.Add(Me.tableSV_CLIENT_BALANCE_TOT)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeV_RECOVERY_MASTER() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSV_CLIENT_BALANCE_TOT() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsV_RECOVERY = New dsV_RECOVERY
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub V_RECOVERY_MASTERRowChangeEventHandler(ByVal sender As Object, ByVal e As V_RECOVERY_MASTERRowChangeEvent)
    
    Public Delegate Sub SV_CLIENT_BALANCE_TOTRowChangeEventHandler(ByVal sender As Object, ByVal e As SV_CLIENT_BALANCE_TOTRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class V_RECOVERY_MASTERDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As System.Data.DataColumn
        
        Private columndDATE As System.Data.DataColumn
        
        Private columnEMP_NAME As System.Data.DataColumn
        
        Private columnTOT_CASH As System.Data.DataColumn
        
        Private columnTOT_CHQ As System.Data.DataColumn
        
        Private columnTOT_EXP As System.Data.DataColumn
        
        Private columnGROUP_NAME As System.Data.DataColumn
        
        Private columnACCOUNT_NO As System.Data.DataColumn
        
        Private columnREMARKS As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "V_RECOVERY_MASTER"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dDATEColumn() As System.Data.DataColumn
            Get
                Return Me.columndDATE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMP_NAMEColumn() As System.Data.DataColumn
            Get
                Return Me.columnEMP_NAME
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOT_CASHColumn() As System.Data.DataColumn
            Get
                Return Me.columnTOT_CASH
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOT_CHQColumn() As System.Data.DataColumn
            Get
                Return Me.columnTOT_CHQ
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOT_EXPColumn() As System.Data.DataColumn
            Get
                Return Me.columnTOT_EXP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GROUP_NAMEColumn() As System.Data.DataColumn
            Get
                Return Me.columnGROUP_NAME
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCOUNT_NOColumn() As System.Data.DataColumn
            Get
                Return Me.columnACCOUNT_NO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REMARKSColumn() As System.Data.DataColumn
            Get
                Return Me.columnREMARKS
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As V_RECOVERY_MASTERRow
            Get
                Return CType(Me.Rows(index),V_RECOVERY_MASTERRow)
            End Get
        End Property
        
        Public Event V_RECOVERY_MASTERRowChanging As V_RECOVERY_MASTERRowChangeEventHandler
        
        Public Event V_RECOVERY_MASTERRowChanged As V_RECOVERY_MASTERRowChangeEventHandler
        
        Public Event V_RECOVERY_MASTERRowDeleting As V_RECOVERY_MASTERRowChangeEventHandler
        
        Public Event V_RECOVERY_MASTERRowDeleted As V_RECOVERY_MASTERRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddV_RECOVERY_MASTERRow(ByVal row As V_RECOVERY_MASTERRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddV_RECOVERY_MASTERRow(ByVal ID As Decimal, ByVal dDATE As Date, ByVal EMP_NAME As String, ByVal TOT_CASH As Decimal, ByVal TOT_CHQ As Decimal, ByVal TOT_EXP As Decimal, ByVal GROUP_NAME As String, ByVal ACCOUNT_NO As String, ByVal REMARKS As String) As V_RECOVERY_MASTERRow
            Dim rowV_RECOVERY_MASTERRow As V_RECOVERY_MASTERRow = CType(Me.NewRow,V_RECOVERY_MASTERRow)
            rowV_RECOVERY_MASTERRow.ItemArray = New Object() {ID, dDATE, EMP_NAME, TOT_CASH, TOT_CHQ, TOT_EXP, GROUP_NAME, ACCOUNT_NO, REMARKS}
            Me.Rows.Add(rowV_RECOVERY_MASTERRow)
            Return rowV_RECOVERY_MASTERRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Decimal) As V_RECOVERY_MASTERRow
            Return CType(Me.Rows.Find(New Object() {ID}),V_RECOVERY_MASTERRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As V_RECOVERY_MASTERDataTable = CType(MyBase.Clone,V_RECOVERY_MASTERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New V_RECOVERY_MASTERDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columndDATE = MyBase.Columns("dDATE")
            Me.columnEMP_NAME = MyBase.Columns("EMP_NAME")
            Me.columnTOT_CASH = MyBase.Columns("TOT_CASH")
            Me.columnTOT_CHQ = MyBase.Columns("TOT_CHQ")
            Me.columnTOT_EXP = MyBase.Columns("TOT_EXP")
            Me.columnGROUP_NAME = MyBase.Columns("GROUP_NAME")
            Me.columnACCOUNT_NO = MyBase.Columns("ACCOUNT_NO")
            Me.columnREMARKS = MyBase.Columns("REMARKS")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New System.Data.DataColumn("ID", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columndDATE = New System.Data.DataColumn("dDATE", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndDATE)
            Me.columnEMP_NAME = New System.Data.DataColumn("EMP_NAME", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMP_NAME)
            Me.columnTOT_CASH = New System.Data.DataColumn("TOT_CASH", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOT_CASH)
            Me.columnTOT_CHQ = New System.Data.DataColumn("TOT_CHQ", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOT_CHQ)
            Me.columnTOT_EXP = New System.Data.DataColumn("TOT_EXP", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOT_EXP)
            Me.columnGROUP_NAME = New System.Data.DataColumn("GROUP_NAME", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGROUP_NAME)
            Me.columnACCOUNT_NO = New System.Data.DataColumn("ACCOUNT_NO", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCOUNT_NO)
            Me.columnREMARKS = New System.Data.DataColumn("REMARKS", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREMARKS)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columndDATE.AllowDBNull = false
            Me.columnEMP_NAME.AllowDBNull = false
            Me.columnEMP_NAME.MaxLength = 50
            Me.columnTOT_CASH.ReadOnly = true
            Me.columnTOT_CHQ.ReadOnly = true
            Me.columnTOT_EXP.AllowDBNull = false
            Me.columnGROUP_NAME.MaxLength = 50
            Me.columnACCOUNT_NO.MaxLength = 50
            Me.columnREMARKS.MaxLength = 100
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewV_RECOVERY_MASTERRow() As V_RECOVERY_MASTERRow
            Return CType(Me.NewRow,V_RECOVERY_MASTERRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New V_RECOVERY_MASTERRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(V_RECOVERY_MASTERRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.V_RECOVERY_MASTERRowChangedEvent) Is Nothing) Then
                RaiseEvent V_RECOVERY_MASTERRowChanged(Me, New V_RECOVERY_MASTERRowChangeEvent(CType(e.Row,V_RECOVERY_MASTERRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.V_RECOVERY_MASTERRowChangingEvent) Is Nothing) Then
                RaiseEvent V_RECOVERY_MASTERRowChanging(Me, New V_RECOVERY_MASTERRowChangeEvent(CType(e.Row,V_RECOVERY_MASTERRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.V_RECOVERY_MASTERRowDeletedEvent) Is Nothing) Then
                RaiseEvent V_RECOVERY_MASTERRowDeleted(Me, New V_RECOVERY_MASTERRowChangeEvent(CType(e.Row,V_RECOVERY_MASTERRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.V_RECOVERY_MASTERRowDeletingEvent) Is Nothing) Then
                RaiseEvent V_RECOVERY_MASTERRowDeleting(Me, New V_RECOVERY_MASTERRowChangeEvent(CType(e.Row,V_RECOVERY_MASTERRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveV_RECOVERY_MASTERRow(ByVal row As V_RECOVERY_MASTERRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsV_RECOVERY = New dsV_RECOVERY
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "V_RECOVERY_MASTERDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SV_CLIENT_BALANCE_TOTDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As System.Data.DataColumn
        
        Private columnRECV_NO As System.Data.DataColumn
        
        Private columnSHOP_AREA As System.Data.DataColumn
        
        Private columnCASH_AMT As System.Data.DataColumn
        
        Private columnCHQ_NO As System.Data.DataColumn
        
        Private columnCHQ_DATE As System.Data.DataColumn
        
        Private columnCHQ_AMT As System.Data.DataColumn
        
        Private columnREMARKS As System.Data.DataColumn
        
        Private columnCLIENT_BAL As System.Data.DataColumn
        
        Private columnCLIENT_CODE As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SV_CLIENT_BALANCE_TOT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RECV_NOColumn() As System.Data.DataColumn
            Get
                Return Me.columnRECV_NO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SHOP_AREAColumn() As System.Data.DataColumn
            Get
                Return Me.columnSHOP_AREA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CASH_AMTColumn() As System.Data.DataColumn
            Get
                Return Me.columnCASH_AMT
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHQ_NOColumn() As System.Data.DataColumn
            Get
                Return Me.columnCHQ_NO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHQ_DATEColumn() As System.Data.DataColumn
            Get
                Return Me.columnCHQ_DATE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHQ_AMTColumn() As System.Data.DataColumn
            Get
                Return Me.columnCHQ_AMT
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REMARKSColumn() As System.Data.DataColumn
            Get
                Return Me.columnREMARKS
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_BALColumn() As System.Data.DataColumn
            Get
                Return Me.columnCLIENT_BAL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_CODEColumn() As System.Data.DataColumn
            Get
                Return Me.columnCLIENT_CODE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SV_CLIENT_BALANCE_TOTRow
            Get
                Return CType(Me.Rows(index),SV_CLIENT_BALANCE_TOTRow)
            End Get
        End Property
        
        Public Event SV_CLIENT_BALANCE_TOTRowChanging As SV_CLIENT_BALANCE_TOTRowChangeEventHandler
        
        Public Event SV_CLIENT_BALANCE_TOTRowChanged As SV_CLIENT_BALANCE_TOTRowChangeEventHandler
        
        Public Event SV_CLIENT_BALANCE_TOTRowDeleting As SV_CLIENT_BALANCE_TOTRowChangeEventHandler
        
        Public Event SV_CLIENT_BALANCE_TOTRowDeleted As SV_CLIENT_BALANCE_TOTRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSV_CLIENT_BALANCE_TOTRow(ByVal row As SV_CLIENT_BALANCE_TOTRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSV_CLIENT_BALANCE_TOTRow(ByVal RECV_NO As Decimal, ByVal SHOP_AREA As String, ByVal CASH_AMT As Decimal, ByVal CHQ_NO As String, ByVal CHQ_DATE As Date, ByVal CHQ_AMT As Decimal, ByVal REMARKS As String, ByVal CLIENT_BAL As Decimal, ByVal CLIENT_CODE As Decimal) As SV_CLIENT_BALANCE_TOTRow
            Dim rowSV_CLIENT_BALANCE_TOTRow As SV_CLIENT_BALANCE_TOTRow = CType(Me.NewRow,SV_CLIENT_BALANCE_TOTRow)
            rowSV_CLIENT_BALANCE_TOTRow.ItemArray = New Object() {Nothing, RECV_NO, SHOP_AREA, CASH_AMT, CHQ_NO, CHQ_DATE, CHQ_AMT, REMARKS, CLIENT_BAL, CLIENT_CODE}
            Me.Rows.Add(rowSV_CLIENT_BALANCE_TOTRow)
            Return rowSV_CLIENT_BALANCE_TOTRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SV_CLIENT_BALANCE_TOTDataTable = CType(MyBase.Clone,SV_CLIENT_BALANCE_TOTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SV_CLIENT_BALANCE_TOTDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnRECV_NO = MyBase.Columns("RECV_NO")
            Me.columnSHOP_AREA = MyBase.Columns("SHOP_AREA")
            Me.columnCASH_AMT = MyBase.Columns("CASH_AMT")
            Me.columnCHQ_NO = MyBase.Columns("CHQ_NO")
            Me.columnCHQ_DATE = MyBase.Columns("CHQ_DATE")
            Me.columnCHQ_AMT = MyBase.Columns("CHQ_AMT")
            Me.columnREMARKS = MyBase.Columns("REMARKS")
            Me.columnCLIENT_BAL = MyBase.Columns("CLIENT_BAL")
            Me.columnCLIENT_CODE = MyBase.Columns("CLIENT_CODE")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New System.Data.DataColumn("ID", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnRECV_NO = New System.Data.DataColumn("RECV_NO", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECV_NO)
            Me.columnSHOP_AREA = New System.Data.DataColumn("SHOP_AREA", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSHOP_AREA)
            Me.columnCASH_AMT = New System.Data.DataColumn("CASH_AMT", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCASH_AMT)
            Me.columnCHQ_NO = New System.Data.DataColumn("CHQ_NO", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHQ_NO)
            Me.columnCHQ_DATE = New System.Data.DataColumn("CHQ_DATE", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHQ_DATE)
            Me.columnCHQ_AMT = New System.Data.DataColumn("CHQ_AMT", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHQ_AMT)
            Me.columnREMARKS = New System.Data.DataColumn("REMARKS", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREMARKS)
            Me.columnCLIENT_BAL = New System.Data.DataColumn("CLIENT_BAL", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_BAL)
            Me.columnCLIENT_CODE = New System.Data.DataColumn("CLIENT_CODE", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_CODE)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnID}, false))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnRECV_NO.AllowDBNull = false
            Me.columnSHOP_AREA.ReadOnly = true
            Me.columnSHOP_AREA.MaxLength = 102
            Me.columnCASH_AMT.ReadOnly = true
            Me.columnCHQ_NO.MaxLength = 50
            Me.columnCHQ_AMT.ReadOnly = true
            Me.columnCHQ_AMT.DefaultValue = CType(0.00,Decimal)
            Me.columnREMARKS.MaxLength = 100
            Me.columnCLIENT_BAL.DefaultValue = CType(0.00,Decimal)
            Me.columnCLIENT_CODE.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSV_CLIENT_BALANCE_TOTRow() As SV_CLIENT_BALANCE_TOTRow
            Return CType(Me.NewRow,SV_CLIENT_BALANCE_TOTRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SV_CLIENT_BALANCE_TOTRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SV_CLIENT_BALANCE_TOTRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SV_CLIENT_BALANCE_TOTRowChangedEvent) Is Nothing) Then
                RaiseEvent SV_CLIENT_BALANCE_TOTRowChanged(Me, New SV_CLIENT_BALANCE_TOTRowChangeEvent(CType(e.Row,SV_CLIENT_BALANCE_TOTRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SV_CLIENT_BALANCE_TOTRowChangingEvent) Is Nothing) Then
                RaiseEvent SV_CLIENT_BALANCE_TOTRowChanging(Me, New SV_CLIENT_BALANCE_TOTRowChangeEvent(CType(e.Row,SV_CLIENT_BALANCE_TOTRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SV_CLIENT_BALANCE_TOTRowDeletedEvent) Is Nothing) Then
                RaiseEvent SV_CLIENT_BALANCE_TOTRowDeleted(Me, New SV_CLIENT_BALANCE_TOTRowChangeEvent(CType(e.Row,SV_CLIENT_BALANCE_TOTRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SV_CLIENT_BALANCE_TOTRowDeletingEvent) Is Nothing) Then
                RaiseEvent SV_CLIENT_BALANCE_TOTRowDeleting(Me, New SV_CLIENT_BALANCE_TOTRowChangeEvent(CType(e.Row,SV_CLIENT_BALANCE_TOTRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSV_CLIENT_BALANCE_TOTRow(ByVal row As SV_CLIENT_BALANCE_TOTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsV_RECOVERY = New dsV_RECOVERY
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SV_CLIENT_BALANCE_TOTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class V_RECOVERY_MASTERRow
        Inherits System.Data.DataRow
        
        Private tableV_RECOVERY_MASTER As V_RECOVERY_MASTERDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableV_RECOVERY_MASTER = CType(Me.Table,V_RECOVERY_MASTERDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Decimal
            Get
                Return CType(Me(Me.tableV_RECOVERY_MASTER.IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_RECOVERY_MASTER.IDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dDATE() As Date
            Get
                Return CType(Me(Me.tableV_RECOVERY_MASTER.dDATEColumn),Date)
            End Get
            Set
                Me(Me.tableV_RECOVERY_MASTER.dDATEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMP_NAME() As String
            Get
                Return CType(Me(Me.tableV_RECOVERY_MASTER.EMP_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableV_RECOVERY_MASTER.EMP_NAMEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOT_CASH() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_RECOVERY_MASTER.TOT_CASHColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'TOT_CASH' in table 'V_RECOVERY_MASTER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_RECOVERY_MASTER.TOT_CASHColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOT_CHQ() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_RECOVERY_MASTER.TOT_CHQColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'TOT_CHQ' in table 'V_RECOVERY_MASTER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_RECOVERY_MASTER.TOT_CHQColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOT_EXP() As Decimal
            Get
                Return CType(Me(Me.tableV_RECOVERY_MASTER.TOT_EXPColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_RECOVERY_MASTER.TOT_EXPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GROUP_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_RECOVERY_MASTER.GROUP_NAMEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'GROUP_NAME' in table 'V_RECOVERY_MASTER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_RECOVERY_MASTER.GROUP_NAMEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCOUNT_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_RECOVERY_MASTER.ACCOUNT_NOColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ACCOUNT_NO' in table 'V_RECOVERY_MASTER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_RECOVERY_MASTER.ACCOUNT_NOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REMARKS() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_RECOVERY_MASTER.REMARKSColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'REMARKS' in table 'V_RECOVERY_MASTER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_RECOVERY_MASTER.REMARKSColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOT_CASHNull() As Boolean
            Return Me.IsNull(Me.tableV_RECOVERY_MASTER.TOT_CASHColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOT_CASHNull()
            Me(Me.tableV_RECOVERY_MASTER.TOT_CASHColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOT_CHQNull() As Boolean
            Return Me.IsNull(Me.tableV_RECOVERY_MASTER.TOT_CHQColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOT_CHQNull()
            Me(Me.tableV_RECOVERY_MASTER.TOT_CHQColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGROUP_NAMENull() As Boolean
            Return Me.IsNull(Me.tableV_RECOVERY_MASTER.GROUP_NAMEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGROUP_NAMENull()
            Me(Me.tableV_RECOVERY_MASTER.GROUP_NAMEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCOUNT_NONull() As Boolean
            Return Me.IsNull(Me.tableV_RECOVERY_MASTER.ACCOUNT_NOColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCOUNT_NONull()
            Me(Me.tableV_RECOVERY_MASTER.ACCOUNT_NOColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREMARKSNull() As Boolean
            Return Me.IsNull(Me.tableV_RECOVERY_MASTER.REMARKSColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREMARKSNull()
            Me(Me.tableV_RECOVERY_MASTER.REMARKSColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SV_CLIENT_BALANCE_TOTRow
        Inherits System.Data.DataRow
        
        Private tableSV_CLIENT_BALANCE_TOT As SV_CLIENT_BALANCE_TOTDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSV_CLIENT_BALANCE_TOT = CType(Me.Table,SV_CLIENT_BALANCE_TOTDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Decimal
            Get
                Return CType(Me(Me.tableSV_CLIENT_BALANCE_TOT.IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableSV_CLIENT_BALANCE_TOT.IDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RECV_NO() As Decimal
            Get
                Return CType(Me(Me.tableSV_CLIENT_BALANCE_TOT.RECV_NOColumn),Decimal)
            End Get
            Set
                Me(Me.tableSV_CLIENT_BALANCE_TOT.RECV_NOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SHOP_AREA() As String
            Get
                Try 
                    Return CType(Me(Me.tableSV_CLIENT_BALANCE_TOT.SHOP_AREAColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SHOP_AREA' in table 'SV_CLIENT_BALANCE_TOT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSV_CLIENT_BALANCE_TOT.SHOP_AREAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CASH_AMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSV_CLIENT_BALANCE_TOT.CASH_AMTColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'CASH_AMT' in table 'SV_CLIENT_BALANCE_TOT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSV_CLIENT_BALANCE_TOT.CASH_AMTColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHQ_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSV_CLIENT_BALANCE_TOT.CHQ_NOColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'CHQ_NO' in table 'SV_CLIENT_BALANCE_TOT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSV_CLIENT_BALANCE_TOT.CHQ_NOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHQ_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSV_CLIENT_BALANCE_TOT.CHQ_DATEColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'CHQ_DATE' in table 'SV_CLIENT_BALANCE_TOT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSV_CLIENT_BALANCE_TOT.CHQ_DATEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHQ_AMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSV_CLIENT_BALANCE_TOT.CHQ_AMTColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'CHQ_AMT' in table 'SV_CLIENT_BALANCE_TOT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSV_CLIENT_BALANCE_TOT.CHQ_AMTColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REMARKS() As String
            Get
                Try 
                    Return CType(Me(Me.tableSV_CLIENT_BALANCE_TOT.REMARKSColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'REMARKS' in table 'SV_CLIENT_BALANCE_TOT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSV_CLIENT_BALANCE_TOT.REMARKSColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_BAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSV_CLIENT_BALANCE_TOT.CLIENT_BALColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'CLIENT_BAL' in table 'SV_CLIENT_BALANCE_TOT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSV_CLIENT_BALANCE_TOT.CLIENT_BALColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_CODE() As Decimal
            Get
                Return CType(Me(Me.tableSV_CLIENT_BALANCE_TOT.CLIENT_CODEColumn),Decimal)
            End Get
            Set
                Me(Me.tableSV_CLIENT_BALANCE_TOT.CLIENT_CODEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSHOP_AREANull() As Boolean
            Return Me.IsNull(Me.tableSV_CLIENT_BALANCE_TOT.SHOP_AREAColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSHOP_AREANull()
            Me(Me.tableSV_CLIENT_BALANCE_TOT.SHOP_AREAColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCASH_AMTNull() As Boolean
            Return Me.IsNull(Me.tableSV_CLIENT_BALANCE_TOT.CASH_AMTColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCASH_AMTNull()
            Me(Me.tableSV_CLIENT_BALANCE_TOT.CASH_AMTColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHQ_NONull() As Boolean
            Return Me.IsNull(Me.tableSV_CLIENT_BALANCE_TOT.CHQ_NOColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHQ_NONull()
            Me(Me.tableSV_CLIENT_BALANCE_TOT.CHQ_NOColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHQ_DATENull() As Boolean
            Return Me.IsNull(Me.tableSV_CLIENT_BALANCE_TOT.CHQ_DATEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHQ_DATENull()
            Me(Me.tableSV_CLIENT_BALANCE_TOT.CHQ_DATEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHQ_AMTNull() As Boolean
            Return Me.IsNull(Me.tableSV_CLIENT_BALANCE_TOT.CHQ_AMTColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHQ_AMTNull()
            Me(Me.tableSV_CLIENT_BALANCE_TOT.CHQ_AMTColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREMARKSNull() As Boolean
            Return Me.IsNull(Me.tableSV_CLIENT_BALANCE_TOT.REMARKSColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREMARKSNull()
            Me(Me.tableSV_CLIENT_BALANCE_TOT.REMARKSColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_BALNull() As Boolean
            Return Me.IsNull(Me.tableSV_CLIENT_BALANCE_TOT.CLIENT_BALColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_BALNull()
            Me(Me.tableSV_CLIENT_BALANCE_TOT.CLIENT_BALColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class V_RECOVERY_MASTERRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As V_RECOVERY_MASTERRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As V_RECOVERY_MASTERRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As V_RECOVERY_MASTERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SV_CLIENT_BALANCE_TOTRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SV_CLIENT_BALANCE_TOTRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SV_CLIENT_BALANCE_TOTRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SV_CLIENT_BALANCE_TOTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
