'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("dsV_SALE_MASTER"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsV_SALE_MASTER
    Inherits System.Data.DataSet
    
    Private tableV_SALE_MASTER As V_SALE_MASTERDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("V_SALE_MASTER")) Is Nothing) Then
                MyBase.Tables.Add(New V_SALE_MASTERDataTable(ds.Tables("V_SALE_MASTER")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property V_SALE_MASTER() As V_SALE_MASTERDataTable
        Get
            Return Me.tableV_SALE_MASTER
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As dsV_SALE_MASTER = CType(MyBase.Clone,dsV_SALE_MASTER)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("V_SALE_MASTER")) Is Nothing) Then
                MyBase.Tables.Add(New V_SALE_MASTERDataTable(ds.Tables("V_SALE_MASTER")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableV_SALE_MASTER = CType(MyBase.Tables("V_SALE_MASTER"),V_SALE_MASTERDataTable)
        If (initTable = true) Then
            If (Not (Me.tableV_SALE_MASTER) Is Nothing) Then
                Me.tableV_SALE_MASTER.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsV_SALE_MASTER"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsV_SALE_MASTER.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableV_SALE_MASTER = New V_SALE_MASTERDataTable
        MyBase.Tables.Add(Me.tableV_SALE_MASTER)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeV_SALE_MASTER() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsV_SALE_MASTER = New dsV_SALE_MASTER
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub V_SALE_MASTERRowChangeEventHandler(ByVal sender As Object, ByVal e As V_SALE_MASTERRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class V_SALE_MASTERDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSINV_NO As System.Data.DataColumn
        
        Private columnSHOP_NAME As System.Data.DataColumn
        
        Private columnCASH_CLIENT As System.Data.DataColumn
        
        Private columnCASH_MEMO As System.Data.DataColumn
        
        Private columnLPINV_NO As System.Data.DataColumn
        
        Private columnS_DATE As System.Data.DataColumn
        
        Private columnDISP_DATE As System.Data.DataColumn
        
        Private columnVEHICLE As System.Data.DataColumn
        
        Private columnFREIGHT As System.Data.DataColumn
        
        Private columnUNLOADING As System.Data.DataColumn
        
        Private columnTR_NO As System.Data.DataColumn
        
        Private columnTR_QTY As System.Data.DataColumn
        
        Private columnTOT_BILL As System.Data.DataColumn
        
        Private columnDISC_RS As System.Data.DataColumn
        
        Private columnDISC_PER As System.Data.DataColumn
        
        Private columnDISC_OTHER As System.Data.DataColumn
        
        Private columnOTHER_DESC As System.Data.DataColumn
        
        Private columnNET_TOTAL As System.Data.DataColumn
        
        Private columnEMP_NAME As System.Data.DataColumn
        
        Private columnGROUP_NAME As System.Data.DataColumn
        
        Private columnREMARKS As System.Data.DataColumn
        
        Private columnD_MAN As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "V_SALE_MASTER"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SINV_NOColumn() As System.Data.DataColumn
            Get
                Return Me.columnSINV_NO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SHOP_NAMEColumn() As System.Data.DataColumn
            Get
                Return Me.columnSHOP_NAME
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CASH_CLIENTColumn() As System.Data.DataColumn
            Get
                Return Me.columnCASH_CLIENT
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CASH_MEMOColumn() As System.Data.DataColumn
            Get
                Return Me.columnCASH_MEMO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LPINV_NOColumn() As System.Data.DataColumn
            Get
                Return Me.columnLPINV_NO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property S_DATEColumn() As System.Data.DataColumn
            Get
                Return Me.columnS_DATE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DISP_DATEColumn() As System.Data.DataColumn
            Get
                Return Me.columnDISP_DATE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VEHICLEColumn() As System.Data.DataColumn
            Get
                Return Me.columnVEHICLE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FREIGHTColumn() As System.Data.DataColumn
            Get
                Return Me.columnFREIGHT
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNLOADINGColumn() As System.Data.DataColumn
            Get
                Return Me.columnUNLOADING
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TR_NOColumn() As System.Data.DataColumn
            Get
                Return Me.columnTR_NO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TR_QTYColumn() As System.Data.DataColumn
            Get
                Return Me.columnTR_QTY
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOT_BILLColumn() As System.Data.DataColumn
            Get
                Return Me.columnTOT_BILL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DISC_RSColumn() As System.Data.DataColumn
            Get
                Return Me.columnDISC_RS
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DISC_PERColumn() As System.Data.DataColumn
            Get
                Return Me.columnDISC_PER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DISC_OTHERColumn() As System.Data.DataColumn
            Get
                Return Me.columnDISC_OTHER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTHER_DESCColumn() As System.Data.DataColumn
            Get
                Return Me.columnOTHER_DESC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NET_TOTALColumn() As System.Data.DataColumn
            Get
                Return Me.columnNET_TOTAL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMP_NAMEColumn() As System.Data.DataColumn
            Get
                Return Me.columnEMP_NAME
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GROUP_NAMEColumn() As System.Data.DataColumn
            Get
                Return Me.columnGROUP_NAME
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REMARKSColumn() As System.Data.DataColumn
            Get
                Return Me.columnREMARKS
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property D_MANColumn() As System.Data.DataColumn
            Get
                Return Me.columnD_MAN
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As V_SALE_MASTERRow
            Get
                Return CType(Me.Rows(index),V_SALE_MASTERRow)
            End Get
        End Property
        
        Public Event V_SALE_MASTERRowChanging As V_SALE_MASTERRowChangeEventHandler
        
        Public Event V_SALE_MASTERRowChanged As V_SALE_MASTERRowChangeEventHandler
        
        Public Event V_SALE_MASTERRowDeleting As V_SALE_MASTERRowChangeEventHandler
        
        Public Event V_SALE_MASTERRowDeleted As V_SALE_MASTERRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddV_SALE_MASTERRow(ByVal row As V_SALE_MASTERRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddV_SALE_MASTERRow( _
                    ByVal SINV_NO As Decimal,  _
                    ByVal SHOP_NAME As String,  _
                    ByVal CASH_CLIENT As String,  _
                    ByVal CASH_MEMO As String,  _
                    ByVal LPINV_NO As Decimal,  _
                    ByVal S_DATE As Date,  _
                    ByVal DISP_DATE As Date,  _
                    ByVal VEHICLE As String,  _
                    ByVal FREIGHT As Decimal,  _
                    ByVal UNLOADING As Decimal,  _
                    ByVal TR_NO As String,  _
                    ByVal TR_QTY As Decimal,  _
                    ByVal TOT_BILL As Decimal,  _
                    ByVal DISC_RS As Decimal,  _
                    ByVal DISC_PER As Decimal,  _
                    ByVal DISC_OTHER As Decimal,  _
                    ByVal OTHER_DESC As String,  _
                    ByVal NET_TOTAL As Decimal,  _
                    ByVal EMP_NAME As String,  _
                    ByVal GROUP_NAME As String,  _
                    ByVal REMARKS As String,  _
                    ByVal D_MAN As String) As V_SALE_MASTERRow
            Dim rowV_SALE_MASTERRow As V_SALE_MASTERRow = CType(Me.NewRow,V_SALE_MASTERRow)
            rowV_SALE_MASTERRow.ItemArray = New Object() {SINV_NO, SHOP_NAME, CASH_CLIENT, CASH_MEMO, LPINV_NO, S_DATE, DISP_DATE, VEHICLE, FREIGHT, UNLOADING, TR_NO, TR_QTY, TOT_BILL, DISC_RS, DISC_PER, DISC_OTHER, OTHER_DESC, NET_TOTAL, EMP_NAME, GROUP_NAME, REMARKS, D_MAN}
            Me.Rows.Add(rowV_SALE_MASTERRow)
            Return rowV_SALE_MASTERRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySINV_NO(ByVal SINV_NO As Decimal) As V_SALE_MASTERRow
            Return CType(Me.Rows.Find(New Object() {SINV_NO}),V_SALE_MASTERRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As V_SALE_MASTERDataTable = CType(MyBase.Clone,V_SALE_MASTERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New V_SALE_MASTERDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSINV_NO = MyBase.Columns("SINV_NO")
            Me.columnSHOP_NAME = MyBase.Columns("SHOP_NAME")
            Me.columnCASH_CLIENT = MyBase.Columns("CASH_CLIENT")
            Me.columnCASH_MEMO = MyBase.Columns("CASH_MEMO")
            Me.columnLPINV_NO = MyBase.Columns("LPINV_NO")
            Me.columnS_DATE = MyBase.Columns("S_DATE")
            Me.columnDISP_DATE = MyBase.Columns("DISP_DATE")
            Me.columnVEHICLE = MyBase.Columns("VEHICLE")
            Me.columnFREIGHT = MyBase.Columns("FREIGHT")
            Me.columnUNLOADING = MyBase.Columns("UNLOADING")
            Me.columnTR_NO = MyBase.Columns("TR_NO")
            Me.columnTR_QTY = MyBase.Columns("TR_QTY")
            Me.columnTOT_BILL = MyBase.Columns("TOT_BILL")
            Me.columnDISC_RS = MyBase.Columns("DISC_RS")
            Me.columnDISC_PER = MyBase.Columns("DISC_PER")
            Me.columnDISC_OTHER = MyBase.Columns("DISC_OTHER")
            Me.columnOTHER_DESC = MyBase.Columns("OTHER_DESC")
            Me.columnNET_TOTAL = MyBase.Columns("NET_TOTAL")
            Me.columnEMP_NAME = MyBase.Columns("EMP_NAME")
            Me.columnGROUP_NAME = MyBase.Columns("GROUP_NAME")
            Me.columnREMARKS = MyBase.Columns("REMARKS")
            Me.columnD_MAN = MyBase.Columns("D_MAN")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSINV_NO = New System.Data.DataColumn("SINV_NO", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSINV_NO)
            Me.columnSHOP_NAME = New System.Data.DataColumn("SHOP_NAME", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSHOP_NAME)
            Me.columnCASH_CLIENT = New System.Data.DataColumn("CASH_CLIENT", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCASH_CLIENT)
            Me.columnCASH_MEMO = New System.Data.DataColumn("CASH_MEMO", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCASH_MEMO)
            Me.columnLPINV_NO = New System.Data.DataColumn("LPINV_NO", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLPINV_NO)
            Me.columnS_DATE = New System.Data.DataColumn("S_DATE", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnS_DATE)
            Me.columnDISP_DATE = New System.Data.DataColumn("DISP_DATE", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISP_DATE)
            Me.columnVEHICLE = New System.Data.DataColumn("VEHICLE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVEHICLE)
            Me.columnFREIGHT = New System.Data.DataColumn("FREIGHT", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFREIGHT)
            Me.columnUNLOADING = New System.Data.DataColumn("UNLOADING", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNLOADING)
            Me.columnTR_NO = New System.Data.DataColumn("TR_NO", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTR_NO)
            Me.columnTR_QTY = New System.Data.DataColumn("TR_QTY", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTR_QTY)
            Me.columnTOT_BILL = New System.Data.DataColumn("TOT_BILL", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOT_BILL)
            Me.columnDISC_RS = New System.Data.DataColumn("DISC_RS", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISC_RS)
            Me.columnDISC_PER = New System.Data.DataColumn("DISC_PER", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISC_PER)
            Me.columnDISC_OTHER = New System.Data.DataColumn("DISC_OTHER", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISC_OTHER)
            Me.columnOTHER_DESC = New System.Data.DataColumn("OTHER_DESC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTHER_DESC)
            Me.columnNET_TOTAL = New System.Data.DataColumn("NET_TOTAL", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNET_TOTAL)
            Me.columnEMP_NAME = New System.Data.DataColumn("EMP_NAME", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMP_NAME)
            Me.columnGROUP_NAME = New System.Data.DataColumn("GROUP_NAME", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGROUP_NAME)
            Me.columnREMARKS = New System.Data.DataColumn("REMARKS", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREMARKS)
            Me.columnD_MAN = New System.Data.DataColumn("D_MAN", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnD_MAN)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSINV_NO}, true))
            Me.columnSINV_NO.AllowDBNull = false
            Me.columnSINV_NO.Unique = true
            Me.columnSHOP_NAME.MaxLength = 50
            Me.columnCASH_CLIENT.MaxLength = 50
            Me.columnCASH_MEMO.MaxLength = 25
            Me.columnS_DATE.AllowDBNull = false
            Me.columnDISP_DATE.AllowDBNull = false
            Me.columnVEHICLE.MaxLength = 25
            Me.columnFREIGHT.AllowDBNull = false
            Me.columnUNLOADING.AllowDBNull = false
            Me.columnTR_NO.MaxLength = 25
            Me.columnTR_QTY.AllowDBNull = false
            Me.columnTOT_BILL.AllowDBNull = false
            Me.columnDISC_RS.AllowDBNull = false
            Me.columnDISC_PER.AllowDBNull = false
            Me.columnDISC_OTHER.AllowDBNull = false
            Me.columnOTHER_DESC.MaxLength = 100
            Me.columnNET_TOTAL.AllowDBNull = false
            Me.columnEMP_NAME.AllowDBNull = false
            Me.columnEMP_NAME.MaxLength = 50
            Me.columnGROUP_NAME.MaxLength = 50
            Me.columnREMARKS.MaxLength = 100
            Me.columnD_MAN.AllowDBNull = false
            Me.columnD_MAN.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewV_SALE_MASTERRow() As V_SALE_MASTERRow
            Return CType(Me.NewRow,V_SALE_MASTERRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New V_SALE_MASTERRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(V_SALE_MASTERRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.V_SALE_MASTERRowChangedEvent) Is Nothing) Then
                RaiseEvent V_SALE_MASTERRowChanged(Me, New V_SALE_MASTERRowChangeEvent(CType(e.Row,V_SALE_MASTERRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.V_SALE_MASTERRowChangingEvent) Is Nothing) Then
                RaiseEvent V_SALE_MASTERRowChanging(Me, New V_SALE_MASTERRowChangeEvent(CType(e.Row,V_SALE_MASTERRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.V_SALE_MASTERRowDeletedEvent) Is Nothing) Then
                RaiseEvent V_SALE_MASTERRowDeleted(Me, New V_SALE_MASTERRowChangeEvent(CType(e.Row,V_SALE_MASTERRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.V_SALE_MASTERRowDeletingEvent) Is Nothing) Then
                RaiseEvent V_SALE_MASTERRowDeleting(Me, New V_SALE_MASTERRowChangeEvent(CType(e.Row,V_SALE_MASTERRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveV_SALE_MASTERRow(ByVal row As V_SALE_MASTERRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsV_SALE_MASTER = New dsV_SALE_MASTER
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "V_SALE_MASTERDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class V_SALE_MASTERRow
        Inherits System.Data.DataRow
        
        Private tableV_SALE_MASTER As V_SALE_MASTERDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableV_SALE_MASTER = CType(Me.Table,V_SALE_MASTERDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SINV_NO() As Decimal
            Get
                Return CType(Me(Me.tableV_SALE_MASTER.SINV_NOColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_SALE_MASTER.SINV_NOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SHOP_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_SALE_MASTER.SHOP_NAMEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SHOP_NAME' in table 'V_SALE_MASTER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_SALE_MASTER.SHOP_NAMEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CASH_CLIENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_SALE_MASTER.CASH_CLIENTColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'CASH_CLIENT' in table 'V_SALE_MASTER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_SALE_MASTER.CASH_CLIENTColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CASH_MEMO() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_SALE_MASTER.CASH_MEMOColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'CASH_MEMO' in table 'V_SALE_MASTER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_SALE_MASTER.CASH_MEMOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LPINV_NO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_SALE_MASTER.LPINV_NOColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'LPINV_NO' in table 'V_SALE_MASTER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_SALE_MASTER.LPINV_NOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property S_DATE() As Date
            Get
                Return CType(Me(Me.tableV_SALE_MASTER.S_DATEColumn),Date)
            End Get
            Set
                Me(Me.tableV_SALE_MASTER.S_DATEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DISP_DATE() As Date
            Get
                Return CType(Me(Me.tableV_SALE_MASTER.DISP_DATEColumn),Date)
            End Get
            Set
                Me(Me.tableV_SALE_MASTER.DISP_DATEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VEHICLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_SALE_MASTER.VEHICLEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'VEHICLE' in table 'V_SALE_MASTER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_SALE_MASTER.VEHICLEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FREIGHT() As Decimal
            Get
                Return CType(Me(Me.tableV_SALE_MASTER.FREIGHTColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_SALE_MASTER.FREIGHTColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNLOADING() As Decimal
            Get
                Return CType(Me(Me.tableV_SALE_MASTER.UNLOADINGColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_SALE_MASTER.UNLOADINGColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TR_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_SALE_MASTER.TR_NOColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'TR_NO' in table 'V_SALE_MASTER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_SALE_MASTER.TR_NOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TR_QTY() As Decimal
            Get
                Return CType(Me(Me.tableV_SALE_MASTER.TR_QTYColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_SALE_MASTER.TR_QTYColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOT_BILL() As Decimal
            Get
                Return CType(Me(Me.tableV_SALE_MASTER.TOT_BILLColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_SALE_MASTER.TOT_BILLColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DISC_RS() As Decimal
            Get
                Return CType(Me(Me.tableV_SALE_MASTER.DISC_RSColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_SALE_MASTER.DISC_RSColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DISC_PER() As Decimal
            Get
                Return CType(Me(Me.tableV_SALE_MASTER.DISC_PERColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_SALE_MASTER.DISC_PERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DISC_OTHER() As Decimal
            Get
                Return CType(Me(Me.tableV_SALE_MASTER.DISC_OTHERColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_SALE_MASTER.DISC_OTHERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTHER_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_SALE_MASTER.OTHER_DESCColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'OTHER_DESC' in table 'V_SALE_MASTER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_SALE_MASTER.OTHER_DESCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NET_TOTAL() As Decimal
            Get
                Return CType(Me(Me.tableV_SALE_MASTER.NET_TOTALColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_SALE_MASTER.NET_TOTALColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMP_NAME() As String
            Get
                Return CType(Me(Me.tableV_SALE_MASTER.EMP_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableV_SALE_MASTER.EMP_NAMEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GROUP_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_SALE_MASTER.GROUP_NAMEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'GROUP_NAME' in table 'V_SALE_MASTER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_SALE_MASTER.GROUP_NAMEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REMARKS() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_SALE_MASTER.REMARKSColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'REMARKS' in table 'V_SALE_MASTER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_SALE_MASTER.REMARKSColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property D_MAN() As String
            Get
                Return CType(Me(Me.tableV_SALE_MASTER.D_MANColumn),String)
            End Get
            Set
                Me(Me.tableV_SALE_MASTER.D_MANColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSHOP_NAMENull() As Boolean
            Return Me.IsNull(Me.tableV_SALE_MASTER.SHOP_NAMEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSHOP_NAMENull()
            Me(Me.tableV_SALE_MASTER.SHOP_NAMEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCASH_CLIENTNull() As Boolean
            Return Me.IsNull(Me.tableV_SALE_MASTER.CASH_CLIENTColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCASH_CLIENTNull()
            Me(Me.tableV_SALE_MASTER.CASH_CLIENTColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCASH_MEMONull() As Boolean
            Return Me.IsNull(Me.tableV_SALE_MASTER.CASH_MEMOColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCASH_MEMONull()
            Me(Me.tableV_SALE_MASTER.CASH_MEMOColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLPINV_NONull() As Boolean
            Return Me.IsNull(Me.tableV_SALE_MASTER.LPINV_NOColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLPINV_NONull()
            Me(Me.tableV_SALE_MASTER.LPINV_NOColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVEHICLENull() As Boolean
            Return Me.IsNull(Me.tableV_SALE_MASTER.VEHICLEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVEHICLENull()
            Me(Me.tableV_SALE_MASTER.VEHICLEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTR_NONull() As Boolean
            Return Me.IsNull(Me.tableV_SALE_MASTER.TR_NOColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTR_NONull()
            Me(Me.tableV_SALE_MASTER.TR_NOColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTHER_DESCNull() As Boolean
            Return Me.IsNull(Me.tableV_SALE_MASTER.OTHER_DESCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTHER_DESCNull()
            Me(Me.tableV_SALE_MASTER.OTHER_DESCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGROUP_NAMENull() As Boolean
            Return Me.IsNull(Me.tableV_SALE_MASTER.GROUP_NAMEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGROUP_NAMENull()
            Me(Me.tableV_SALE_MASTER.GROUP_NAMEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREMARKSNull() As Boolean
            Return Me.IsNull(Me.tableV_SALE_MASTER.REMARKSColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREMARKSNull()
            Me(Me.tableV_SALE_MASTER.REMARKSColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class V_SALE_MASTERRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As V_SALE_MASTERRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As V_SALE_MASTERRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As V_SALE_MASTERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
