'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("dsV_PURCHASE_DETAIL"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsV_PURCHASE_DETAIL
    Inherits System.Data.DataSet
    
    Private tableV_PURCHASE_DETAIL As V_PURCHASE_DETAILDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("V_PURCHASE_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New V_PURCHASE_DETAILDataTable(ds.Tables("V_PURCHASE_DETAIL")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property V_PURCHASE_DETAIL() As V_PURCHASE_DETAILDataTable
        Get
            Return Me.tableV_PURCHASE_DETAIL
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As dsV_PURCHASE_DETAIL = CType(MyBase.Clone,dsV_PURCHASE_DETAIL)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("V_PURCHASE_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New V_PURCHASE_DETAILDataTable(ds.Tables("V_PURCHASE_DETAIL")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableV_PURCHASE_DETAIL = CType(MyBase.Tables("V_PURCHASE_DETAIL"),V_PURCHASE_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableV_PURCHASE_DETAIL) Is Nothing) Then
                Me.tableV_PURCHASE_DETAIL.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsV_PURCHASE_DETAIL"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsV_PURCHASE_DETAIL.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableV_PURCHASE_DETAIL = New V_PURCHASE_DETAILDataTable
        MyBase.Tables.Add(Me.tableV_PURCHASE_DETAIL)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeV_PURCHASE_DETAIL() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsV_PURCHASE_DETAIL = New dsV_PURCHASE_DETAIL
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub V_PURCHASE_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As V_PURCHASE_DETAILRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class V_PURCHASE_DETAILDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As System.Data.DataColumn
        
        Private columnPINV_NO As System.Data.DataColumn
        
        Private columnITEM_CODE As System.Data.DataColumn
        
        Private columnITEM_NAME As System.Data.DataColumn
        
        Private columnBATCH_NO As System.Data.DataColumn
        
        Private columnUNIT_COST As System.Data.DataColumn
        
        Private columnDISC_PER As System.Data.DataColumn
        
        Private columnPPP As System.Data.DataColumn
        
        Private columnQTY_PKS As System.Data.DataColumn
        
        Private columnQTY_PCS As System.Data.DataColumn
        
        Private columnQTY_BONUS As System.Data.DataColumn
        
        Private columnQTY_TOT_PCS As System.Data.DataColumn
        
        Private columnTOTAL_VALUE As System.Data.DataColumn
        
        Private columnSCM_ITEM_CODE As System.Data.DataColumn
        
        Private columnSCM_ITEM As System.Data.DataColumn
        
        Private columnSCM_QTY As System.Data.DataColumn
        
        Private columnSALE_TAX As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "V_PURCHASE_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PINV_NOColumn() As System.Data.DataColumn
            Get
                Return Me.columnPINV_NO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_CODEColumn() As System.Data.DataColumn
            Get
                Return Me.columnITEM_CODE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_NAMEColumn() As System.Data.DataColumn
            Get
                Return Me.columnITEM_NAME
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BATCH_NOColumn() As System.Data.DataColumn
            Get
                Return Me.columnBATCH_NO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNIT_COSTColumn() As System.Data.DataColumn
            Get
                Return Me.columnUNIT_COST
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DISC_PERColumn() As System.Data.DataColumn
            Get
                Return Me.columnDISC_PER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PPPColumn() As System.Data.DataColumn
            Get
                Return Me.columnPPP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QTY_PKSColumn() As System.Data.DataColumn
            Get
                Return Me.columnQTY_PKS
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QTY_PCSColumn() As System.Data.DataColumn
            Get
                Return Me.columnQTY_PCS
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QTY_BONUSColumn() As System.Data.DataColumn
            Get
                Return Me.columnQTY_BONUS
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QTY_TOT_PCSColumn() As System.Data.DataColumn
            Get
                Return Me.columnQTY_TOT_PCS
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_VALUEColumn() As System.Data.DataColumn
            Get
                Return Me.columnTOTAL_VALUE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SCM_ITEM_CODEColumn() As System.Data.DataColumn
            Get
                Return Me.columnSCM_ITEM_CODE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SCM_ITEMColumn() As System.Data.DataColumn
            Get
                Return Me.columnSCM_ITEM
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SCM_QTYColumn() As System.Data.DataColumn
            Get
                Return Me.columnSCM_QTY
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALE_TAXColumn() As System.Data.DataColumn
            Get
                Return Me.columnSALE_TAX
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As V_PURCHASE_DETAILRow
            Get
                Return CType(Me.Rows(index),V_PURCHASE_DETAILRow)
            End Get
        End Property
        
        Public Event V_PURCHASE_DETAILRowChanging As V_PURCHASE_DETAILRowChangeEventHandler
        
        Public Event V_PURCHASE_DETAILRowChanged As V_PURCHASE_DETAILRowChangeEventHandler
        
        Public Event V_PURCHASE_DETAILRowDeleting As V_PURCHASE_DETAILRowChangeEventHandler
        
        Public Event V_PURCHASE_DETAILRowDeleted As V_PURCHASE_DETAILRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddV_PURCHASE_DETAILRow(ByVal row As V_PURCHASE_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddV_PURCHASE_DETAILRow( _
                    ByVal PINV_NO As String,  _
                    ByVal ITEM_CODE As Decimal,  _
                    ByVal ITEM_NAME As String,  _
                    ByVal BATCH_NO As String,  _
                    ByVal UNIT_COST As Decimal,  _
                    ByVal DISC_PER As Decimal,  _
                    ByVal PPP As Decimal,  _
                    ByVal QTY_PKS As Decimal,  _
                    ByVal QTY_PCS As Decimal,  _
                    ByVal QTY_BONUS As Decimal,  _
                    ByVal QTY_TOT_PCS As Decimal,  _
                    ByVal TOTAL_VALUE As Decimal,  _
                    ByVal SCM_ITEM_CODE As Decimal,  _
                    ByVal SCM_ITEM As String,  _
                    ByVal SCM_QTY As Decimal,  _
                    ByVal SALE_TAX As Decimal) As V_PURCHASE_DETAILRow
            Dim rowV_PURCHASE_DETAILRow As V_PURCHASE_DETAILRow = CType(Me.NewRow,V_PURCHASE_DETAILRow)
            rowV_PURCHASE_DETAILRow.ItemArray = New Object() {Nothing, PINV_NO, ITEM_CODE, ITEM_NAME, BATCH_NO, UNIT_COST, DISC_PER, PPP, QTY_PKS, QTY_PCS, QTY_BONUS, QTY_TOT_PCS, TOTAL_VALUE, SCM_ITEM_CODE, SCM_ITEM, SCM_QTY, SALE_TAX}
            Me.Rows.Add(rowV_PURCHASE_DETAILRow)
            Return rowV_PURCHASE_DETAILRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Decimal) As V_PURCHASE_DETAILRow
            Return CType(Me.Rows.Find(New Object() {ID}),V_PURCHASE_DETAILRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As V_PURCHASE_DETAILDataTable = CType(MyBase.Clone,V_PURCHASE_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New V_PURCHASE_DETAILDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnPINV_NO = MyBase.Columns("PINV_NO")
            Me.columnITEM_CODE = MyBase.Columns("ITEM_CODE")
            Me.columnITEM_NAME = MyBase.Columns("ITEM_NAME")
            Me.columnBATCH_NO = MyBase.Columns("BATCH_NO")
            Me.columnUNIT_COST = MyBase.Columns("UNIT_COST")
            Me.columnDISC_PER = MyBase.Columns("DISC_PER")
            Me.columnPPP = MyBase.Columns("PPP")
            Me.columnQTY_PKS = MyBase.Columns("QTY_PKS")
            Me.columnQTY_PCS = MyBase.Columns("QTY_PCS")
            Me.columnQTY_BONUS = MyBase.Columns("QTY_BONUS")
            Me.columnQTY_TOT_PCS = MyBase.Columns("QTY_TOT_PCS")
            Me.columnTOTAL_VALUE = MyBase.Columns("TOTAL_VALUE")
            Me.columnSCM_ITEM_CODE = MyBase.Columns("SCM_ITEM_CODE")
            Me.columnSCM_ITEM = MyBase.Columns("SCM_ITEM")
            Me.columnSCM_QTY = MyBase.Columns("SCM_QTY")
            Me.columnSALE_TAX = MyBase.Columns("SALE_TAX")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New System.Data.DataColumn("ID", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnPINV_NO = New System.Data.DataColumn("PINV_NO", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPINV_NO)
            Me.columnITEM_CODE = New System.Data.DataColumn("ITEM_CODE", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_CODE)
            Me.columnITEM_NAME = New System.Data.DataColumn("ITEM_NAME", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_NAME)
            Me.columnBATCH_NO = New System.Data.DataColumn("BATCH_NO", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCH_NO)
            Me.columnUNIT_COST = New System.Data.DataColumn("UNIT_COST", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT_COST)
            Me.columnDISC_PER = New System.Data.DataColumn("DISC_PER", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISC_PER)
            Me.columnPPP = New System.Data.DataColumn("PPP", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPPP)
            Me.columnQTY_PKS = New System.Data.DataColumn("QTY_PKS", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQTY_PKS)
            Me.columnQTY_PCS = New System.Data.DataColumn("QTY_PCS", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQTY_PCS)
            Me.columnQTY_BONUS = New System.Data.DataColumn("QTY_BONUS", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQTY_BONUS)
            Me.columnQTY_TOT_PCS = New System.Data.DataColumn("QTY_TOT_PCS", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQTY_TOT_PCS)
            Me.columnTOTAL_VALUE = New System.Data.DataColumn("TOTAL_VALUE", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_VALUE)
            Me.columnSCM_ITEM_CODE = New System.Data.DataColumn("SCM_ITEM_CODE", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSCM_ITEM_CODE)
            Me.columnSCM_ITEM = New System.Data.DataColumn("SCM_ITEM", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSCM_ITEM)
            Me.columnSCM_QTY = New System.Data.DataColumn("SCM_QTY", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSCM_QTY)
            Me.columnSALE_TAX = New System.Data.DataColumn("SALE_TAX", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALE_TAX)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnPINV_NO.AllowDBNull = false
            Me.columnPINV_NO.MaxLength = 50
            Me.columnITEM_CODE.AllowDBNull = false
            Me.columnITEM_NAME.AllowDBNull = false
            Me.columnITEM_NAME.MaxLength = 50
            Me.columnBATCH_NO.MaxLength = 50
            Me.columnUNIT_COST.AllowDBNull = false
            Me.columnDISC_PER.AllowDBNull = false
            Me.columnPPP.AllowDBNull = false
            Me.columnQTY_PKS.AllowDBNull = false
            Me.columnQTY_PCS.AllowDBNull = false
            Me.columnQTY_BONUS.AllowDBNull = false
            Me.columnQTY_TOT_PCS.AllowDBNull = false
            Me.columnSCM_ITEM.MaxLength = 50
            Me.columnSCM_QTY.AllowDBNull = false
            Me.columnSALE_TAX.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewV_PURCHASE_DETAILRow() As V_PURCHASE_DETAILRow
            Return CType(Me.NewRow,V_PURCHASE_DETAILRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New V_PURCHASE_DETAILRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(V_PURCHASE_DETAILRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.V_PURCHASE_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent V_PURCHASE_DETAILRowChanged(Me, New V_PURCHASE_DETAILRowChangeEvent(CType(e.Row,V_PURCHASE_DETAILRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.V_PURCHASE_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent V_PURCHASE_DETAILRowChanging(Me, New V_PURCHASE_DETAILRowChangeEvent(CType(e.Row,V_PURCHASE_DETAILRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.V_PURCHASE_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent V_PURCHASE_DETAILRowDeleted(Me, New V_PURCHASE_DETAILRowChangeEvent(CType(e.Row,V_PURCHASE_DETAILRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.V_PURCHASE_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent V_PURCHASE_DETAILRowDeleting(Me, New V_PURCHASE_DETAILRowChangeEvent(CType(e.Row,V_PURCHASE_DETAILRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveV_PURCHASE_DETAILRow(ByVal row As V_PURCHASE_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsV_PURCHASE_DETAIL = New dsV_PURCHASE_DETAIL
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "V_PURCHASE_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class V_PURCHASE_DETAILRow
        Inherits System.Data.DataRow
        
        Private tableV_PURCHASE_DETAIL As V_PURCHASE_DETAILDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableV_PURCHASE_DETAIL = CType(Me.Table,V_PURCHASE_DETAILDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Decimal
            Get
                Return CType(Me(Me.tableV_PURCHASE_DETAIL.IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_PURCHASE_DETAIL.IDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PINV_NO() As String
            Get
                Return CType(Me(Me.tableV_PURCHASE_DETAIL.PINV_NOColumn),String)
            End Get
            Set
                Me(Me.tableV_PURCHASE_DETAIL.PINV_NOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_CODE() As Decimal
            Get
                Return CType(Me(Me.tableV_PURCHASE_DETAIL.ITEM_CODEColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_PURCHASE_DETAIL.ITEM_CODEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_NAME() As String
            Get
                Return CType(Me(Me.tableV_PURCHASE_DETAIL.ITEM_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableV_PURCHASE_DETAIL.ITEM_NAMEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BATCH_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_PURCHASE_DETAIL.BATCH_NOColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'BATCH_NO' in table 'V_PURCHASE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_PURCHASE_DETAIL.BATCH_NOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIT_COST() As Decimal
            Get
                Return CType(Me(Me.tableV_PURCHASE_DETAIL.UNIT_COSTColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_PURCHASE_DETAIL.UNIT_COSTColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DISC_PER() As Decimal
            Get
                Return CType(Me(Me.tableV_PURCHASE_DETAIL.DISC_PERColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_PURCHASE_DETAIL.DISC_PERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PPP() As Decimal
            Get
                Return CType(Me(Me.tableV_PURCHASE_DETAIL.PPPColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_PURCHASE_DETAIL.PPPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QTY_PKS() As Decimal
            Get
                Return CType(Me(Me.tableV_PURCHASE_DETAIL.QTY_PKSColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_PURCHASE_DETAIL.QTY_PKSColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QTY_PCS() As Decimal
            Get
                Return CType(Me(Me.tableV_PURCHASE_DETAIL.QTY_PCSColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_PURCHASE_DETAIL.QTY_PCSColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QTY_BONUS() As Decimal
            Get
                Return CType(Me(Me.tableV_PURCHASE_DETAIL.QTY_BONUSColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_PURCHASE_DETAIL.QTY_BONUSColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QTY_TOT_PCS() As Decimal
            Get
                Return CType(Me(Me.tableV_PURCHASE_DETAIL.QTY_TOT_PCSColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_PURCHASE_DETAIL.QTY_TOT_PCSColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_VALUE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_PURCHASE_DETAIL.TOTAL_VALUEColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'TOTAL_VALUE' in table 'V_PURCHASE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_PURCHASE_DETAIL.TOTAL_VALUEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SCM_ITEM_CODE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_PURCHASE_DETAIL.SCM_ITEM_CODEColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SCM_ITEM_CODE' in table 'V_PURCHASE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_PURCHASE_DETAIL.SCM_ITEM_CODEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SCM_ITEM() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_PURCHASE_DETAIL.SCM_ITEMColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SCM_ITEM' in table 'V_PURCHASE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_PURCHASE_DETAIL.SCM_ITEMColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SCM_QTY() As Decimal
            Get
                Return CType(Me(Me.tableV_PURCHASE_DETAIL.SCM_QTYColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_PURCHASE_DETAIL.SCM_QTYColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALE_TAX() As Decimal
            Get
                Return CType(Me(Me.tableV_PURCHASE_DETAIL.SALE_TAXColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_PURCHASE_DETAIL.SALE_TAXColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBATCH_NONull() As Boolean
            Return Me.IsNull(Me.tableV_PURCHASE_DETAIL.BATCH_NOColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBATCH_NONull()
            Me(Me.tableV_PURCHASE_DETAIL.BATCH_NOColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_VALUENull() As Boolean
            Return Me.IsNull(Me.tableV_PURCHASE_DETAIL.TOTAL_VALUEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_VALUENull()
            Me(Me.tableV_PURCHASE_DETAIL.TOTAL_VALUEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSCM_ITEM_CODENull() As Boolean
            Return Me.IsNull(Me.tableV_PURCHASE_DETAIL.SCM_ITEM_CODEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSCM_ITEM_CODENull()
            Me(Me.tableV_PURCHASE_DETAIL.SCM_ITEM_CODEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSCM_ITEMNull() As Boolean
            Return Me.IsNull(Me.tableV_PURCHASE_DETAIL.SCM_ITEMColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSCM_ITEMNull()
            Me(Me.tableV_PURCHASE_DETAIL.SCM_ITEMColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class V_PURCHASE_DETAILRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As V_PURCHASE_DETAILRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As V_PURCHASE_DETAILRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As V_PURCHASE_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
