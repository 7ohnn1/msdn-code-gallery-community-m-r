'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("dsCLIENT_INFO1"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsCLIENT_INFO1
    Inherits System.Data.DataSet
    
    Private tableV_CLIENT_INFO As V_CLIENT_INFODataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("V_CLIENT_INFO")) Is Nothing) Then
                MyBase.Tables.Add(New V_CLIENT_INFODataTable(ds.Tables("V_CLIENT_INFO")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property V_CLIENT_INFO() As V_CLIENT_INFODataTable
        Get
            Return Me.tableV_CLIENT_INFO
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As dsCLIENT_INFO1 = CType(MyBase.Clone,dsCLIENT_INFO1)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("V_CLIENT_INFO")) Is Nothing) Then
                MyBase.Tables.Add(New V_CLIENT_INFODataTable(ds.Tables("V_CLIENT_INFO")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableV_CLIENT_INFO = CType(MyBase.Tables("V_CLIENT_INFO"),V_CLIENT_INFODataTable)
        If (initTable = true) Then
            If (Not (Me.tableV_CLIENT_INFO) Is Nothing) Then
                Me.tableV_CLIENT_INFO.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsCLIENT_INFO1"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsCLIENT_INFO1.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableV_CLIENT_INFO = New V_CLIENT_INFODataTable
        MyBase.Tables.Add(Me.tableV_CLIENT_INFO)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeV_CLIENT_INFO() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsCLIENT_INFO1 = New dsCLIENT_INFO1
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub V_CLIENT_INFORowChangeEventHandler(ByVal sender As Object, ByVal e As V_CLIENT_INFORowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class V_CLIENT_INFODataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As System.Data.DataColumn
        
        Private columnNAME As System.Data.DataColumn
        
        Private columnSHOP_NAME As System.Data.DataColumn
        
        Private columnSHOP_ADD As System.Data.DataColumn
        
        Private columnAREA As System.Data.DataColumn
        
        Private columnHOME_ADD As System.Data.DataColumn
        
        Private columnSHOP_PH As System.Data.DataColumn
        
        Private columnHOME_PH As System.Data.DataColumn
        
        Private columnCELL_NO As System.Data.DataColumn
        
        Private columnFAX_NO As System.Data.DataColumn
        
        Private columnE_MAIL As System.Data.DataColumn
        
        Private columnWEB_SITE As System.Data.DataColumn
        
        Private columnSTATUS As System.Data.DataColumn
        
        Private columnCLIENT_CAT As System.Data.DataColumn
        
        Private columnCLIENT_GD As System.Data.DataColumn
        
        Private columnCLIENT_TYPE As System.Data.DataColumn
        
        Private columnCREDIT_LIM As System.Data.DataColumn
        
        Private columnGST_NO As System.Data.DataColumn
        
        Private columnOPEN_BAL As System.Data.DataColumn
        
        Private columnVISIT_TYPE As System.Data.DataColumn
        
        Private columnNO_VISIT As System.Data.DataColumn
        
        Private columnROUTE As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "V_CLIENT_INFO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NAMEColumn() As System.Data.DataColumn
            Get
                Return Me.columnNAME
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SHOP_NAMEColumn() As System.Data.DataColumn
            Get
                Return Me.columnSHOP_NAME
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SHOP_ADDColumn() As System.Data.DataColumn
            Get
                Return Me.columnSHOP_ADD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AREAColumn() As System.Data.DataColumn
            Get
                Return Me.columnAREA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HOME_ADDColumn() As System.Data.DataColumn
            Get
                Return Me.columnHOME_ADD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SHOP_PHColumn() As System.Data.DataColumn
            Get
                Return Me.columnSHOP_PH
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HOME_PHColumn() As System.Data.DataColumn
            Get
                Return Me.columnHOME_PH
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CELL_NOColumn() As System.Data.DataColumn
            Get
                Return Me.columnCELL_NO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAX_NOColumn() As System.Data.DataColumn
            Get
                Return Me.columnFAX_NO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property E_MAILColumn() As System.Data.DataColumn
            Get
                Return Me.columnE_MAIL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WEB_SITEColumn() As System.Data.DataColumn
            Get
                Return Me.columnWEB_SITE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUSColumn() As System.Data.DataColumn
            Get
                Return Me.columnSTATUS
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_CATColumn() As System.Data.DataColumn
            Get
                Return Me.columnCLIENT_CAT
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_GDColumn() As System.Data.DataColumn
            Get
                Return Me.columnCLIENT_GD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_TYPEColumn() As System.Data.DataColumn
            Get
                Return Me.columnCLIENT_TYPE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CREDIT_LIMColumn() As System.Data.DataColumn
            Get
                Return Me.columnCREDIT_LIM
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GST_NOColumn() As System.Data.DataColumn
            Get
                Return Me.columnGST_NO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPEN_BALColumn() As System.Data.DataColumn
            Get
                Return Me.columnOPEN_BAL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VISIT_TYPEColumn() As System.Data.DataColumn
            Get
                Return Me.columnVISIT_TYPE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NO_VISITColumn() As System.Data.DataColumn
            Get
                Return Me.columnNO_VISIT
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ROUTEColumn() As System.Data.DataColumn
            Get
                Return Me.columnROUTE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As V_CLIENT_INFORow
            Get
                Return CType(Me.Rows(index),V_CLIENT_INFORow)
            End Get
        End Property
        
        Public Event V_CLIENT_INFORowChanging As V_CLIENT_INFORowChangeEventHandler
        
        Public Event V_CLIENT_INFORowChanged As V_CLIENT_INFORowChangeEventHandler
        
        Public Event V_CLIENT_INFORowDeleting As V_CLIENT_INFORowChangeEventHandler
        
        Public Event V_CLIENT_INFORowDeleted As V_CLIENT_INFORowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddV_CLIENT_INFORow(ByVal row As V_CLIENT_INFORow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddV_CLIENT_INFORow( _
                    ByVal ID As Decimal,  _
                    ByVal NAME As String,  _
                    ByVal SHOP_NAME As String,  _
                    ByVal SHOP_ADD As String,  _
                    ByVal AREA As String,  _
                    ByVal HOME_ADD As String,  _
                    ByVal SHOP_PH As String,  _
                    ByVal HOME_PH As String,  _
                    ByVal CELL_NO As String,  _
                    ByVal FAX_NO As String,  _
                    ByVal E_MAIL As String,  _
                    ByVal WEB_SITE As String,  _
                    ByVal STATUS As String,  _
                    ByVal CLIENT_CAT As String,  _
                    ByVal CLIENT_GD As String,  _
                    ByVal CLIENT_TYPE As String,  _
                    ByVal CREDIT_LIM As Decimal,  _
                    ByVal GST_NO As String,  _
                    ByVal OPEN_BAL As Decimal,  _
                    ByVal VISIT_TYPE As String,  _
                    ByVal NO_VISIT As Decimal,  _
                    ByVal ROUTE As String) As V_CLIENT_INFORow
            Dim rowV_CLIENT_INFORow As V_CLIENT_INFORow = CType(Me.NewRow,V_CLIENT_INFORow)
            rowV_CLIENT_INFORow.ItemArray = New Object() {ID, NAME, SHOP_NAME, SHOP_ADD, AREA, HOME_ADD, SHOP_PH, HOME_PH, CELL_NO, FAX_NO, E_MAIL, WEB_SITE, STATUS, CLIENT_CAT, CLIENT_GD, CLIENT_TYPE, CREDIT_LIM, GST_NO, OPEN_BAL, VISIT_TYPE, NO_VISIT, ROUTE}
            Me.Rows.Add(rowV_CLIENT_INFORow)
            Return rowV_CLIENT_INFORow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Decimal) As V_CLIENT_INFORow
            Return CType(Me.Rows.Find(New Object() {ID}),V_CLIENT_INFORow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As V_CLIENT_INFODataTable = CType(MyBase.Clone,V_CLIENT_INFODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New V_CLIENT_INFODataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnNAME = MyBase.Columns("NAME")
            Me.columnSHOP_NAME = MyBase.Columns("SHOP_NAME")
            Me.columnSHOP_ADD = MyBase.Columns("SHOP_ADD")
            Me.columnAREA = MyBase.Columns("AREA")
            Me.columnHOME_ADD = MyBase.Columns("HOME_ADD")
            Me.columnSHOP_PH = MyBase.Columns("SHOP_PH")
            Me.columnHOME_PH = MyBase.Columns("HOME_PH")
            Me.columnCELL_NO = MyBase.Columns("CELL_NO")
            Me.columnFAX_NO = MyBase.Columns("FAX_NO")
            Me.columnE_MAIL = MyBase.Columns("E_MAIL")
            Me.columnWEB_SITE = MyBase.Columns("WEB_SITE")
            Me.columnSTATUS = MyBase.Columns("STATUS")
            Me.columnCLIENT_CAT = MyBase.Columns("CLIENT_CAT")
            Me.columnCLIENT_GD = MyBase.Columns("CLIENT_GD")
            Me.columnCLIENT_TYPE = MyBase.Columns("CLIENT_TYPE")
            Me.columnCREDIT_LIM = MyBase.Columns("CREDIT_LIM")
            Me.columnGST_NO = MyBase.Columns("GST_NO")
            Me.columnOPEN_BAL = MyBase.Columns("OPEN_BAL")
            Me.columnVISIT_TYPE = MyBase.Columns("VISIT_TYPE")
            Me.columnNO_VISIT = MyBase.Columns("NO_VISIT")
            Me.columnROUTE = MyBase.Columns("ROUTE")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New System.Data.DataColumn("ID", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnNAME = New System.Data.DataColumn("NAME", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNAME)
            Me.columnSHOP_NAME = New System.Data.DataColumn("SHOP_NAME", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSHOP_NAME)
            Me.columnSHOP_ADD = New System.Data.DataColumn("SHOP_ADD", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSHOP_ADD)
            Me.columnAREA = New System.Data.DataColumn("AREA", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAREA)
            Me.columnHOME_ADD = New System.Data.DataColumn("HOME_ADD", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHOME_ADD)
            Me.columnSHOP_PH = New System.Data.DataColumn("SHOP_PH", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSHOP_PH)
            Me.columnHOME_PH = New System.Data.DataColumn("HOME_PH", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHOME_PH)
            Me.columnCELL_NO = New System.Data.DataColumn("CELL_NO", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCELL_NO)
            Me.columnFAX_NO = New System.Data.DataColumn("FAX_NO", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAX_NO)
            Me.columnE_MAIL = New System.Data.DataColumn("E_MAIL", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnE_MAIL)
            Me.columnWEB_SITE = New System.Data.DataColumn("WEB_SITE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWEB_SITE)
            Me.columnSTATUS = New System.Data.DataColumn("STATUS", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS)
            Me.columnCLIENT_CAT = New System.Data.DataColumn("CLIENT_CAT", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_CAT)
            Me.columnCLIENT_GD = New System.Data.DataColumn("CLIENT_GD", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_GD)
            Me.columnCLIENT_TYPE = New System.Data.DataColumn("CLIENT_TYPE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_TYPE)
            Me.columnCREDIT_LIM = New System.Data.DataColumn("CREDIT_LIM", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREDIT_LIM)
            Me.columnGST_NO = New System.Data.DataColumn("GST_NO", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGST_NO)
            Me.columnOPEN_BAL = New System.Data.DataColumn("OPEN_BAL", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPEN_BAL)
            Me.columnVISIT_TYPE = New System.Data.DataColumn("VISIT_TYPE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVISIT_TYPE)
            Me.columnNO_VISIT = New System.Data.DataColumn("NO_VISIT", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNO_VISIT)
            Me.columnROUTE = New System.Data.DataColumn("ROUTE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROUTE)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnNAME.AllowDBNull = false
            Me.columnNAME.MaxLength = 50
            Me.columnSHOP_NAME.MaxLength = 50
            Me.columnSHOP_ADD.MaxLength = 50
            Me.columnAREA.AllowDBNull = false
            Me.columnAREA.MaxLength = 50
            Me.columnHOME_ADD.MaxLength = 50
            Me.columnSHOP_PH.MaxLength = 50
            Me.columnHOME_PH.MaxLength = 50
            Me.columnCELL_NO.MaxLength = 50
            Me.columnFAX_NO.MaxLength = 50
            Me.columnE_MAIL.MaxLength = 50
            Me.columnWEB_SITE.MaxLength = 50
            Me.columnSTATUS.ReadOnly = true
            Me.columnSTATUS.MaxLength = 3
            Me.columnCLIENT_CAT.MaxLength = 50
            Me.columnCLIENT_GD.AllowDBNull = false
            Me.columnCLIENT_GD.MaxLength = 50
            Me.columnCLIENT_TYPE.AllowDBNull = false
            Me.columnCLIENT_TYPE.MaxLength = 50
            Me.columnCREDIT_LIM.AllowDBNull = false
            Me.columnGST_NO.MaxLength = 50
            Me.columnOPEN_BAL.AllowDBNull = false
            Me.columnVISIT_TYPE.AllowDBNull = false
            Me.columnVISIT_TYPE.MaxLength = 50
            Me.columnROUTE.AllowDBNull = false
            Me.columnROUTE.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewV_CLIENT_INFORow() As V_CLIENT_INFORow
            Return CType(Me.NewRow,V_CLIENT_INFORow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New V_CLIENT_INFORow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(V_CLIENT_INFORow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.V_CLIENT_INFORowChangedEvent) Is Nothing) Then
                RaiseEvent V_CLIENT_INFORowChanged(Me, New V_CLIENT_INFORowChangeEvent(CType(e.Row,V_CLIENT_INFORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.V_CLIENT_INFORowChangingEvent) Is Nothing) Then
                RaiseEvent V_CLIENT_INFORowChanging(Me, New V_CLIENT_INFORowChangeEvent(CType(e.Row,V_CLIENT_INFORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.V_CLIENT_INFORowDeletedEvent) Is Nothing) Then
                RaiseEvent V_CLIENT_INFORowDeleted(Me, New V_CLIENT_INFORowChangeEvent(CType(e.Row,V_CLIENT_INFORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.V_CLIENT_INFORowDeletingEvent) Is Nothing) Then
                RaiseEvent V_CLIENT_INFORowDeleting(Me, New V_CLIENT_INFORowChangeEvent(CType(e.Row,V_CLIENT_INFORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveV_CLIENT_INFORow(ByVal row As V_CLIENT_INFORow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsCLIENT_INFO1 = New dsCLIENT_INFO1
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "V_CLIENT_INFODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class V_CLIENT_INFORow
        Inherits System.Data.DataRow
        
        Private tableV_CLIENT_INFO As V_CLIENT_INFODataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableV_CLIENT_INFO = CType(Me.Table,V_CLIENT_INFODataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Decimal
            Get
                Return CType(Me(Me.tableV_CLIENT_INFO.IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_CLIENT_INFO.IDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NAME() As String
            Get
                Return CType(Me(Me.tableV_CLIENT_INFO.NAMEColumn),String)
            End Get
            Set
                Me(Me.tableV_CLIENT_INFO.NAMEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SHOP_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_CLIENT_INFO.SHOP_NAMEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SHOP_NAME' in table 'V_CLIENT_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_CLIENT_INFO.SHOP_NAMEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SHOP_ADD() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_CLIENT_INFO.SHOP_ADDColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SHOP_ADD' in table 'V_CLIENT_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_CLIENT_INFO.SHOP_ADDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AREA() As String
            Get
                Return CType(Me(Me.tableV_CLIENT_INFO.AREAColumn),String)
            End Get
            Set
                Me(Me.tableV_CLIENT_INFO.AREAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HOME_ADD() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_CLIENT_INFO.HOME_ADDColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'HOME_ADD' in table 'V_CLIENT_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_CLIENT_INFO.HOME_ADDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SHOP_PH() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_CLIENT_INFO.SHOP_PHColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SHOP_PH' in table 'V_CLIENT_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_CLIENT_INFO.SHOP_PHColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HOME_PH() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_CLIENT_INFO.HOME_PHColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'HOME_PH' in table 'V_CLIENT_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_CLIENT_INFO.HOME_PHColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CELL_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_CLIENT_INFO.CELL_NOColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'CELL_NO' in table 'V_CLIENT_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_CLIENT_INFO.CELL_NOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAX_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_CLIENT_INFO.FAX_NOColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'FAX_NO' in table 'V_CLIENT_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_CLIENT_INFO.FAX_NOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property E_MAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_CLIENT_INFO.E_MAILColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'E_MAIL' in table 'V_CLIENT_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_CLIENT_INFO.E_MAILColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WEB_SITE() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_CLIENT_INFO.WEB_SITEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'WEB_SITE' in table 'V_CLIENT_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_CLIENT_INFO.WEB_SITEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_CLIENT_INFO.STATUSColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'STATUS' in table 'V_CLIENT_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_CLIENT_INFO.STATUSColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_CAT() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_CLIENT_INFO.CLIENT_CATColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'CLIENT_CAT' in table 'V_CLIENT_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_CLIENT_INFO.CLIENT_CATColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_GD() As String
            Get
                Return CType(Me(Me.tableV_CLIENT_INFO.CLIENT_GDColumn),String)
            End Get
            Set
                Me(Me.tableV_CLIENT_INFO.CLIENT_GDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_TYPE() As String
            Get
                Return CType(Me(Me.tableV_CLIENT_INFO.CLIENT_TYPEColumn),String)
            End Get
            Set
                Me(Me.tableV_CLIENT_INFO.CLIENT_TYPEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CREDIT_LIM() As Decimal
            Get
                Return CType(Me(Me.tableV_CLIENT_INFO.CREDIT_LIMColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_CLIENT_INFO.CREDIT_LIMColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GST_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_CLIENT_INFO.GST_NOColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'GST_NO' in table 'V_CLIENT_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_CLIENT_INFO.GST_NOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPEN_BAL() As Decimal
            Get
                Return CType(Me(Me.tableV_CLIENT_INFO.OPEN_BALColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_CLIENT_INFO.OPEN_BALColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VISIT_TYPE() As String
            Get
                Return CType(Me(Me.tableV_CLIENT_INFO.VISIT_TYPEColumn),String)
            End Get
            Set
                Me(Me.tableV_CLIENT_INFO.VISIT_TYPEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NO_VISIT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_CLIENT_INFO.NO_VISITColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'NO_VISIT' in table 'V_CLIENT_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_CLIENT_INFO.NO_VISITColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ROUTE() As String
            Get
                Return CType(Me(Me.tableV_CLIENT_INFO.ROUTEColumn),String)
            End Get
            Set
                Me(Me.tableV_CLIENT_INFO.ROUTEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSHOP_NAMENull() As Boolean
            Return Me.IsNull(Me.tableV_CLIENT_INFO.SHOP_NAMEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSHOP_NAMENull()
            Me(Me.tableV_CLIENT_INFO.SHOP_NAMEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSHOP_ADDNull() As Boolean
            Return Me.IsNull(Me.tableV_CLIENT_INFO.SHOP_ADDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSHOP_ADDNull()
            Me(Me.tableV_CLIENT_INFO.SHOP_ADDColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHOME_ADDNull() As Boolean
            Return Me.IsNull(Me.tableV_CLIENT_INFO.HOME_ADDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHOME_ADDNull()
            Me(Me.tableV_CLIENT_INFO.HOME_ADDColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSHOP_PHNull() As Boolean
            Return Me.IsNull(Me.tableV_CLIENT_INFO.SHOP_PHColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSHOP_PHNull()
            Me(Me.tableV_CLIENT_INFO.SHOP_PHColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHOME_PHNull() As Boolean
            Return Me.IsNull(Me.tableV_CLIENT_INFO.HOME_PHColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHOME_PHNull()
            Me(Me.tableV_CLIENT_INFO.HOME_PHColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCELL_NONull() As Boolean
            Return Me.IsNull(Me.tableV_CLIENT_INFO.CELL_NOColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCELL_NONull()
            Me(Me.tableV_CLIENT_INFO.CELL_NOColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAX_NONull() As Boolean
            Return Me.IsNull(Me.tableV_CLIENT_INFO.FAX_NOColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAX_NONull()
            Me(Me.tableV_CLIENT_INFO.FAX_NOColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsE_MAILNull() As Boolean
            Return Me.IsNull(Me.tableV_CLIENT_INFO.E_MAILColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetE_MAILNull()
            Me(Me.tableV_CLIENT_INFO.E_MAILColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWEB_SITENull() As Boolean
            Return Me.IsNull(Me.tableV_CLIENT_INFO.WEB_SITEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWEB_SITENull()
            Me(Me.tableV_CLIENT_INFO.WEB_SITEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUSNull() As Boolean
            Return Me.IsNull(Me.tableV_CLIENT_INFO.STATUSColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUSNull()
            Me(Me.tableV_CLIENT_INFO.STATUSColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_CATNull() As Boolean
            Return Me.IsNull(Me.tableV_CLIENT_INFO.CLIENT_CATColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_CATNull()
            Me(Me.tableV_CLIENT_INFO.CLIENT_CATColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGST_NONull() As Boolean
            Return Me.IsNull(Me.tableV_CLIENT_INFO.GST_NOColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGST_NONull()
            Me(Me.tableV_CLIENT_INFO.GST_NOColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNO_VISITNull() As Boolean
            Return Me.IsNull(Me.tableV_CLIENT_INFO.NO_VISITColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNO_VISITNull()
            Me(Me.tableV_CLIENT_INFO.NO_VISITColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class V_CLIENT_INFORowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As V_CLIENT_INFORow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As V_CLIENT_INFORow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As V_CLIENT_INFORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
