'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("dsV_ITEM_OPEN_STK"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsV_ITEM_OPEN_STK
    Inherits System.Data.DataSet
    
    Private tableV_ITEM_OPEN_STK As V_ITEM_OPEN_STKDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("V_ITEM_OPEN_STK")) Is Nothing) Then
                MyBase.Tables.Add(New V_ITEM_OPEN_STKDataTable(ds.Tables("V_ITEM_OPEN_STK")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property V_ITEM_OPEN_STK() As V_ITEM_OPEN_STKDataTable
        Get
            Return Me.tableV_ITEM_OPEN_STK
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As dsV_ITEM_OPEN_STK = CType(MyBase.Clone,dsV_ITEM_OPEN_STK)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("V_ITEM_OPEN_STK")) Is Nothing) Then
                MyBase.Tables.Add(New V_ITEM_OPEN_STKDataTable(ds.Tables("V_ITEM_OPEN_STK")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableV_ITEM_OPEN_STK = CType(MyBase.Tables("V_ITEM_OPEN_STK"),V_ITEM_OPEN_STKDataTable)
        If (initTable = true) Then
            If (Not (Me.tableV_ITEM_OPEN_STK) Is Nothing) Then
                Me.tableV_ITEM_OPEN_STK.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsV_ITEM_OPEN_STK"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsV_ITEM_OPEN_STK.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableV_ITEM_OPEN_STK = New V_ITEM_OPEN_STKDataTable
        MyBase.Tables.Add(Me.tableV_ITEM_OPEN_STK)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeV_ITEM_OPEN_STK() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsV_ITEM_OPEN_STK = New dsV_ITEM_OPEN_STK
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub V_ITEM_OPEN_STKRowChangeEventHandler(ByVal sender As Object, ByVal e As V_ITEM_OPEN_STKRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class V_ITEM_OPEN_STKDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As System.Data.DataColumn
        
        Private columnITEM_CODE As System.Data.DataColumn
        
        Private columnBATCH As System.Data.DataColumn
        
        Private columnCOST As System.Data.DataColumn
        
        Private columnRATE As System.Data.DataColumn
        
        Private columnRETAIL As System.Data.DataColumn
        
        Private columnITEM_NAME As System.Data.DataColumn
        
        Private columnPPP As System.Data.DataColumn
        
        Private columnPKS_DESC As System.Data.DataColumn
        
        Private columnPCS_DESC As System.Data.DataColumn
        
        Private columnOPEN_BAL As System.Data.DataColumn
        
        Private columnOPEN_STK_VALUE As System.Data.DataColumn
        
        Private columndEXP_DATE As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "V_ITEM_OPEN_STK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_CODEColumn() As System.Data.DataColumn
            Get
                Return Me.columnITEM_CODE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BATCHColumn() As System.Data.DataColumn
            Get
                Return Me.columnBATCH
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSTColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOST
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RATEColumn() As System.Data.DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RETAILColumn() As System.Data.DataColumn
            Get
                Return Me.columnRETAIL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_NAMEColumn() As System.Data.DataColumn
            Get
                Return Me.columnITEM_NAME
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PPPColumn() As System.Data.DataColumn
            Get
                Return Me.columnPPP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PKS_DESCColumn() As System.Data.DataColumn
            Get
                Return Me.columnPKS_DESC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PCS_DESCColumn() As System.Data.DataColumn
            Get
                Return Me.columnPCS_DESC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPEN_BALColumn() As System.Data.DataColumn
            Get
                Return Me.columnOPEN_BAL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPEN_STK_VALUEColumn() As System.Data.DataColumn
            Get
                Return Me.columnOPEN_STK_VALUE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dEXP_DATEColumn() As System.Data.DataColumn
            Get
                Return Me.columndEXP_DATE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As V_ITEM_OPEN_STKRow
            Get
                Return CType(Me.Rows(index),V_ITEM_OPEN_STKRow)
            End Get
        End Property
        
        Public Event V_ITEM_OPEN_STKRowChanging As V_ITEM_OPEN_STKRowChangeEventHandler
        
        Public Event V_ITEM_OPEN_STKRowChanged As V_ITEM_OPEN_STKRowChangeEventHandler
        
        Public Event V_ITEM_OPEN_STKRowDeleting As V_ITEM_OPEN_STKRowChangeEventHandler
        
        Public Event V_ITEM_OPEN_STKRowDeleted As V_ITEM_OPEN_STKRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddV_ITEM_OPEN_STKRow(ByVal row As V_ITEM_OPEN_STKRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddV_ITEM_OPEN_STKRow(ByVal ITEM_CODE As Decimal, ByVal BATCH As String, ByVal COST As Decimal, ByVal RATE As Decimal, ByVal RETAIL As Decimal, ByVal ITEM_NAME As String, ByVal PPP As Decimal, ByVal PKS_DESC As String, ByVal PCS_DESC As String, ByVal OPEN_BAL As Decimal, ByVal OPEN_STK_VALUE As Decimal, ByVal dEXP_DATE As Date) As V_ITEM_OPEN_STKRow
            Dim rowV_ITEM_OPEN_STKRow As V_ITEM_OPEN_STKRow = CType(Me.NewRow,V_ITEM_OPEN_STKRow)
            rowV_ITEM_OPEN_STKRow.ItemArray = New Object() {Nothing, ITEM_CODE, BATCH, COST, RATE, RETAIL, ITEM_NAME, PPP, PKS_DESC, PCS_DESC, OPEN_BAL, OPEN_STK_VALUE, dEXP_DATE}
            Me.Rows.Add(rowV_ITEM_OPEN_STKRow)
            Return rowV_ITEM_OPEN_STKRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Decimal) As V_ITEM_OPEN_STKRow
            Return CType(Me.Rows.Find(New Object() {ID}),V_ITEM_OPEN_STKRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As V_ITEM_OPEN_STKDataTable = CType(MyBase.Clone,V_ITEM_OPEN_STKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New V_ITEM_OPEN_STKDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnITEM_CODE = MyBase.Columns("ITEM_CODE")
            Me.columnBATCH = MyBase.Columns("BATCH")
            Me.columnCOST = MyBase.Columns("COST")
            Me.columnRATE = MyBase.Columns("RATE")
            Me.columnRETAIL = MyBase.Columns("RETAIL")
            Me.columnITEM_NAME = MyBase.Columns("ITEM_NAME")
            Me.columnPPP = MyBase.Columns("PPP")
            Me.columnPKS_DESC = MyBase.Columns("PKS_DESC")
            Me.columnPCS_DESC = MyBase.Columns("PCS_DESC")
            Me.columnOPEN_BAL = MyBase.Columns("OPEN_BAL")
            Me.columnOPEN_STK_VALUE = MyBase.Columns("OPEN_STK_VALUE")
            Me.columndEXP_DATE = MyBase.Columns("dEXP_DATE")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New System.Data.DataColumn("ID", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnITEM_CODE = New System.Data.DataColumn("ITEM_CODE", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_CODE)
            Me.columnBATCH = New System.Data.DataColumn("BATCH", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCH)
            Me.columnCOST = New System.Data.DataColumn("COST", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOST)
            Me.columnRATE = New System.Data.DataColumn("RATE", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRATE)
            Me.columnRETAIL = New System.Data.DataColumn("RETAIL", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRETAIL)
            Me.columnITEM_NAME = New System.Data.DataColumn("ITEM_NAME", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_NAME)
            Me.columnPPP = New System.Data.DataColumn("PPP", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPPP)
            Me.columnPKS_DESC = New System.Data.DataColumn("PKS_DESC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPKS_DESC)
            Me.columnPCS_DESC = New System.Data.DataColumn("PCS_DESC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPCS_DESC)
            Me.columnOPEN_BAL = New System.Data.DataColumn("OPEN_BAL", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPEN_BAL)
            Me.columnOPEN_STK_VALUE = New System.Data.DataColumn("OPEN_STK_VALUE", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPEN_STK_VALUE)
            Me.columndEXP_DATE = New System.Data.DataColumn("dEXP_DATE", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndEXP_DATE)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnITEM_CODE.AllowDBNull = false
            Me.columnBATCH.MaxLength = 50
            Me.columnCOST.AllowDBNull = false
            Me.columnRATE.AllowDBNull = false
            Me.columnRETAIL.AllowDBNull = false
            Me.columnITEM_NAME.AllowDBNull = false
            Me.columnITEM_NAME.MaxLength = 50
            Me.columnPPP.AllowDBNull = false
            Me.columnPKS_DESC.AllowDBNull = false
            Me.columnPKS_DESC.MaxLength = 50
            Me.columnPCS_DESC.AllowDBNull = false
            Me.columnPCS_DESC.MaxLength = 50
            Me.columnOPEN_BAL.AllowDBNull = false
            Me.columnOPEN_STK_VALUE.AllowDBNull = false
            Me.columndEXP_DATE.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewV_ITEM_OPEN_STKRow() As V_ITEM_OPEN_STKRow
            Return CType(Me.NewRow,V_ITEM_OPEN_STKRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New V_ITEM_OPEN_STKRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(V_ITEM_OPEN_STKRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.V_ITEM_OPEN_STKRowChangedEvent) Is Nothing) Then
                RaiseEvent V_ITEM_OPEN_STKRowChanged(Me, New V_ITEM_OPEN_STKRowChangeEvent(CType(e.Row,V_ITEM_OPEN_STKRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.V_ITEM_OPEN_STKRowChangingEvent) Is Nothing) Then
                RaiseEvent V_ITEM_OPEN_STKRowChanging(Me, New V_ITEM_OPEN_STKRowChangeEvent(CType(e.Row,V_ITEM_OPEN_STKRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.V_ITEM_OPEN_STKRowDeletedEvent) Is Nothing) Then
                RaiseEvent V_ITEM_OPEN_STKRowDeleted(Me, New V_ITEM_OPEN_STKRowChangeEvent(CType(e.Row,V_ITEM_OPEN_STKRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.V_ITEM_OPEN_STKRowDeletingEvent) Is Nothing) Then
                RaiseEvent V_ITEM_OPEN_STKRowDeleting(Me, New V_ITEM_OPEN_STKRowChangeEvent(CType(e.Row,V_ITEM_OPEN_STKRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveV_ITEM_OPEN_STKRow(ByVal row As V_ITEM_OPEN_STKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsV_ITEM_OPEN_STK = New dsV_ITEM_OPEN_STK
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "V_ITEM_OPEN_STKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class V_ITEM_OPEN_STKRow
        Inherits System.Data.DataRow
        
        Private tableV_ITEM_OPEN_STK As V_ITEM_OPEN_STKDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableV_ITEM_OPEN_STK = CType(Me.Table,V_ITEM_OPEN_STKDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Decimal
            Get
                Return CType(Me(Me.tableV_ITEM_OPEN_STK.IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_ITEM_OPEN_STK.IDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_CODE() As Decimal
            Get
                Return CType(Me(Me.tableV_ITEM_OPEN_STK.ITEM_CODEColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_ITEM_OPEN_STK.ITEM_CODEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BATCH() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_ITEM_OPEN_STK.BATCHColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'BATCH' in table 'V_ITEM_OPEN_STK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_ITEM_OPEN_STK.BATCHColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COST() As Decimal
            Get
                Return CType(Me(Me.tableV_ITEM_OPEN_STK.COSTColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_ITEM_OPEN_STK.COSTColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RATE() As Decimal
            Get
                Return CType(Me(Me.tableV_ITEM_OPEN_STK.RATEColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_ITEM_OPEN_STK.RATEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RETAIL() As Decimal
            Get
                Return CType(Me(Me.tableV_ITEM_OPEN_STK.RETAILColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_ITEM_OPEN_STK.RETAILColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_NAME() As String
            Get
                Return CType(Me(Me.tableV_ITEM_OPEN_STK.ITEM_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableV_ITEM_OPEN_STK.ITEM_NAMEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PPP() As Decimal
            Get
                Return CType(Me(Me.tableV_ITEM_OPEN_STK.PPPColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_ITEM_OPEN_STK.PPPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PKS_DESC() As String
            Get
                Return CType(Me(Me.tableV_ITEM_OPEN_STK.PKS_DESCColumn),String)
            End Get
            Set
                Me(Me.tableV_ITEM_OPEN_STK.PKS_DESCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PCS_DESC() As String
            Get
                Return CType(Me(Me.tableV_ITEM_OPEN_STK.PCS_DESCColumn),String)
            End Get
            Set
                Me(Me.tableV_ITEM_OPEN_STK.PCS_DESCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPEN_BAL() As Decimal
            Get
                Return CType(Me(Me.tableV_ITEM_OPEN_STK.OPEN_BALColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_ITEM_OPEN_STK.OPEN_BALColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPEN_STK_VALUE() As Decimal
            Get
                Return CType(Me(Me.tableV_ITEM_OPEN_STK.OPEN_STK_VALUEColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_ITEM_OPEN_STK.OPEN_STK_VALUEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dEXP_DATE() As Date
            Get
                Return CType(Me(Me.tableV_ITEM_OPEN_STK.dEXP_DATEColumn),Date)
            End Get
            Set
                Me(Me.tableV_ITEM_OPEN_STK.dEXP_DATEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBATCHNull() As Boolean
            Return Me.IsNull(Me.tableV_ITEM_OPEN_STK.BATCHColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBATCHNull()
            Me(Me.tableV_ITEM_OPEN_STK.BATCHColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class V_ITEM_OPEN_STKRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As V_ITEM_OPEN_STKRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As V_ITEM_OPEN_STKRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As V_ITEM_OPEN_STKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
