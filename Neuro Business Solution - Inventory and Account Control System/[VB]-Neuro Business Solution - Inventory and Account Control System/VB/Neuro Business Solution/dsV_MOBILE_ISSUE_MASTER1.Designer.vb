'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("dsV_MOBILE_ISSUE_MASTER1"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsV_MOBILE_ISSUE_MASTER1
    Inherits System.Data.DataSet
    
    Private tableV_MOBILE_ISSUE_MASTER As V_MOBILE_ISSUE_MASTERDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("V_MOBILE_ISSUE_MASTER")) Is Nothing) Then
                MyBase.Tables.Add(New V_MOBILE_ISSUE_MASTERDataTable(ds.Tables("V_MOBILE_ISSUE_MASTER")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property V_MOBILE_ISSUE_MASTER() As V_MOBILE_ISSUE_MASTERDataTable
        Get
            Return Me.tableV_MOBILE_ISSUE_MASTER
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As dsV_MOBILE_ISSUE_MASTER1 = CType(MyBase.Clone,dsV_MOBILE_ISSUE_MASTER1)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("V_MOBILE_ISSUE_MASTER")) Is Nothing) Then
                MyBase.Tables.Add(New V_MOBILE_ISSUE_MASTERDataTable(ds.Tables("V_MOBILE_ISSUE_MASTER")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableV_MOBILE_ISSUE_MASTER = CType(MyBase.Tables("V_MOBILE_ISSUE_MASTER"),V_MOBILE_ISSUE_MASTERDataTable)
        If (initTable = true) Then
            If (Not (Me.tableV_MOBILE_ISSUE_MASTER) Is Nothing) Then
                Me.tableV_MOBILE_ISSUE_MASTER.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsV_MOBILE_ISSUE_MASTER1"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsV_MOBILE_ISSUE_MASTER1.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableV_MOBILE_ISSUE_MASTER = New V_MOBILE_ISSUE_MASTERDataTable
        MyBase.Tables.Add(Me.tableV_MOBILE_ISSUE_MASTER)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeV_MOBILE_ISSUE_MASTER() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsV_MOBILE_ISSUE_MASTER1 = New dsV_MOBILE_ISSUE_MASTER1
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub V_MOBILE_ISSUE_MASTERRowChangeEventHandler(ByVal sender As Object, ByVal e As V_MOBILE_ISSUE_MASTERRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class V_MOBILE_ISSUE_MASTERDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnLPINV_NO As System.Data.DataColumn
        
        Private columndDATE As System.Data.DataColumn
        
        Private columnTOTAL_BILL As System.Data.DataColumn
        
        Private columnDISC_RS As System.Data.DataColumn
        
        Private columnDISC_PER As System.Data.DataColumn
        
        Private columnOTHER_DISC As System.Data.DataColumn
        
        Private columnOTHER_DESC As System.Data.DataColumn
        
        Private columnNET_TOTAL As System.Data.DataColumn
        
        Private columnVAN_NO As System.Data.DataColumn
        
        Private columnVAN_NAME As System.Data.DataColumn
        
        Private columnSALE_MAN As System.Data.DataColumn
        
        Private columnUSER_NAME As System.Data.DataColumn
        
        Private columnGROUP_NAME As System.Data.DataColumn
        
        Private columnROUTE As System.Data.DataColumn
        
        Private columnD_MAN As System.Data.DataColumn
        
        Private columnPOSTED As System.Data.DataColumn
        
        Private columnREMARKS As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "V_MOBILE_ISSUE_MASTER"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LPINV_NOColumn() As System.Data.DataColumn
            Get
                Return Me.columnLPINV_NO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dDATEColumn() As System.Data.DataColumn
            Get
                Return Me.columndDATE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_BILLColumn() As System.Data.DataColumn
            Get
                Return Me.columnTOTAL_BILL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DISC_RSColumn() As System.Data.DataColumn
            Get
                Return Me.columnDISC_RS
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DISC_PERColumn() As System.Data.DataColumn
            Get
                Return Me.columnDISC_PER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTHER_DISCColumn() As System.Data.DataColumn
            Get
                Return Me.columnOTHER_DISC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTHER_DESCColumn() As System.Data.DataColumn
            Get
                Return Me.columnOTHER_DESC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NET_TOTALColumn() As System.Data.DataColumn
            Get
                Return Me.columnNET_TOTAL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VAN_NOColumn() As System.Data.DataColumn
            Get
                Return Me.columnVAN_NO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VAN_NAMEColumn() As System.Data.DataColumn
            Get
                Return Me.columnVAN_NAME
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALE_MANColumn() As System.Data.DataColumn
            Get
                Return Me.columnSALE_MAN
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USER_NAMEColumn() As System.Data.DataColumn
            Get
                Return Me.columnUSER_NAME
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GROUP_NAMEColumn() As System.Data.DataColumn
            Get
                Return Me.columnGROUP_NAME
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ROUTEColumn() As System.Data.DataColumn
            Get
                Return Me.columnROUTE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property D_MANColumn() As System.Data.DataColumn
            Get
                Return Me.columnD_MAN
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POSTEDColumn() As System.Data.DataColumn
            Get
                Return Me.columnPOSTED
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REMARKSColumn() As System.Data.DataColumn
            Get
                Return Me.columnREMARKS
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As V_MOBILE_ISSUE_MASTERRow
            Get
                Return CType(Me.Rows(index),V_MOBILE_ISSUE_MASTERRow)
            End Get
        End Property
        
        Public Event V_MOBILE_ISSUE_MASTERRowChanging As V_MOBILE_ISSUE_MASTERRowChangeEventHandler
        
        Public Event V_MOBILE_ISSUE_MASTERRowChanged As V_MOBILE_ISSUE_MASTERRowChangeEventHandler
        
        Public Event V_MOBILE_ISSUE_MASTERRowDeleting As V_MOBILE_ISSUE_MASTERRowChangeEventHandler
        
        Public Event V_MOBILE_ISSUE_MASTERRowDeleted As V_MOBILE_ISSUE_MASTERRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddV_MOBILE_ISSUE_MASTERRow(ByVal row As V_MOBILE_ISSUE_MASTERRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddV_MOBILE_ISSUE_MASTERRow( _
                    ByVal LPINV_NO As Decimal,  _
                    ByVal dDATE As Date,  _
                    ByVal TOTAL_BILL As Decimal,  _
                    ByVal DISC_RS As Decimal,  _
                    ByVal DISC_PER As Decimal,  _
                    ByVal OTHER_DISC As Decimal,  _
                    ByVal OTHER_DESC As String,  _
                    ByVal NET_TOTAL As Decimal,  _
                    ByVal VAN_NO As String,  _
                    ByVal VAN_NAME As String,  _
                    ByVal SALE_MAN As String,  _
                    ByVal USER_NAME As String,  _
                    ByVal GROUP_NAME As String,  _
                    ByVal ROUTE As String,  _
                    ByVal D_MAN As String,  _
                    ByVal POSTED As Boolean,  _
                    ByVal REMARKS As String) As V_MOBILE_ISSUE_MASTERRow
            Dim rowV_MOBILE_ISSUE_MASTERRow As V_MOBILE_ISSUE_MASTERRow = CType(Me.NewRow,V_MOBILE_ISSUE_MASTERRow)
            rowV_MOBILE_ISSUE_MASTERRow.ItemArray = New Object() {LPINV_NO, dDATE, TOTAL_BILL, DISC_RS, DISC_PER, OTHER_DISC, OTHER_DESC, NET_TOTAL, VAN_NO, VAN_NAME, SALE_MAN, USER_NAME, GROUP_NAME, ROUTE, D_MAN, POSTED, REMARKS}
            Me.Rows.Add(rowV_MOBILE_ISSUE_MASTERRow)
            Return rowV_MOBILE_ISSUE_MASTERRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByLPINV_NO(ByVal LPINV_NO As Decimal) As V_MOBILE_ISSUE_MASTERRow
            Return CType(Me.Rows.Find(New Object() {LPINV_NO}),V_MOBILE_ISSUE_MASTERRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As V_MOBILE_ISSUE_MASTERDataTable = CType(MyBase.Clone,V_MOBILE_ISSUE_MASTERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New V_MOBILE_ISSUE_MASTERDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLPINV_NO = MyBase.Columns("LPINV_NO")
            Me.columndDATE = MyBase.Columns("dDATE")
            Me.columnTOTAL_BILL = MyBase.Columns("TOTAL_BILL")
            Me.columnDISC_RS = MyBase.Columns("DISC_RS")
            Me.columnDISC_PER = MyBase.Columns("DISC_PER")
            Me.columnOTHER_DISC = MyBase.Columns("OTHER_DISC")
            Me.columnOTHER_DESC = MyBase.Columns("OTHER_DESC")
            Me.columnNET_TOTAL = MyBase.Columns("NET_TOTAL")
            Me.columnVAN_NO = MyBase.Columns("VAN_NO")
            Me.columnVAN_NAME = MyBase.Columns("VAN_NAME")
            Me.columnSALE_MAN = MyBase.Columns("SALE_MAN")
            Me.columnUSER_NAME = MyBase.Columns("USER_NAME")
            Me.columnGROUP_NAME = MyBase.Columns("GROUP_NAME")
            Me.columnROUTE = MyBase.Columns("ROUTE")
            Me.columnD_MAN = MyBase.Columns("D_MAN")
            Me.columnPOSTED = MyBase.Columns("POSTED")
            Me.columnREMARKS = MyBase.Columns("REMARKS")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLPINV_NO = New System.Data.DataColumn("LPINV_NO", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLPINV_NO)
            Me.columndDATE = New System.Data.DataColumn("dDATE", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndDATE)
            Me.columnTOTAL_BILL = New System.Data.DataColumn("TOTAL_BILL", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_BILL)
            Me.columnDISC_RS = New System.Data.DataColumn("DISC_RS", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISC_RS)
            Me.columnDISC_PER = New System.Data.DataColumn("DISC_PER", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISC_PER)
            Me.columnOTHER_DISC = New System.Data.DataColumn("OTHER_DISC", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTHER_DISC)
            Me.columnOTHER_DESC = New System.Data.DataColumn("OTHER_DESC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTHER_DESC)
            Me.columnNET_TOTAL = New System.Data.DataColumn("NET_TOTAL", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNET_TOTAL)
            Me.columnVAN_NO = New System.Data.DataColumn("VAN_NO", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVAN_NO)
            Me.columnVAN_NAME = New System.Data.DataColumn("VAN_NAME", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVAN_NAME)
            Me.columnSALE_MAN = New System.Data.DataColumn("SALE_MAN", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALE_MAN)
            Me.columnUSER_NAME = New System.Data.DataColumn("USER_NAME", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSER_NAME)
            Me.columnGROUP_NAME = New System.Data.DataColumn("GROUP_NAME", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGROUP_NAME)
            Me.columnROUTE = New System.Data.DataColumn("ROUTE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROUTE)
            Me.columnD_MAN = New System.Data.DataColumn("D_MAN", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnD_MAN)
            Me.columnPOSTED = New System.Data.DataColumn("POSTED", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOSTED)
            Me.columnREMARKS = New System.Data.DataColumn("REMARKS", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREMARKS)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnLPINV_NO}, true))
            Me.columnLPINV_NO.AllowDBNull = false
            Me.columnLPINV_NO.Unique = true
            Me.columndDATE.AllowDBNull = false
            Me.columnTOTAL_BILL.ReadOnly = true
            Me.columnDISC_RS.ReadOnly = true
            Me.columnDISC_PER.AllowDBNull = false
            Me.columnOTHER_DISC.ReadOnly = true
            Me.columnOTHER_DESC.MaxLength = 100
            Me.columnNET_TOTAL.ReadOnly = true
            Me.columnVAN_NO.AllowDBNull = false
            Me.columnVAN_NO.MaxLength = 50
            Me.columnVAN_NAME.AllowDBNull = false
            Me.columnVAN_NAME.MaxLength = 50
            Me.columnSALE_MAN.AllowDBNull = false
            Me.columnSALE_MAN.MaxLength = 50
            Me.columnUSER_NAME.MaxLength = 50
            Me.columnGROUP_NAME.MaxLength = 50
            Me.columnROUTE.AllowDBNull = false
            Me.columnROUTE.MaxLength = 50
            Me.columnD_MAN.AllowDBNull = false
            Me.columnD_MAN.MaxLength = 50
            Me.columnPOSTED.AllowDBNull = false
            Me.columnREMARKS.MaxLength = 100
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewV_MOBILE_ISSUE_MASTERRow() As V_MOBILE_ISSUE_MASTERRow
            Return CType(Me.NewRow,V_MOBILE_ISSUE_MASTERRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New V_MOBILE_ISSUE_MASTERRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(V_MOBILE_ISSUE_MASTERRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.V_MOBILE_ISSUE_MASTERRowChangedEvent) Is Nothing) Then
                RaiseEvent V_MOBILE_ISSUE_MASTERRowChanged(Me, New V_MOBILE_ISSUE_MASTERRowChangeEvent(CType(e.Row,V_MOBILE_ISSUE_MASTERRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.V_MOBILE_ISSUE_MASTERRowChangingEvent) Is Nothing) Then
                RaiseEvent V_MOBILE_ISSUE_MASTERRowChanging(Me, New V_MOBILE_ISSUE_MASTERRowChangeEvent(CType(e.Row,V_MOBILE_ISSUE_MASTERRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.V_MOBILE_ISSUE_MASTERRowDeletedEvent) Is Nothing) Then
                RaiseEvent V_MOBILE_ISSUE_MASTERRowDeleted(Me, New V_MOBILE_ISSUE_MASTERRowChangeEvent(CType(e.Row,V_MOBILE_ISSUE_MASTERRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.V_MOBILE_ISSUE_MASTERRowDeletingEvent) Is Nothing) Then
                RaiseEvent V_MOBILE_ISSUE_MASTERRowDeleting(Me, New V_MOBILE_ISSUE_MASTERRowChangeEvent(CType(e.Row,V_MOBILE_ISSUE_MASTERRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveV_MOBILE_ISSUE_MASTERRow(ByVal row As V_MOBILE_ISSUE_MASTERRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsV_MOBILE_ISSUE_MASTER1 = New dsV_MOBILE_ISSUE_MASTER1
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "V_MOBILE_ISSUE_MASTERDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class V_MOBILE_ISSUE_MASTERRow
        Inherits System.Data.DataRow
        
        Private tableV_MOBILE_ISSUE_MASTER As V_MOBILE_ISSUE_MASTERDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableV_MOBILE_ISSUE_MASTER = CType(Me.Table,V_MOBILE_ISSUE_MASTERDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LPINV_NO() As Decimal
            Get
                Return CType(Me(Me.tableV_MOBILE_ISSUE_MASTER.LPINV_NOColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_MOBILE_ISSUE_MASTER.LPINV_NOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dDATE() As Date
            Get
                Return CType(Me(Me.tableV_MOBILE_ISSUE_MASTER.dDATEColumn),Date)
            End Get
            Set
                Me(Me.tableV_MOBILE_ISSUE_MASTER.dDATEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_BILL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_MOBILE_ISSUE_MASTER.TOTAL_BILLColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'TOTAL_BILL' in table 'V_MOBILE_ISSUE_MASTER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MOBILE_ISSUE_MASTER.TOTAL_BILLColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DISC_RS() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_MOBILE_ISSUE_MASTER.DISC_RSColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'DISC_RS' in table 'V_MOBILE_ISSUE_MASTER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MOBILE_ISSUE_MASTER.DISC_RSColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DISC_PER() As Decimal
            Get
                Return CType(Me(Me.tableV_MOBILE_ISSUE_MASTER.DISC_PERColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_MOBILE_ISSUE_MASTER.DISC_PERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTHER_DISC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_MOBILE_ISSUE_MASTER.OTHER_DISCColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'OTHER_DISC' in table 'V_MOBILE_ISSUE_MASTER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MOBILE_ISSUE_MASTER.OTHER_DISCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTHER_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_MOBILE_ISSUE_MASTER.OTHER_DESCColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'OTHER_DESC' in table 'V_MOBILE_ISSUE_MASTER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MOBILE_ISSUE_MASTER.OTHER_DESCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NET_TOTAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_MOBILE_ISSUE_MASTER.NET_TOTALColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'NET_TOTAL' in table 'V_MOBILE_ISSUE_MASTER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MOBILE_ISSUE_MASTER.NET_TOTALColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VAN_NO() As String
            Get
                Return CType(Me(Me.tableV_MOBILE_ISSUE_MASTER.VAN_NOColumn),String)
            End Get
            Set
                Me(Me.tableV_MOBILE_ISSUE_MASTER.VAN_NOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VAN_NAME() As String
            Get
                Return CType(Me(Me.tableV_MOBILE_ISSUE_MASTER.VAN_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableV_MOBILE_ISSUE_MASTER.VAN_NAMEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALE_MAN() As String
            Get
                Return CType(Me(Me.tableV_MOBILE_ISSUE_MASTER.SALE_MANColumn),String)
            End Get
            Set
                Me(Me.tableV_MOBILE_ISSUE_MASTER.SALE_MANColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USER_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_MOBILE_ISSUE_MASTER.USER_NAMEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'USER_NAME' in table 'V_MOBILE_ISSUE_MASTER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MOBILE_ISSUE_MASTER.USER_NAMEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GROUP_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_MOBILE_ISSUE_MASTER.GROUP_NAMEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'GROUP_NAME' in table 'V_MOBILE_ISSUE_MASTER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MOBILE_ISSUE_MASTER.GROUP_NAMEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ROUTE() As String
            Get
                Return CType(Me(Me.tableV_MOBILE_ISSUE_MASTER.ROUTEColumn),String)
            End Get
            Set
                Me(Me.tableV_MOBILE_ISSUE_MASTER.ROUTEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property D_MAN() As String
            Get
                Return CType(Me(Me.tableV_MOBILE_ISSUE_MASTER.D_MANColumn),String)
            End Get
            Set
                Me(Me.tableV_MOBILE_ISSUE_MASTER.D_MANColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POSTED() As Boolean
            Get
                Return CType(Me(Me.tableV_MOBILE_ISSUE_MASTER.POSTEDColumn),Boolean)
            End Get
            Set
                Me(Me.tableV_MOBILE_ISSUE_MASTER.POSTEDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REMARKS() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_MOBILE_ISSUE_MASTER.REMARKSColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'REMARKS' in table 'V_MOBILE_ISSUE_MASTER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_MOBILE_ISSUE_MASTER.REMARKSColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_BILLNull() As Boolean
            Return Me.IsNull(Me.tableV_MOBILE_ISSUE_MASTER.TOTAL_BILLColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_BILLNull()
            Me(Me.tableV_MOBILE_ISSUE_MASTER.TOTAL_BILLColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDISC_RSNull() As Boolean
            Return Me.IsNull(Me.tableV_MOBILE_ISSUE_MASTER.DISC_RSColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDISC_RSNull()
            Me(Me.tableV_MOBILE_ISSUE_MASTER.DISC_RSColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTHER_DISCNull() As Boolean
            Return Me.IsNull(Me.tableV_MOBILE_ISSUE_MASTER.OTHER_DISCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTHER_DISCNull()
            Me(Me.tableV_MOBILE_ISSUE_MASTER.OTHER_DISCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTHER_DESCNull() As Boolean
            Return Me.IsNull(Me.tableV_MOBILE_ISSUE_MASTER.OTHER_DESCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTHER_DESCNull()
            Me(Me.tableV_MOBILE_ISSUE_MASTER.OTHER_DESCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNET_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableV_MOBILE_ISSUE_MASTER.NET_TOTALColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNET_TOTALNull()
            Me(Me.tableV_MOBILE_ISSUE_MASTER.NET_TOTALColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSER_NAMENull() As Boolean
            Return Me.IsNull(Me.tableV_MOBILE_ISSUE_MASTER.USER_NAMEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSER_NAMENull()
            Me(Me.tableV_MOBILE_ISSUE_MASTER.USER_NAMEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGROUP_NAMENull() As Boolean
            Return Me.IsNull(Me.tableV_MOBILE_ISSUE_MASTER.GROUP_NAMEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGROUP_NAMENull()
            Me(Me.tableV_MOBILE_ISSUE_MASTER.GROUP_NAMEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREMARKSNull() As Boolean
            Return Me.IsNull(Me.tableV_MOBILE_ISSUE_MASTER.REMARKSColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREMARKSNull()
            Me(Me.tableV_MOBILE_ISSUE_MASTER.REMARKSColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class V_MOBILE_ISSUE_MASTERRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As V_MOBILE_ISSUE_MASTERRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As V_MOBILE_ISSUE_MASTERRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As V_MOBILE_ISSUE_MASTERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
