'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("dsPURCHASE_INVOICES"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsPURCHASE_INVOICES
    Inherits System.Data.DataSet
    
    Private tableV_PURCHASE_INVOICES As V_PURCHASE_INVOICESDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("V_PURCHASE_INVOICES")) Is Nothing) Then
                MyBase.Tables.Add(New V_PURCHASE_INVOICESDataTable(ds.Tables("V_PURCHASE_INVOICES")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property V_PURCHASE_INVOICES() As V_PURCHASE_INVOICESDataTable
        Get
            Return Me.tableV_PURCHASE_INVOICES
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As dsPURCHASE_INVOICES = CType(MyBase.Clone,dsPURCHASE_INVOICES)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("V_PURCHASE_INVOICES")) Is Nothing) Then
                MyBase.Tables.Add(New V_PURCHASE_INVOICESDataTable(ds.Tables("V_PURCHASE_INVOICES")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableV_PURCHASE_INVOICES = CType(MyBase.Tables("V_PURCHASE_INVOICES"),V_PURCHASE_INVOICESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableV_PURCHASE_INVOICES) Is Nothing) Then
                Me.tableV_PURCHASE_INVOICES.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsPURCHASE_INVOICES"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsPURCHASE_INVOICES.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableV_PURCHASE_INVOICES = New V_PURCHASE_INVOICESDataTable
        MyBase.Tables.Add(Me.tableV_PURCHASE_INVOICES)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeV_PURCHASE_INVOICES() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsPURCHASE_INVOICES = New dsPURCHASE_INVOICES
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub V_PURCHASE_INVOICESRowChangeEventHandler(ByVal sender As Object, ByVal e As V_PURCHASE_INVOICESRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class V_PURCHASE_INVOICESDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPINV_NO As System.Data.DataColumn
        
        Private columnSUPPLIER_NAME As System.Data.DataColumn
        
        Private columnP_DATE As System.Data.DataColumn
        
        Private columnTOTAL_BILL As System.Data.DataColumn
        
        Private columnDISC_RS As System.Data.DataColumn
        
        Private columnDISC_PER As System.Data.DataColumn
        
        Private columnDISC_OTHER As System.Data.DataColumn
        
        Private columnNET_TOTAL As System.Data.DataColumn
        
        Private columnCASH_AMT As System.Data.DataColumn
        
        Private columnBANK_AMT As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "V_PURCHASE_INVOICES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PINV_NOColumn() As System.Data.DataColumn
            Get
                Return Me.columnPINV_NO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUPPLIER_NAMEColumn() As System.Data.DataColumn
            Get
                Return Me.columnSUPPLIER_NAME
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property P_DATEColumn() As System.Data.DataColumn
            Get
                Return Me.columnP_DATE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_BILLColumn() As System.Data.DataColumn
            Get
                Return Me.columnTOTAL_BILL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DISC_RSColumn() As System.Data.DataColumn
            Get
                Return Me.columnDISC_RS
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DISC_PERColumn() As System.Data.DataColumn
            Get
                Return Me.columnDISC_PER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DISC_OTHERColumn() As System.Data.DataColumn
            Get
                Return Me.columnDISC_OTHER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NET_TOTALColumn() As System.Data.DataColumn
            Get
                Return Me.columnNET_TOTAL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CASH_AMTColumn() As System.Data.DataColumn
            Get
                Return Me.columnCASH_AMT
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BANK_AMTColumn() As System.Data.DataColumn
            Get
                Return Me.columnBANK_AMT
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As V_PURCHASE_INVOICESRow
            Get
                Return CType(Me.Rows(index),V_PURCHASE_INVOICESRow)
            End Get
        End Property
        
        Public Event V_PURCHASE_INVOICESRowChanging As V_PURCHASE_INVOICESRowChangeEventHandler
        
        Public Event V_PURCHASE_INVOICESRowChanged As V_PURCHASE_INVOICESRowChangeEventHandler
        
        Public Event V_PURCHASE_INVOICESRowDeleting As V_PURCHASE_INVOICESRowChangeEventHandler
        
        Public Event V_PURCHASE_INVOICESRowDeleted As V_PURCHASE_INVOICESRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddV_PURCHASE_INVOICESRow(ByVal row As V_PURCHASE_INVOICESRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddV_PURCHASE_INVOICESRow(ByVal PINV_NO As String, ByVal SUPPLIER_NAME As String, ByVal P_DATE As Date, ByVal TOTAL_BILL As Decimal, ByVal DISC_RS As Decimal, ByVal DISC_PER As Decimal, ByVal DISC_OTHER As Decimal, ByVal NET_TOTAL As Decimal, ByVal CASH_AMT As Decimal, ByVal BANK_AMT As Decimal) As V_PURCHASE_INVOICESRow
            Dim rowV_PURCHASE_INVOICESRow As V_PURCHASE_INVOICESRow = CType(Me.NewRow,V_PURCHASE_INVOICESRow)
            rowV_PURCHASE_INVOICESRow.ItemArray = New Object() {PINV_NO, SUPPLIER_NAME, P_DATE, TOTAL_BILL, DISC_RS, DISC_PER, DISC_OTHER, NET_TOTAL, CASH_AMT, BANK_AMT}
            Me.Rows.Add(rowV_PURCHASE_INVOICESRow)
            Return rowV_PURCHASE_INVOICESRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As V_PURCHASE_INVOICESDataTable = CType(MyBase.Clone,V_PURCHASE_INVOICESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New V_PURCHASE_INVOICESDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPINV_NO = MyBase.Columns("PINV_NO")
            Me.columnSUPPLIER_NAME = MyBase.Columns("SUPPLIER_NAME")
            Me.columnP_DATE = MyBase.Columns("P_DATE")
            Me.columnTOTAL_BILL = MyBase.Columns("TOTAL_BILL")
            Me.columnDISC_RS = MyBase.Columns("DISC_RS")
            Me.columnDISC_PER = MyBase.Columns("DISC_PER")
            Me.columnDISC_OTHER = MyBase.Columns("DISC_OTHER")
            Me.columnNET_TOTAL = MyBase.Columns("NET_TOTAL")
            Me.columnCASH_AMT = MyBase.Columns("CASH_AMT")
            Me.columnBANK_AMT = MyBase.Columns("BANK_AMT")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPINV_NO = New System.Data.DataColumn("PINV_NO", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPINV_NO)
            Me.columnSUPPLIER_NAME = New System.Data.DataColumn("SUPPLIER_NAME", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUPPLIER_NAME)
            Me.columnP_DATE = New System.Data.DataColumn("P_DATE", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnP_DATE)
            Me.columnTOTAL_BILL = New System.Data.DataColumn("TOTAL_BILL", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_BILL)
            Me.columnDISC_RS = New System.Data.DataColumn("DISC_RS", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISC_RS)
            Me.columnDISC_PER = New System.Data.DataColumn("DISC_PER", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISC_PER)
            Me.columnDISC_OTHER = New System.Data.DataColumn("DISC_OTHER", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISC_OTHER)
            Me.columnNET_TOTAL = New System.Data.DataColumn("NET_TOTAL", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNET_TOTAL)
            Me.columnCASH_AMT = New System.Data.DataColumn("CASH_AMT", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCASH_AMT)
            Me.columnBANK_AMT = New System.Data.DataColumn("BANK_AMT", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBANK_AMT)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnPINV_NO}, false))
            Me.columnPINV_NO.Unique = true
            Me.columnPINV_NO.MaxLength = 50
            Me.columnSUPPLIER_NAME.ReadOnly = true
            Me.columnSUPPLIER_NAME.MaxLength = 103
            Me.columnCASH_AMT.ReadOnly = true
            Me.columnBANK_AMT.ReadOnly = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewV_PURCHASE_INVOICESRow() As V_PURCHASE_INVOICESRow
            Return CType(Me.NewRow,V_PURCHASE_INVOICESRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New V_PURCHASE_INVOICESRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(V_PURCHASE_INVOICESRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.V_PURCHASE_INVOICESRowChangedEvent) Is Nothing) Then
                RaiseEvent V_PURCHASE_INVOICESRowChanged(Me, New V_PURCHASE_INVOICESRowChangeEvent(CType(e.Row,V_PURCHASE_INVOICESRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.V_PURCHASE_INVOICESRowChangingEvent) Is Nothing) Then
                RaiseEvent V_PURCHASE_INVOICESRowChanging(Me, New V_PURCHASE_INVOICESRowChangeEvent(CType(e.Row,V_PURCHASE_INVOICESRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.V_PURCHASE_INVOICESRowDeletedEvent) Is Nothing) Then
                RaiseEvent V_PURCHASE_INVOICESRowDeleted(Me, New V_PURCHASE_INVOICESRowChangeEvent(CType(e.Row,V_PURCHASE_INVOICESRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.V_PURCHASE_INVOICESRowDeletingEvent) Is Nothing) Then
                RaiseEvent V_PURCHASE_INVOICESRowDeleting(Me, New V_PURCHASE_INVOICESRowChangeEvent(CType(e.Row,V_PURCHASE_INVOICESRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveV_PURCHASE_INVOICESRow(ByVal row As V_PURCHASE_INVOICESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPURCHASE_INVOICES = New dsPURCHASE_INVOICES
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "V_PURCHASE_INVOICESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class V_PURCHASE_INVOICESRow
        Inherits System.Data.DataRow
        
        Private tableV_PURCHASE_INVOICES As V_PURCHASE_INVOICESDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableV_PURCHASE_INVOICES = CType(Me.Table,V_PURCHASE_INVOICESDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PINV_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_PURCHASE_INVOICES.PINV_NOColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'PINV_NO' in table 'V_PURCHASE_INVOICES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_PURCHASE_INVOICES.PINV_NOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUPPLIER_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_PURCHASE_INVOICES.SUPPLIER_NAMEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SUPPLIER_NAME' in table 'V_PURCHASE_INVOICES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_PURCHASE_INVOICES.SUPPLIER_NAMEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property P_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableV_PURCHASE_INVOICES.P_DATEColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'P_DATE' in table 'V_PURCHASE_INVOICES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_PURCHASE_INVOICES.P_DATEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_BILL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_PURCHASE_INVOICES.TOTAL_BILLColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'TOTAL_BILL' in table 'V_PURCHASE_INVOICES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_PURCHASE_INVOICES.TOTAL_BILLColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DISC_RS() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_PURCHASE_INVOICES.DISC_RSColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'DISC_RS' in table 'V_PURCHASE_INVOICES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_PURCHASE_INVOICES.DISC_RSColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DISC_PER() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_PURCHASE_INVOICES.DISC_PERColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'DISC_PER' in table 'V_PURCHASE_INVOICES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_PURCHASE_INVOICES.DISC_PERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DISC_OTHER() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_PURCHASE_INVOICES.DISC_OTHERColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'DISC_OTHER' in table 'V_PURCHASE_INVOICES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_PURCHASE_INVOICES.DISC_OTHERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NET_TOTAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_PURCHASE_INVOICES.NET_TOTALColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'NET_TOTAL' in table 'V_PURCHASE_INVOICES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_PURCHASE_INVOICES.NET_TOTALColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CASH_AMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_PURCHASE_INVOICES.CASH_AMTColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'CASH_AMT' in table 'V_PURCHASE_INVOICES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_PURCHASE_INVOICES.CASH_AMTColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BANK_AMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_PURCHASE_INVOICES.BANK_AMTColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'BANK_AMT' in table 'V_PURCHASE_INVOICES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_PURCHASE_INVOICES.BANK_AMTColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPINV_NONull() As Boolean
            Return Me.IsNull(Me.tableV_PURCHASE_INVOICES.PINV_NOColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPINV_NONull()
            Me(Me.tableV_PURCHASE_INVOICES.PINV_NOColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUPPLIER_NAMENull() As Boolean
            Return Me.IsNull(Me.tableV_PURCHASE_INVOICES.SUPPLIER_NAMEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUPPLIER_NAMENull()
            Me(Me.tableV_PURCHASE_INVOICES.SUPPLIER_NAMEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsP_DATENull() As Boolean
            Return Me.IsNull(Me.tableV_PURCHASE_INVOICES.P_DATEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetP_DATENull()
            Me(Me.tableV_PURCHASE_INVOICES.P_DATEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_BILLNull() As Boolean
            Return Me.IsNull(Me.tableV_PURCHASE_INVOICES.TOTAL_BILLColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_BILLNull()
            Me(Me.tableV_PURCHASE_INVOICES.TOTAL_BILLColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDISC_RSNull() As Boolean
            Return Me.IsNull(Me.tableV_PURCHASE_INVOICES.DISC_RSColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDISC_RSNull()
            Me(Me.tableV_PURCHASE_INVOICES.DISC_RSColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDISC_PERNull() As Boolean
            Return Me.IsNull(Me.tableV_PURCHASE_INVOICES.DISC_PERColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDISC_PERNull()
            Me(Me.tableV_PURCHASE_INVOICES.DISC_PERColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDISC_OTHERNull() As Boolean
            Return Me.IsNull(Me.tableV_PURCHASE_INVOICES.DISC_OTHERColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDISC_OTHERNull()
            Me(Me.tableV_PURCHASE_INVOICES.DISC_OTHERColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNET_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableV_PURCHASE_INVOICES.NET_TOTALColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNET_TOTALNull()
            Me(Me.tableV_PURCHASE_INVOICES.NET_TOTALColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCASH_AMTNull() As Boolean
            Return Me.IsNull(Me.tableV_PURCHASE_INVOICES.CASH_AMTColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCASH_AMTNull()
            Me(Me.tableV_PURCHASE_INVOICES.CASH_AMTColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBANK_AMTNull() As Boolean
            Return Me.IsNull(Me.tableV_PURCHASE_INVOICES.BANK_AMTColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBANK_AMTNull()
            Me(Me.tableV_PURCHASE_INVOICES.BANK_AMTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class V_PURCHASE_INVOICESRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As V_PURCHASE_INVOICESRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As V_PURCHASE_INVOICESRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As V_PURCHASE_INVOICESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
