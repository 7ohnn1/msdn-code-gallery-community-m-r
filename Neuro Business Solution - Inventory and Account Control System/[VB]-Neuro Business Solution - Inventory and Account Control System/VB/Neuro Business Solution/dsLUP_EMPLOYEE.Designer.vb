'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1433
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsLUP_EMPLOYEE"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsLUP_EMPLOYEE
    Inherits Global.System.Data.DataSet
    
    Private tableV_EMPLOYEE_INFO As V_EMPLOYEE_INFODataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("V_EMPLOYEE_INFO")) Is Nothing) Then
                MyBase.Tables.Add(New V_EMPLOYEE_INFODataTable(ds.Tables("V_EMPLOYEE_INFO")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property V_EMPLOYEE_INFO() As V_EMPLOYEE_INFODataTable
        Get
            Return Me.tableV_EMPLOYEE_INFO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsLUP_EMPLOYEE = CType(MyBase.Clone,dsLUP_EMPLOYEE)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("V_EMPLOYEE_INFO")) Is Nothing) Then
                MyBase.Tables.Add(New V_EMPLOYEE_INFODataTable(ds.Tables("V_EMPLOYEE_INFO")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableV_EMPLOYEE_INFO = CType(MyBase.Tables("V_EMPLOYEE_INFO"),V_EMPLOYEE_INFODataTable)
        If (initTable = true) Then
            If (Not (Me.tableV_EMPLOYEE_INFO) Is Nothing) Then
                Me.tableV_EMPLOYEE_INFO.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsLUP_EMPLOYEE"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsLUP_EMPLOYEE.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableV_EMPLOYEE_INFO = New V_EMPLOYEE_INFODataTable
        MyBase.Tables.Add(Me.tableV_EMPLOYEE_INFO)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeV_EMPLOYEE_INFO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsLUP_EMPLOYEE = New dsLUP_EMPLOYEE
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub V_EMPLOYEE_INFORowChangeEventHandler(ByVal sender As Object, ByVal e As V_EMPLOYEE_INFORowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class V_EMPLOYEE_INFODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCODE As Global.System.Data.DataColumn
        
        Private columnNAME As Global.System.Data.DataColumn
        
        Private columnFATHER_NAME As Global.System.Data.DataColumn
        
        Private columnNIC As Global.System.Data.DataColumn
        
        Private columnHOME_PH As Global.System.Data.DataColumn
        
        Private columnCELL As Global.System.Data.DataColumn
        
        Private columnPRE_ADD As Global.System.Data.DataColumn
        
        Private columnPER_ADD As Global.System.Data.DataColumn
        
        Private columnDESIGNATION As Global.System.Data.DataColumn
        
        Private columnAPP_DATE As Global.System.Data.DataColumn
        
        Private columnPAY As Global.System.Data.DataColumn
        
        Private columnSTATUS As Global.System.Data.DataColumn
        
        Private columnLEAVE_DATE As Global.System.Data.DataColumn
        
        Private columnEMAIL_ADD As Global.System.Data.DataColumn
        
        Private columnBANK_ACC As Global.System.Data.DataColumn
        
        Private columnBANK_ADD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "V_EMPLOYEE_INFO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FATHER_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFATHER_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NICColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNIC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HOME_PHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHOME_PH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CELLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCELL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PER_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPER_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESIGNATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESIGNATION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property APP_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAPP_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LEAVE_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLEAVE_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMAIL_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMAIL_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BANK_ACCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBANK_ACC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BANK_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBANK_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As V_EMPLOYEE_INFORow
            Get
                Return CType(Me.Rows(index),V_EMPLOYEE_INFORow)
            End Get
        End Property
        
        Public Event V_EMPLOYEE_INFORowChanging As V_EMPLOYEE_INFORowChangeEventHandler
        
        Public Event V_EMPLOYEE_INFORowChanged As V_EMPLOYEE_INFORowChangeEventHandler
        
        Public Event V_EMPLOYEE_INFORowDeleting As V_EMPLOYEE_INFORowChangeEventHandler
        
        Public Event V_EMPLOYEE_INFORowDeleted As V_EMPLOYEE_INFORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddV_EMPLOYEE_INFORow(ByVal row As V_EMPLOYEE_INFORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddV_EMPLOYEE_INFORow(ByVal NAME As String, ByVal FATHER_NAME As String, ByVal NIC As String, ByVal HOME_PH As String, ByVal CELL As String, ByVal PRE_ADD As String, ByVal PER_ADD As String, ByVal DESIGNATION As String, ByVal APP_DATE As Date, ByVal PAY As Decimal, ByVal STATUS As Boolean, ByVal LEAVE_DATE As Date, ByVal EMAIL_ADD As String, ByVal BANK_ACC As String, ByVal BANK_ADD As String) As V_EMPLOYEE_INFORow
            Dim rowV_EMPLOYEE_INFORow As V_EMPLOYEE_INFORow = CType(Me.NewRow,V_EMPLOYEE_INFORow)
            Dim columnValuesArray() As Object = New Object() {Nothing, NAME, FATHER_NAME, NIC, HOME_PH, CELL, PRE_ADD, PER_ADD, DESIGNATION, APP_DATE, PAY, STATUS, LEAVE_DATE, EMAIL_ADD, BANK_ACC, BANK_ADD}
            rowV_EMPLOYEE_INFORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowV_EMPLOYEE_INFORow)
            Return rowV_EMPLOYEE_INFORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCODE(ByVal CODE As Decimal) As V_EMPLOYEE_INFORow
            Return CType(Me.Rows.Find(New Object() {CODE}),V_EMPLOYEE_INFORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As V_EMPLOYEE_INFODataTable = CType(MyBase.Clone,V_EMPLOYEE_INFODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New V_EMPLOYEE_INFODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCODE = MyBase.Columns("CODE")
            Me.columnNAME = MyBase.Columns("NAME")
            Me.columnFATHER_NAME = MyBase.Columns("FATHER_NAME")
            Me.columnNIC = MyBase.Columns("NIC")
            Me.columnHOME_PH = MyBase.Columns("HOME_PH")
            Me.columnCELL = MyBase.Columns("CELL")
            Me.columnPRE_ADD = MyBase.Columns("PRE_ADD")
            Me.columnPER_ADD = MyBase.Columns("PER_ADD")
            Me.columnDESIGNATION = MyBase.Columns("DESIGNATION")
            Me.columnAPP_DATE = MyBase.Columns("APP_DATE")
            Me.columnPAY = MyBase.Columns("PAY")
            Me.columnSTATUS = MyBase.Columns("STATUS")
            Me.columnLEAVE_DATE = MyBase.Columns("LEAVE_DATE")
            Me.columnEMAIL_ADD = MyBase.Columns("EMAIL_ADD")
            Me.columnBANK_ACC = MyBase.Columns("BANK_ACC")
            Me.columnBANK_ADD = MyBase.Columns("BANK_ADD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCODE = New Global.System.Data.DataColumn("CODE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODE)
            Me.columnNAME = New Global.System.Data.DataColumn("NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNAME)
            Me.columnFATHER_NAME = New Global.System.Data.DataColumn("FATHER_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFATHER_NAME)
            Me.columnNIC = New Global.System.Data.DataColumn("NIC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNIC)
            Me.columnHOME_PH = New Global.System.Data.DataColumn("HOME_PH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHOME_PH)
            Me.columnCELL = New Global.System.Data.DataColumn("CELL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCELL)
            Me.columnPRE_ADD = New Global.System.Data.DataColumn("PRE_ADD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_ADD)
            Me.columnPER_ADD = New Global.System.Data.DataColumn("PER_ADD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPER_ADD)
            Me.columnDESIGNATION = New Global.System.Data.DataColumn("DESIGNATION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESIGNATION)
            Me.columnAPP_DATE = New Global.System.Data.DataColumn("APP_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAPP_DATE)
            Me.columnPAY = New Global.System.Data.DataColumn("PAY", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAY)
            Me.columnSTATUS = New Global.System.Data.DataColumn("STATUS", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS)
            Me.columnLEAVE_DATE = New Global.System.Data.DataColumn("LEAVE_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLEAVE_DATE)
            Me.columnEMAIL_ADD = New Global.System.Data.DataColumn("EMAIL_ADD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMAIL_ADD)
            Me.columnBANK_ACC = New Global.System.Data.DataColumn("BANK_ACC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBANK_ACC)
            Me.columnBANK_ADD = New Global.System.Data.DataColumn("BANK_ADD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBANK_ADD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCODE}, true))
            Me.columnCODE.AutoIncrement = true
            Me.columnCODE.AllowDBNull = false
            Me.columnCODE.ReadOnly = true
            Me.columnCODE.Unique = true
            Me.columnNAME.AllowDBNull = false
            Me.columnNAME.MaxLength = 50
            Me.columnFATHER_NAME.AllowDBNull = false
            Me.columnFATHER_NAME.MaxLength = 50
            Me.columnNIC.AllowDBNull = false
            Me.columnNIC.MaxLength = 50
            Me.columnHOME_PH.MaxLength = 50
            Me.columnCELL.MaxLength = 50
            Me.columnPRE_ADD.AllowDBNull = false
            Me.columnPRE_ADD.MaxLength = 200
            Me.columnPER_ADD.MaxLength = 200
            Me.columnDESIGNATION.AllowDBNull = false
            Me.columnDESIGNATION.MaxLength = 50
            Me.columnAPP_DATE.AllowDBNull = false
            Me.columnPAY.AllowDBNull = false
            Me.columnSTATUS.AllowDBNull = false
            Me.columnEMAIL_ADD.MaxLength = 50
            Me.columnBANK_ACC.MaxLength = 50
            Me.columnBANK_ADD.MaxLength = 200
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewV_EMPLOYEE_INFORow() As V_EMPLOYEE_INFORow
            Return CType(Me.NewRow,V_EMPLOYEE_INFORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New V_EMPLOYEE_INFORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(V_EMPLOYEE_INFORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.V_EMPLOYEE_INFORowChangedEvent) Is Nothing) Then
                RaiseEvent V_EMPLOYEE_INFORowChanged(Me, New V_EMPLOYEE_INFORowChangeEvent(CType(e.Row,V_EMPLOYEE_INFORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.V_EMPLOYEE_INFORowChangingEvent) Is Nothing) Then
                RaiseEvent V_EMPLOYEE_INFORowChanging(Me, New V_EMPLOYEE_INFORowChangeEvent(CType(e.Row,V_EMPLOYEE_INFORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.V_EMPLOYEE_INFORowDeletedEvent) Is Nothing) Then
                RaiseEvent V_EMPLOYEE_INFORowDeleted(Me, New V_EMPLOYEE_INFORowChangeEvent(CType(e.Row,V_EMPLOYEE_INFORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.V_EMPLOYEE_INFORowDeletingEvent) Is Nothing) Then
                RaiseEvent V_EMPLOYEE_INFORowDeleting(Me, New V_EMPLOYEE_INFORowChangeEvent(CType(e.Row,V_EMPLOYEE_INFORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveV_EMPLOYEE_INFORow(ByVal row As V_EMPLOYEE_INFORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsLUP_EMPLOYEE = New dsLUP_EMPLOYEE
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "V_EMPLOYEE_INFODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class V_EMPLOYEE_INFORow
        Inherits Global.System.Data.DataRow
        
        Private tableV_EMPLOYEE_INFO As V_EMPLOYEE_INFODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableV_EMPLOYEE_INFO = CType(Me.Table,V_EMPLOYEE_INFODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODE() As Decimal
            Get
                Return CType(Me(Me.tableV_EMPLOYEE_INFO.CODEColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_EMPLOYEE_INFO.CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NAME() As String
            Get
                Return CType(Me(Me.tableV_EMPLOYEE_INFO.NAMEColumn),String)
            End Get
            Set
                Me(Me.tableV_EMPLOYEE_INFO.NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FATHER_NAME() As String
            Get
                Return CType(Me(Me.tableV_EMPLOYEE_INFO.FATHER_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableV_EMPLOYEE_INFO.FATHER_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NIC() As String
            Get
                Return CType(Me(Me.tableV_EMPLOYEE_INFO.NICColumn),String)
            End Get
            Set
                Me(Me.tableV_EMPLOYEE_INFO.NICColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HOME_PH() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_EMPLOYEE_INFO.HOME_PHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HOME_PH' in table 'V_EMPLOYEE_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_EMPLOYEE_INFO.HOME_PHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CELL() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_EMPLOYEE_INFO.CELLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CELL' in table 'V_EMPLOYEE_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_EMPLOYEE_INFO.CELLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_ADD() As String
            Get
                Return CType(Me(Me.tableV_EMPLOYEE_INFO.PRE_ADDColumn),String)
            End Get
            Set
                Me(Me.tableV_EMPLOYEE_INFO.PRE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PER_ADD() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_EMPLOYEE_INFO.PER_ADDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PER_ADD' in table 'V_EMPLOYEE_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_EMPLOYEE_INFO.PER_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESIGNATION() As String
            Get
                Return CType(Me(Me.tableV_EMPLOYEE_INFO.DESIGNATIONColumn),String)
            End Get
            Set
                Me(Me.tableV_EMPLOYEE_INFO.DESIGNATIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property APP_DATE() As Date
            Get
                Return CType(Me(Me.tableV_EMPLOYEE_INFO.APP_DATEColumn),Date)
            End Get
            Set
                Me(Me.tableV_EMPLOYEE_INFO.APP_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAY() As Decimal
            Get
                Return CType(Me(Me.tableV_EMPLOYEE_INFO.PAYColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_EMPLOYEE_INFO.PAYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS() As Boolean
            Get
                Return CType(Me(Me.tableV_EMPLOYEE_INFO.STATUSColumn),Boolean)
            End Get
            Set
                Me(Me.tableV_EMPLOYEE_INFO.STATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LEAVE_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableV_EMPLOYEE_INFO.LEAVE_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LEAVE_DATE' in table 'V_EMPLOYEE_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_EMPLOYEE_INFO.LEAVE_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMAIL_ADD() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_EMPLOYEE_INFO.EMAIL_ADDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EMAIL_ADD' in table 'V_EMPLOYEE_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_EMPLOYEE_INFO.EMAIL_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BANK_ACC() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_EMPLOYEE_INFO.BANK_ACCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BANK_ACC' in table 'V_EMPLOYEE_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_EMPLOYEE_INFO.BANK_ACCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BANK_ADD() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_EMPLOYEE_INFO.BANK_ADDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BANK_ADD' in table 'V_EMPLOYEE_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_EMPLOYEE_INFO.BANK_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHOME_PHNull() As Boolean
            Return Me.IsNull(Me.tableV_EMPLOYEE_INFO.HOME_PHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHOME_PHNull()
            Me(Me.tableV_EMPLOYEE_INFO.HOME_PHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCELLNull() As Boolean
            Return Me.IsNull(Me.tableV_EMPLOYEE_INFO.CELLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCELLNull()
            Me(Me.tableV_EMPLOYEE_INFO.CELLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPER_ADDNull() As Boolean
            Return Me.IsNull(Me.tableV_EMPLOYEE_INFO.PER_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPER_ADDNull()
            Me(Me.tableV_EMPLOYEE_INFO.PER_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLEAVE_DATENull() As Boolean
            Return Me.IsNull(Me.tableV_EMPLOYEE_INFO.LEAVE_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLEAVE_DATENull()
            Me(Me.tableV_EMPLOYEE_INFO.LEAVE_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEMAIL_ADDNull() As Boolean
            Return Me.IsNull(Me.tableV_EMPLOYEE_INFO.EMAIL_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEMAIL_ADDNull()
            Me(Me.tableV_EMPLOYEE_INFO.EMAIL_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBANK_ACCNull() As Boolean
            Return Me.IsNull(Me.tableV_EMPLOYEE_INFO.BANK_ACCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBANK_ACCNull()
            Me(Me.tableV_EMPLOYEE_INFO.BANK_ACCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBANK_ADDNull() As Boolean
            Return Me.IsNull(Me.tableV_EMPLOYEE_INFO.BANK_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBANK_ADDNull()
            Me(Me.tableV_EMPLOYEE_INFO.BANK_ADDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class V_EMPLOYEE_INFORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As V_EMPLOYEE_INFORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As V_EMPLOYEE_INFORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As V_EMPLOYEE_INFORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
