'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("dsLUP_ITEM"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsLUP_ITEM
    Inherits System.Data.DataSet
    
    Private tableV_LUP_ITEM As V_LUP_ITEMDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("V_LUP_ITEM")) Is Nothing) Then
                MyBase.Tables.Add(New V_LUP_ITEMDataTable(ds.Tables("V_LUP_ITEM")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property V_LUP_ITEM() As V_LUP_ITEMDataTable
        Get
            Return Me.tableV_LUP_ITEM
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As dsLUP_ITEM = CType(MyBase.Clone,dsLUP_ITEM)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("V_LUP_ITEM")) Is Nothing) Then
                MyBase.Tables.Add(New V_LUP_ITEMDataTable(ds.Tables("V_LUP_ITEM")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableV_LUP_ITEM = CType(MyBase.Tables("V_LUP_ITEM"),V_LUP_ITEMDataTable)
        If (initTable = true) Then
            If (Not (Me.tableV_LUP_ITEM) Is Nothing) Then
                Me.tableV_LUP_ITEM.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsLUP_ITEM"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsLUP_ITEM.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableV_LUP_ITEM = New V_LUP_ITEMDataTable
        MyBase.Tables.Add(Me.tableV_LUP_ITEM)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeV_LUP_ITEM() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsLUP_ITEM = New dsLUP_ITEM
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub V_LUP_ITEMRowChangeEventHandler(ByVal sender As Object, ByVal e As V_LUP_ITEMRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class V_LUP_ITEMDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnnCODE As System.Data.DataColumn
        
        Private columnsITEM_NAME As System.Data.DataColumn
        
        Private columnsNICK As System.Data.DataColumn
        
        Private columnnPPP As System.Data.DataColumn
        
        Private columnsPACK_DESC As System.Data.DataColumn
        
        Private columnsPIECE_DESC As System.Data.DataColumn
        
        Private columnUNIT_COST As System.Data.DataColumn
        
        Private columnUNIT_RATE As System.Data.DataColumn
        
        Private columnUNIT_RETAIL As System.Data.DataColumn
        
        Private columnnMIN_STOCK As System.Data.DataColumn
        
        Private columnnMAX_STOCK As System.Data.DataColumn
        
        Private columnnSALE_TAX As System.Data.DataColumn
        
        Private columnVENDOR As System.Data.DataColumn
        
        Private columnnBONUS_QTY As System.Data.DataColumn
        
        Private columnnBONUS_ON_PCS As System.Data.DataColumn
        
        Private columnCLAIMABLE As System.Data.DataColumn
        
        Private columnSTATUS As System.Data.DataColumn
        
        Private columnnOPEN_STOCK As System.Data.DataColumn
        
        Private columnOPEN_UNIT_VALUE As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "V_LUP_ITEM"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nCODEColumn() As System.Data.DataColumn
            Get
                Return Me.columnnCODE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sITEM_NAMEColumn() As System.Data.DataColumn
            Get
                Return Me.columnsITEM_NAME
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sNICKColumn() As System.Data.DataColumn
            Get
                Return Me.columnsNICK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nPPPColumn() As System.Data.DataColumn
            Get
                Return Me.columnnPPP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sPACK_DESCColumn() As System.Data.DataColumn
            Get
                Return Me.columnsPACK_DESC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sPIECE_DESCColumn() As System.Data.DataColumn
            Get
                Return Me.columnsPIECE_DESC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNIT_COSTColumn() As System.Data.DataColumn
            Get
                Return Me.columnUNIT_COST
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNIT_RATEColumn() As System.Data.DataColumn
            Get
                Return Me.columnUNIT_RATE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNIT_RETAILColumn() As System.Data.DataColumn
            Get
                Return Me.columnUNIT_RETAIL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nMIN_STOCKColumn() As System.Data.DataColumn
            Get
                Return Me.columnnMIN_STOCK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nMAX_STOCKColumn() As System.Data.DataColumn
            Get
                Return Me.columnnMAX_STOCK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nSALE_TAXColumn() As System.Data.DataColumn
            Get
                Return Me.columnnSALE_TAX
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VENDORColumn() As System.Data.DataColumn
            Get
                Return Me.columnVENDOR
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nBONUS_QTYColumn() As System.Data.DataColumn
            Get
                Return Me.columnnBONUS_QTY
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nBONUS_ON_PCSColumn() As System.Data.DataColumn
            Get
                Return Me.columnnBONUS_ON_PCS
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLAIMABLEColumn() As System.Data.DataColumn
            Get
                Return Me.columnCLAIMABLE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUSColumn() As System.Data.DataColumn
            Get
                Return Me.columnSTATUS
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nOPEN_STOCKColumn() As System.Data.DataColumn
            Get
                Return Me.columnnOPEN_STOCK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPEN_UNIT_VALUEColumn() As System.Data.DataColumn
            Get
                Return Me.columnOPEN_UNIT_VALUE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As V_LUP_ITEMRow
            Get
                Return CType(Me.Rows(index),V_LUP_ITEMRow)
            End Get
        End Property
        
        Public Event V_LUP_ITEMRowChanging As V_LUP_ITEMRowChangeEventHandler
        
        Public Event V_LUP_ITEMRowChanged As V_LUP_ITEMRowChangeEventHandler
        
        Public Event V_LUP_ITEMRowDeleting As V_LUP_ITEMRowChangeEventHandler
        
        Public Event V_LUP_ITEMRowDeleted As V_LUP_ITEMRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddV_LUP_ITEMRow(ByVal row As V_LUP_ITEMRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddV_LUP_ITEMRow( _
                    ByVal nCODE As Decimal,  _
                    ByVal sITEM_NAME As String,  _
                    ByVal sNICK As String,  _
                    ByVal nPPP As Decimal,  _
                    ByVal sPACK_DESC As String,  _
                    ByVal sPIECE_DESC As String,  _
                    ByVal UNIT_COST As Decimal,  _
                    ByVal UNIT_RATE As Decimal,  _
                    ByVal UNIT_RETAIL As Decimal,  _
                    ByVal nMIN_STOCK As Decimal,  _
                    ByVal nMAX_STOCK As Decimal,  _
                    ByVal nSALE_TAX As Decimal,  _
                    ByVal VENDOR As String,  _
                    ByVal nBONUS_QTY As Decimal,  _
                    ByVal nBONUS_ON_PCS As Decimal,  _
                    ByVal CLAIMABLE As String,  _
                    ByVal STATUS As String,  _
                    ByVal nOPEN_STOCK As Decimal,  _
                    ByVal OPEN_UNIT_VALUE As Decimal) As V_LUP_ITEMRow
            Dim rowV_LUP_ITEMRow As V_LUP_ITEMRow = CType(Me.NewRow,V_LUP_ITEMRow)
            rowV_LUP_ITEMRow.ItemArray = New Object() {nCODE, sITEM_NAME, sNICK, nPPP, sPACK_DESC, sPIECE_DESC, UNIT_COST, UNIT_RATE, UNIT_RETAIL, nMIN_STOCK, nMAX_STOCK, nSALE_TAX, VENDOR, nBONUS_QTY, nBONUS_ON_PCS, CLAIMABLE, STATUS, nOPEN_STOCK, OPEN_UNIT_VALUE}
            Me.Rows.Add(rowV_LUP_ITEMRow)
            Return rowV_LUP_ITEMRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynCODE(ByVal nCODE As Decimal) As V_LUP_ITEMRow
            Return CType(Me.Rows.Find(New Object() {nCODE}),V_LUP_ITEMRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As V_LUP_ITEMDataTable = CType(MyBase.Clone,V_LUP_ITEMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New V_LUP_ITEMDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnCODE = MyBase.Columns("nCODE")
            Me.columnsITEM_NAME = MyBase.Columns("sITEM_NAME")
            Me.columnsNICK = MyBase.Columns("sNICK")
            Me.columnnPPP = MyBase.Columns("nPPP")
            Me.columnsPACK_DESC = MyBase.Columns("sPACK_DESC")
            Me.columnsPIECE_DESC = MyBase.Columns("sPIECE_DESC")
            Me.columnUNIT_COST = MyBase.Columns("UNIT_COST")
            Me.columnUNIT_RATE = MyBase.Columns("UNIT_RATE")
            Me.columnUNIT_RETAIL = MyBase.Columns("UNIT_RETAIL")
            Me.columnnMIN_STOCK = MyBase.Columns("nMIN_STOCK")
            Me.columnnMAX_STOCK = MyBase.Columns("nMAX_STOCK")
            Me.columnnSALE_TAX = MyBase.Columns("nSALE_TAX")
            Me.columnVENDOR = MyBase.Columns("VENDOR")
            Me.columnnBONUS_QTY = MyBase.Columns("nBONUS_QTY")
            Me.columnnBONUS_ON_PCS = MyBase.Columns("nBONUS_ON_PCS")
            Me.columnCLAIMABLE = MyBase.Columns("CLAIMABLE")
            Me.columnSTATUS = MyBase.Columns("STATUS")
            Me.columnnOPEN_STOCK = MyBase.Columns("nOPEN_STOCK")
            Me.columnOPEN_UNIT_VALUE = MyBase.Columns("OPEN_UNIT_VALUE")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnCODE = New System.Data.DataColumn("nCODE", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnCODE)
            Me.columnsITEM_NAME = New System.Data.DataColumn("sITEM_NAME", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsITEM_NAME)
            Me.columnsNICK = New System.Data.DataColumn("sNICK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsNICK)
            Me.columnnPPP = New System.Data.DataColumn("nPPP", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnPPP)
            Me.columnsPACK_DESC = New System.Data.DataColumn("sPACK_DESC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsPACK_DESC)
            Me.columnsPIECE_DESC = New System.Data.DataColumn("sPIECE_DESC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsPIECE_DESC)
            Me.columnUNIT_COST = New System.Data.DataColumn("UNIT_COST", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT_COST)
            Me.columnUNIT_RATE = New System.Data.DataColumn("UNIT_RATE", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT_RATE)
            Me.columnUNIT_RETAIL = New System.Data.DataColumn("UNIT_RETAIL", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT_RETAIL)
            Me.columnnMIN_STOCK = New System.Data.DataColumn("nMIN_STOCK", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnMIN_STOCK)
            Me.columnnMAX_STOCK = New System.Data.DataColumn("nMAX_STOCK", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnMAX_STOCK)
            Me.columnnSALE_TAX = New System.Data.DataColumn("nSALE_TAX", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnSALE_TAX)
            Me.columnVENDOR = New System.Data.DataColumn("VENDOR", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVENDOR)
            Me.columnnBONUS_QTY = New System.Data.DataColumn("nBONUS_QTY", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnBONUS_QTY)
            Me.columnnBONUS_ON_PCS = New System.Data.DataColumn("nBONUS_ON_PCS", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnBONUS_ON_PCS)
            Me.columnCLAIMABLE = New System.Data.DataColumn("CLAIMABLE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLAIMABLE)
            Me.columnSTATUS = New System.Data.DataColumn("STATUS", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS)
            Me.columnnOPEN_STOCK = New System.Data.DataColumn("nOPEN_STOCK", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnOPEN_STOCK)
            Me.columnOPEN_UNIT_VALUE = New System.Data.DataColumn("OPEN_UNIT_VALUE", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPEN_UNIT_VALUE)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnnCODE}, true))
            Me.columnnCODE.AllowDBNull = false
            Me.columnnCODE.Unique = true
            Me.columnsITEM_NAME.AllowDBNull = false
            Me.columnsITEM_NAME.MaxLength = 50
            Me.columnsNICK.AllowDBNull = false
            Me.columnsNICK.MaxLength = 50
            Me.columnnPPP.AllowDBNull = false
            Me.columnsPACK_DESC.AllowDBNull = false
            Me.columnsPACK_DESC.MaxLength = 50
            Me.columnsPIECE_DESC.AllowDBNull = false
            Me.columnsPIECE_DESC.MaxLength = 50
            Me.columnUNIT_COST.ReadOnly = true
            Me.columnUNIT_RATE.ReadOnly = true
            Me.columnUNIT_RETAIL.ReadOnly = true
            Me.columnnMIN_STOCK.AllowDBNull = false
            Me.columnnMAX_STOCK.AllowDBNull = false
            Me.columnnSALE_TAX.AllowDBNull = false
            Me.columnVENDOR.AllowDBNull = false
            Me.columnVENDOR.MaxLength = 50
            Me.columnnBONUS_QTY.AllowDBNull = false
            Me.columnnBONUS_ON_PCS.AllowDBNull = false
            Me.columnCLAIMABLE.ReadOnly = true
            Me.columnCLAIMABLE.MaxLength = 3
            Me.columnSTATUS.ReadOnly = true
            Me.columnSTATUS.MaxLength = 3
            Me.columnnOPEN_STOCK.AllowDBNull = false
            Me.columnOPEN_UNIT_VALUE.ReadOnly = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewV_LUP_ITEMRow() As V_LUP_ITEMRow
            Return CType(Me.NewRow,V_LUP_ITEMRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New V_LUP_ITEMRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(V_LUP_ITEMRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.V_LUP_ITEMRowChangedEvent) Is Nothing) Then
                RaiseEvent V_LUP_ITEMRowChanged(Me, New V_LUP_ITEMRowChangeEvent(CType(e.Row,V_LUP_ITEMRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.V_LUP_ITEMRowChangingEvent) Is Nothing) Then
                RaiseEvent V_LUP_ITEMRowChanging(Me, New V_LUP_ITEMRowChangeEvent(CType(e.Row,V_LUP_ITEMRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.V_LUP_ITEMRowDeletedEvent) Is Nothing) Then
                RaiseEvent V_LUP_ITEMRowDeleted(Me, New V_LUP_ITEMRowChangeEvent(CType(e.Row,V_LUP_ITEMRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.V_LUP_ITEMRowDeletingEvent) Is Nothing) Then
                RaiseEvent V_LUP_ITEMRowDeleting(Me, New V_LUP_ITEMRowChangeEvent(CType(e.Row,V_LUP_ITEMRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveV_LUP_ITEMRow(ByVal row As V_LUP_ITEMRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsLUP_ITEM = New dsLUP_ITEM
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "V_LUP_ITEMDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class V_LUP_ITEMRow
        Inherits System.Data.DataRow
        
        Private tableV_LUP_ITEM As V_LUP_ITEMDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableV_LUP_ITEM = CType(Me.Table,V_LUP_ITEMDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nCODE() As Decimal
            Get
                Return CType(Me(Me.tableV_LUP_ITEM.nCODEColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_LUP_ITEM.nCODEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sITEM_NAME() As String
            Get
                Return CType(Me(Me.tableV_LUP_ITEM.sITEM_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableV_LUP_ITEM.sITEM_NAMEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sNICK() As String
            Get
                Return CType(Me(Me.tableV_LUP_ITEM.sNICKColumn),String)
            End Get
            Set
                Me(Me.tableV_LUP_ITEM.sNICKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nPPP() As Decimal
            Get
                Return CType(Me(Me.tableV_LUP_ITEM.nPPPColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_LUP_ITEM.nPPPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sPACK_DESC() As String
            Get
                Return CType(Me(Me.tableV_LUP_ITEM.sPACK_DESCColumn),String)
            End Get
            Set
                Me(Me.tableV_LUP_ITEM.sPACK_DESCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sPIECE_DESC() As String
            Get
                Return CType(Me(Me.tableV_LUP_ITEM.sPIECE_DESCColumn),String)
            End Get
            Set
                Me(Me.tableV_LUP_ITEM.sPIECE_DESCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIT_COST() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_LUP_ITEM.UNIT_COSTColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'UNIT_COST' in table 'V_LUP_ITEM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_LUP_ITEM.UNIT_COSTColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIT_RATE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_LUP_ITEM.UNIT_RATEColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'UNIT_RATE' in table 'V_LUP_ITEM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_LUP_ITEM.UNIT_RATEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIT_RETAIL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_LUP_ITEM.UNIT_RETAILColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'UNIT_RETAIL' in table 'V_LUP_ITEM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_LUP_ITEM.UNIT_RETAILColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nMIN_STOCK() As Decimal
            Get
                Return CType(Me(Me.tableV_LUP_ITEM.nMIN_STOCKColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_LUP_ITEM.nMIN_STOCKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nMAX_STOCK() As Decimal
            Get
                Return CType(Me(Me.tableV_LUP_ITEM.nMAX_STOCKColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_LUP_ITEM.nMAX_STOCKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nSALE_TAX() As Decimal
            Get
                Return CType(Me(Me.tableV_LUP_ITEM.nSALE_TAXColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_LUP_ITEM.nSALE_TAXColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VENDOR() As String
            Get
                Return CType(Me(Me.tableV_LUP_ITEM.VENDORColumn),String)
            End Get
            Set
                Me(Me.tableV_LUP_ITEM.VENDORColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nBONUS_QTY() As Decimal
            Get
                Return CType(Me(Me.tableV_LUP_ITEM.nBONUS_QTYColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_LUP_ITEM.nBONUS_QTYColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nBONUS_ON_PCS() As Decimal
            Get
                Return CType(Me(Me.tableV_LUP_ITEM.nBONUS_ON_PCSColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_LUP_ITEM.nBONUS_ON_PCSColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLAIMABLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_LUP_ITEM.CLAIMABLEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'CLAIMABLE' in table 'V_LUP_ITEM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_LUP_ITEM.CLAIMABLEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_LUP_ITEM.STATUSColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'STATUS' in table 'V_LUP_ITEM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_LUP_ITEM.STATUSColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nOPEN_STOCK() As Decimal
            Get
                Return CType(Me(Me.tableV_LUP_ITEM.nOPEN_STOCKColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_LUP_ITEM.nOPEN_STOCKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPEN_UNIT_VALUE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_LUP_ITEM.OPEN_UNIT_VALUEColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'OPEN_UNIT_VALUE' in table 'V_LUP_ITEM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_LUP_ITEM.OPEN_UNIT_VALUEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNIT_COSTNull() As Boolean
            Return Me.IsNull(Me.tableV_LUP_ITEM.UNIT_COSTColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNIT_COSTNull()
            Me(Me.tableV_LUP_ITEM.UNIT_COSTColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNIT_RATENull() As Boolean
            Return Me.IsNull(Me.tableV_LUP_ITEM.UNIT_RATEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNIT_RATENull()
            Me(Me.tableV_LUP_ITEM.UNIT_RATEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNIT_RETAILNull() As Boolean
            Return Me.IsNull(Me.tableV_LUP_ITEM.UNIT_RETAILColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNIT_RETAILNull()
            Me(Me.tableV_LUP_ITEM.UNIT_RETAILColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLAIMABLENull() As Boolean
            Return Me.IsNull(Me.tableV_LUP_ITEM.CLAIMABLEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLAIMABLENull()
            Me(Me.tableV_LUP_ITEM.CLAIMABLEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUSNull() As Boolean
            Return Me.IsNull(Me.tableV_LUP_ITEM.STATUSColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUSNull()
            Me(Me.tableV_LUP_ITEM.STATUSColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOPEN_UNIT_VALUENull() As Boolean
            Return Me.IsNull(Me.tableV_LUP_ITEM.OPEN_UNIT_VALUEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOPEN_UNIT_VALUENull()
            Me(Me.tableV_LUP_ITEM.OPEN_UNIT_VALUEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class V_LUP_ITEMRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As V_LUP_ITEMRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As V_LUP_ITEMRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As V_LUP_ITEMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
