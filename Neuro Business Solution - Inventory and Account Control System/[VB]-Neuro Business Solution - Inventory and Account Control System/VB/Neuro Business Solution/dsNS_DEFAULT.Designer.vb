'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("dsNS_DEFAULT"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsNS_DEFAULT
    Inherits System.Data.DataSet
    
    Private tableNS_DEFAULT As NS_DEFAULTDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("NS_DEFAULT")) Is Nothing) Then
                MyBase.Tables.Add(New NS_DEFAULTDataTable(ds.Tables("NS_DEFAULT")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NS_DEFAULT() As NS_DEFAULTDataTable
        Get
            Return Me.tableNS_DEFAULT
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As dsNS_DEFAULT = CType(MyBase.Clone,dsNS_DEFAULT)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("NS_DEFAULT")) Is Nothing) Then
                MyBase.Tables.Add(New NS_DEFAULTDataTable(ds.Tables("NS_DEFAULT")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableNS_DEFAULT = CType(MyBase.Tables("NS_DEFAULT"),NS_DEFAULTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableNS_DEFAULT) Is Nothing) Then
                Me.tableNS_DEFAULT.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsNS_DEFAULT"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsNS_DEFAULT.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableNS_DEFAULT = New NS_DEFAULTDataTable
        MyBase.Tables.Add(Me.tableNS_DEFAULT)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNS_DEFAULT() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsNS_DEFAULT = New dsNS_DEFAULT
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub NS_DEFAULTRowChangeEventHandler(ByVal sender As Object, ByVal e As NS_DEFAULTRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NS_DEFAULTDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As System.Data.DataColumn
        
        Private columnGROUP As System.Data.DataColumn
        
        Private columnBANK_ACC As System.Data.DataColumn
        
        Private columnS_MAN As System.Data.DataColumn
        
        Private columnP_MAN As System.Data.DataColumn
        
        Private columnD_MAN As System.Data.DataColumn
        
        Private columnR_MAN As System.Data.DataColumn
        
        Private columnCLIENT As System.Data.DataColumn
        
        Private columnCLIENT_TYPE As System.Data.DataColumn
        
        Private columnCLIENT_CAT As System.Data.DataColumn
        
        Private columnCLIENT_GD As System.Data.DataColumn
        
        Private columnZONE As System.Data.DataColumn
        
        Private columnROUTE As System.Data.DataColumn
        
        Private columnAREA As System.Data.DataColumn
        
        Private columnEXP_SUB_HEAD As System.Data.DataColumn
        
        Private columnPRINTER As System.Data.DataColumn
        
        Private columnRPT_TITLE As System.Data.DataColumn
        
        Private columnRPT_WARRANTY As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NS_DEFAULT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GROUPColumn() As System.Data.DataColumn
            Get
                Return Me.columnGROUP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BANK_ACCColumn() As System.Data.DataColumn
            Get
                Return Me.columnBANK_ACC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property S_MANColumn() As System.Data.DataColumn
            Get
                Return Me.columnS_MAN
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property P_MANColumn() As System.Data.DataColumn
            Get
                Return Me.columnP_MAN
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property D_MANColumn() As System.Data.DataColumn
            Get
                Return Me.columnD_MAN
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property R_MANColumn() As System.Data.DataColumn
            Get
                Return Me.columnR_MAN
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTColumn() As System.Data.DataColumn
            Get
                Return Me.columnCLIENT
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_TYPEColumn() As System.Data.DataColumn
            Get
                Return Me.columnCLIENT_TYPE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_CATColumn() As System.Data.DataColumn
            Get
                Return Me.columnCLIENT_CAT
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_GDColumn() As System.Data.DataColumn
            Get
                Return Me.columnCLIENT_GD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ZONEColumn() As System.Data.DataColumn
            Get
                Return Me.columnZONE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ROUTEColumn() As System.Data.DataColumn
            Get
                Return Me.columnROUTE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AREAColumn() As System.Data.DataColumn
            Get
                Return Me.columnAREA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXP_SUB_HEADColumn() As System.Data.DataColumn
            Get
                Return Me.columnEXP_SUB_HEAD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRINTERColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRINTER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RPT_TITLEColumn() As System.Data.DataColumn
            Get
                Return Me.columnRPT_TITLE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RPT_WARRANTYColumn() As System.Data.DataColumn
            Get
                Return Me.columnRPT_WARRANTY
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NS_DEFAULTRow
            Get
                Return CType(Me.Rows(index),NS_DEFAULTRow)
            End Get
        End Property
        
        Public Event NS_DEFAULTRowChanging As NS_DEFAULTRowChangeEventHandler
        
        Public Event NS_DEFAULTRowChanged As NS_DEFAULTRowChangeEventHandler
        
        Public Event NS_DEFAULTRowDeleting As NS_DEFAULTRowChangeEventHandler
        
        Public Event NS_DEFAULTRowDeleted As NS_DEFAULTRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNS_DEFAULTRow(ByVal row As NS_DEFAULTRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNS_DEFAULTRow( _
                    ByVal ID As Decimal,  _
                    ByVal GROUP As String,  _
                    ByVal BANK_ACC As String,  _
                    ByVal S_MAN As String,  _
                    ByVal P_MAN As String,  _
                    ByVal D_MAN As String,  _
                    ByVal R_MAN As String,  _
                    ByVal CLIENT As String,  _
                    ByVal CLIENT_TYPE As String,  _
                    ByVal CLIENT_CAT As String,  _
                    ByVal CLIENT_GD As String,  _
                    ByVal ZONE As String,  _
                    ByVal ROUTE As String,  _
                    ByVal AREA As String,  _
                    ByVal EXP_SUB_HEAD As String,  _
                    ByVal PRINTER As String,  _
                    ByVal RPT_TITLE As String,  _
                    ByVal RPT_WARRANTY As String) As NS_DEFAULTRow
            Dim rowNS_DEFAULTRow As NS_DEFAULTRow = CType(Me.NewRow,NS_DEFAULTRow)
            rowNS_DEFAULTRow.ItemArray = New Object() {ID, GROUP, BANK_ACC, S_MAN, P_MAN, D_MAN, R_MAN, CLIENT, CLIENT_TYPE, CLIENT_CAT, CLIENT_GD, ZONE, ROUTE, AREA, EXP_SUB_HEAD, PRINTER, RPT_TITLE, RPT_WARRANTY}
            Me.Rows.Add(rowNS_DEFAULTRow)
            Return rowNS_DEFAULTRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Decimal) As NS_DEFAULTRow
            Return CType(Me.Rows.Find(New Object() {ID}),NS_DEFAULTRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As NS_DEFAULTDataTable = CType(MyBase.Clone,NS_DEFAULTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New NS_DEFAULTDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnGROUP = MyBase.Columns("GROUP")
            Me.columnBANK_ACC = MyBase.Columns("BANK_ACC")
            Me.columnS_MAN = MyBase.Columns("S_MAN")
            Me.columnP_MAN = MyBase.Columns("P_MAN")
            Me.columnD_MAN = MyBase.Columns("D_MAN")
            Me.columnR_MAN = MyBase.Columns("R_MAN")
            Me.columnCLIENT = MyBase.Columns("CLIENT")
            Me.columnCLIENT_TYPE = MyBase.Columns("CLIENT_TYPE")
            Me.columnCLIENT_CAT = MyBase.Columns("CLIENT_CAT")
            Me.columnCLIENT_GD = MyBase.Columns("CLIENT_GD")
            Me.columnZONE = MyBase.Columns("ZONE")
            Me.columnROUTE = MyBase.Columns("ROUTE")
            Me.columnAREA = MyBase.Columns("AREA")
            Me.columnEXP_SUB_HEAD = MyBase.Columns("EXP_SUB_HEAD")
            Me.columnPRINTER = MyBase.Columns("PRINTER")
            Me.columnRPT_TITLE = MyBase.Columns("RPT_TITLE")
            Me.columnRPT_WARRANTY = MyBase.Columns("RPT_WARRANTY")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New System.Data.DataColumn("ID", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnGROUP = New System.Data.DataColumn("GROUP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGROUP)
            Me.columnBANK_ACC = New System.Data.DataColumn("BANK_ACC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBANK_ACC)
            Me.columnS_MAN = New System.Data.DataColumn("S_MAN", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnS_MAN)
            Me.columnP_MAN = New System.Data.DataColumn("P_MAN", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnP_MAN)
            Me.columnD_MAN = New System.Data.DataColumn("D_MAN", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnD_MAN)
            Me.columnR_MAN = New System.Data.DataColumn("R_MAN", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnR_MAN)
            Me.columnCLIENT = New System.Data.DataColumn("CLIENT", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT)
            Me.columnCLIENT_TYPE = New System.Data.DataColumn("CLIENT_TYPE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_TYPE)
            Me.columnCLIENT_CAT = New System.Data.DataColumn("CLIENT_CAT", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_CAT)
            Me.columnCLIENT_GD = New System.Data.DataColumn("CLIENT_GD", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_GD)
            Me.columnZONE = New System.Data.DataColumn("ZONE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZONE)
            Me.columnROUTE = New System.Data.DataColumn("ROUTE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROUTE)
            Me.columnAREA = New System.Data.DataColumn("AREA", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAREA)
            Me.columnEXP_SUB_HEAD = New System.Data.DataColumn("EXP_SUB_HEAD", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXP_SUB_HEAD)
            Me.columnPRINTER = New System.Data.DataColumn("PRINTER", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRINTER)
            Me.columnRPT_TITLE = New System.Data.DataColumn("RPT_TITLE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPT_TITLE)
            Me.columnRPT_WARRANTY = New System.Data.DataColumn("RPT_WARRANTY", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPT_WARRANTY)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnGROUP.MaxLength = 50
            Me.columnBANK_ACC.MaxLength = 50
            Me.columnS_MAN.MaxLength = 50
            Me.columnP_MAN.MaxLength = 50
            Me.columnD_MAN.MaxLength = 50
            Me.columnR_MAN.MaxLength = 50
            Me.columnCLIENT.MaxLength = 50
            Me.columnCLIENT_TYPE.MaxLength = 50
            Me.columnCLIENT_CAT.MaxLength = 50
            Me.columnCLIENT_GD.MaxLength = 50
            Me.columnZONE.MaxLength = 50
            Me.columnROUTE.MaxLength = 50
            Me.columnAREA.MaxLength = 50
            Me.columnEXP_SUB_HEAD.MaxLength = 50
            Me.columnPRINTER.MaxLength = 50
            Me.columnRPT_TITLE.MaxLength = 50
            Me.columnRPT_WARRANTY.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNS_DEFAULTRow() As NS_DEFAULTRow
            Return CType(Me.NewRow,NS_DEFAULTRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New NS_DEFAULTRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(NS_DEFAULTRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NS_DEFAULTRowChangedEvent) Is Nothing) Then
                RaiseEvent NS_DEFAULTRowChanged(Me, New NS_DEFAULTRowChangeEvent(CType(e.Row,NS_DEFAULTRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NS_DEFAULTRowChangingEvent) Is Nothing) Then
                RaiseEvent NS_DEFAULTRowChanging(Me, New NS_DEFAULTRowChangeEvent(CType(e.Row,NS_DEFAULTRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NS_DEFAULTRowDeletedEvent) Is Nothing) Then
                RaiseEvent NS_DEFAULTRowDeleted(Me, New NS_DEFAULTRowChangeEvent(CType(e.Row,NS_DEFAULTRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NS_DEFAULTRowDeletingEvent) Is Nothing) Then
                RaiseEvent NS_DEFAULTRowDeleting(Me, New NS_DEFAULTRowChangeEvent(CType(e.Row,NS_DEFAULTRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNS_DEFAULTRow(ByVal row As NS_DEFAULTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsNS_DEFAULT = New dsNS_DEFAULT
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NS_DEFAULTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NS_DEFAULTRow
        Inherits System.Data.DataRow
        
        Private tableNS_DEFAULT As NS_DEFAULTDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNS_DEFAULT = CType(Me.Table,NS_DEFAULTDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Decimal
            Get
                Return CType(Me(Me.tableNS_DEFAULT.IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableNS_DEFAULT.IDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GROUP() As String
            Get
                Try 
                    Return CType(Me(Me.tableNS_DEFAULT.GROUPColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'GROUP' in table 'NS_DEFAULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNS_DEFAULT.GROUPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BANK_ACC() As String
            Get
                Try 
                    Return CType(Me(Me.tableNS_DEFAULT.BANK_ACCColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'BANK_ACC' in table 'NS_DEFAULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNS_DEFAULT.BANK_ACCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property S_MAN() As String
            Get
                Try 
                    Return CType(Me(Me.tableNS_DEFAULT.S_MANColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'S_MAN' in table 'NS_DEFAULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNS_DEFAULT.S_MANColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property P_MAN() As String
            Get
                Try 
                    Return CType(Me(Me.tableNS_DEFAULT.P_MANColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'P_MAN' in table 'NS_DEFAULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNS_DEFAULT.P_MANColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property D_MAN() As String
            Get
                Try 
                    Return CType(Me(Me.tableNS_DEFAULT.D_MANColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'D_MAN' in table 'NS_DEFAULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNS_DEFAULT.D_MANColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property R_MAN() As String
            Get
                Try 
                    Return CType(Me(Me.tableNS_DEFAULT.R_MANColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'R_MAN' in table 'NS_DEFAULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNS_DEFAULT.R_MANColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableNS_DEFAULT.CLIENTColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'CLIENT' in table 'NS_DEFAULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNS_DEFAULT.CLIENTColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableNS_DEFAULT.CLIENT_TYPEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'CLIENT_TYPE' in table 'NS_DEFAULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNS_DEFAULT.CLIENT_TYPEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_CAT() As String
            Get
                Try 
                    Return CType(Me(Me.tableNS_DEFAULT.CLIENT_CATColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'CLIENT_CAT' in table 'NS_DEFAULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNS_DEFAULT.CLIENT_CATColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_GD() As String
            Get
                Try 
                    Return CType(Me(Me.tableNS_DEFAULT.CLIENT_GDColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'CLIENT_GD' in table 'NS_DEFAULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNS_DEFAULT.CLIENT_GDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ZONE() As String
            Get
                Try 
                    Return CType(Me(Me.tableNS_DEFAULT.ZONEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ZONE' in table 'NS_DEFAULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNS_DEFAULT.ZONEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ROUTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableNS_DEFAULT.ROUTEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ROUTE' in table 'NS_DEFAULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNS_DEFAULT.ROUTEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AREA() As String
            Get
                Try 
                    Return CType(Me(Me.tableNS_DEFAULT.AREAColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'AREA' in table 'NS_DEFAULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNS_DEFAULT.AREAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXP_SUB_HEAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableNS_DEFAULT.EXP_SUB_HEADColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'EXP_SUB_HEAD' in table 'NS_DEFAULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNS_DEFAULT.EXP_SUB_HEADColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRINTER() As String
            Get
                Try 
                    Return CType(Me(Me.tableNS_DEFAULT.PRINTERColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'PRINTER' in table 'NS_DEFAULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNS_DEFAULT.PRINTERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RPT_TITLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableNS_DEFAULT.RPT_TITLEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'RPT_TITLE' in table 'NS_DEFAULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNS_DEFAULT.RPT_TITLEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RPT_WARRANTY() As String
            Get
                Try 
                    Return CType(Me(Me.tableNS_DEFAULT.RPT_WARRANTYColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'RPT_WARRANTY' in table 'NS_DEFAULT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNS_DEFAULT.RPT_WARRANTYColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGROUPNull() As Boolean
            Return Me.IsNull(Me.tableNS_DEFAULT.GROUPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGROUPNull()
            Me(Me.tableNS_DEFAULT.GROUPColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBANK_ACCNull() As Boolean
            Return Me.IsNull(Me.tableNS_DEFAULT.BANK_ACCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBANK_ACCNull()
            Me(Me.tableNS_DEFAULT.BANK_ACCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsS_MANNull() As Boolean
            Return Me.IsNull(Me.tableNS_DEFAULT.S_MANColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetS_MANNull()
            Me(Me.tableNS_DEFAULT.S_MANColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsP_MANNull() As Boolean
            Return Me.IsNull(Me.tableNS_DEFAULT.P_MANColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetP_MANNull()
            Me(Me.tableNS_DEFAULT.P_MANColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsD_MANNull() As Boolean
            Return Me.IsNull(Me.tableNS_DEFAULT.D_MANColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetD_MANNull()
            Me(Me.tableNS_DEFAULT.D_MANColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsR_MANNull() As Boolean
            Return Me.IsNull(Me.tableNS_DEFAULT.R_MANColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetR_MANNull()
            Me(Me.tableNS_DEFAULT.R_MANColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTNull() As Boolean
            Return Me.IsNull(Me.tableNS_DEFAULT.CLIENTColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTNull()
            Me(Me.tableNS_DEFAULT.CLIENTColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_TYPENull() As Boolean
            Return Me.IsNull(Me.tableNS_DEFAULT.CLIENT_TYPEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_TYPENull()
            Me(Me.tableNS_DEFAULT.CLIENT_TYPEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_CATNull() As Boolean
            Return Me.IsNull(Me.tableNS_DEFAULT.CLIENT_CATColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_CATNull()
            Me(Me.tableNS_DEFAULT.CLIENT_CATColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_GDNull() As Boolean
            Return Me.IsNull(Me.tableNS_DEFAULT.CLIENT_GDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_GDNull()
            Me(Me.tableNS_DEFAULT.CLIENT_GDColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsZONENull() As Boolean
            Return Me.IsNull(Me.tableNS_DEFAULT.ZONEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetZONENull()
            Me(Me.tableNS_DEFAULT.ZONEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsROUTENull() As Boolean
            Return Me.IsNull(Me.tableNS_DEFAULT.ROUTEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetROUTENull()
            Me(Me.tableNS_DEFAULT.ROUTEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAREANull() As Boolean
            Return Me.IsNull(Me.tableNS_DEFAULT.AREAColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAREANull()
            Me(Me.tableNS_DEFAULT.AREAColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXP_SUB_HEADNull() As Boolean
            Return Me.IsNull(Me.tableNS_DEFAULT.EXP_SUB_HEADColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXP_SUB_HEADNull()
            Me(Me.tableNS_DEFAULT.EXP_SUB_HEADColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRINTERNull() As Boolean
            Return Me.IsNull(Me.tableNS_DEFAULT.PRINTERColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRINTERNull()
            Me(Me.tableNS_DEFAULT.PRINTERColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRPT_TITLENull() As Boolean
            Return Me.IsNull(Me.tableNS_DEFAULT.RPT_TITLEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRPT_TITLENull()
            Me(Me.tableNS_DEFAULT.RPT_TITLEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRPT_WARRANTYNull() As Boolean
            Return Me.IsNull(Me.tableNS_DEFAULT.RPT_WARRANTYColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRPT_WARRANTYNull()
            Me(Me.tableNS_DEFAULT.RPT_WARRANTYColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NS_DEFAULTRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As NS_DEFAULTRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NS_DEFAULTRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NS_DEFAULTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
