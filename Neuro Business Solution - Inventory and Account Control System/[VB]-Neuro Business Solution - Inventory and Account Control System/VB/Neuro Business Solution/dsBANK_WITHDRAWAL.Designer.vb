'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("dsBANK_WITHDRAWAL"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsBANK_WITHDRAWAL
    Inherits System.Data.DataSet
    
    Private tableV_BANK_WITHDRAWALS As V_BANK_WITHDRAWALSDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("V_BANK_WITHDRAWALS")) Is Nothing) Then
                MyBase.Tables.Add(New V_BANK_WITHDRAWALSDataTable(ds.Tables("V_BANK_WITHDRAWALS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property V_BANK_WITHDRAWALS() As V_BANK_WITHDRAWALSDataTable
        Get
            Return Me.tableV_BANK_WITHDRAWALS
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As dsBANK_WITHDRAWAL = CType(MyBase.Clone,dsBANK_WITHDRAWAL)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("V_BANK_WITHDRAWALS")) Is Nothing) Then
                MyBase.Tables.Add(New V_BANK_WITHDRAWALSDataTable(ds.Tables("V_BANK_WITHDRAWALS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableV_BANK_WITHDRAWALS = CType(MyBase.Tables("V_BANK_WITHDRAWALS"),V_BANK_WITHDRAWALSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableV_BANK_WITHDRAWALS) Is Nothing) Then
                Me.tableV_BANK_WITHDRAWALS.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsBANK_WITHDRAWAL"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsBANK_WITHDRAWAL.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableV_BANK_WITHDRAWALS = New V_BANK_WITHDRAWALSDataTable
        MyBase.Tables.Add(Me.tableV_BANK_WITHDRAWALS)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeV_BANK_WITHDRAWALS() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsBANK_WITHDRAWAL = New dsBANK_WITHDRAWAL
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub V_BANK_WITHDRAWALSRowChangeEventHandler(ByVal sender As Object, ByVal e As V_BANK_WITHDRAWALSRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class V_BANK_WITHDRAWALSDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As System.Data.DataColumn
        
        Private columnCHQ_NO As System.Data.DataColumn
        
        Private columnCHQ_TYPE As System.Data.DataColumn
        
        Private columnBANK_AMT As System.Data.DataColumn
        
        Private columndDATE As System.Data.DataColumn
        
        Private columnsDESC As System.Data.DataColumn
        
        Private columnBANK_ACC As System.Data.DataColumn
        
        Private columnUSER_NAME As System.Data.DataColumn
        
        Private columnGROUP_NAME As System.Data.DataColumn
        
        Private columnGROUP_ID As System.Data.DataColumn
        
        Private columnEMP_NAME As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "V_BANK_WITHDRAWALS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHQ_NOColumn() As System.Data.DataColumn
            Get
                Return Me.columnCHQ_NO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHQ_TYPEColumn() As System.Data.DataColumn
            Get
                Return Me.columnCHQ_TYPE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BANK_AMTColumn() As System.Data.DataColumn
            Get
                Return Me.columnBANK_AMT
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dDATEColumn() As System.Data.DataColumn
            Get
                Return Me.columndDATE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sDESCColumn() As System.Data.DataColumn
            Get
                Return Me.columnsDESC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BANK_ACCColumn() As System.Data.DataColumn
            Get
                Return Me.columnBANK_ACC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USER_NAMEColumn() As System.Data.DataColumn
            Get
                Return Me.columnUSER_NAME
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GROUP_NAMEColumn() As System.Data.DataColumn
            Get
                Return Me.columnGROUP_NAME
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GROUP_IDColumn() As System.Data.DataColumn
            Get
                Return Me.columnGROUP_ID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMP_NAMEColumn() As System.Data.DataColumn
            Get
                Return Me.columnEMP_NAME
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As V_BANK_WITHDRAWALSRow
            Get
                Return CType(Me.Rows(index),V_BANK_WITHDRAWALSRow)
            End Get
        End Property
        
        Public Event V_BANK_WITHDRAWALSRowChanging As V_BANK_WITHDRAWALSRowChangeEventHandler
        
        Public Event V_BANK_WITHDRAWALSRowChanged As V_BANK_WITHDRAWALSRowChangeEventHandler
        
        Public Event V_BANK_WITHDRAWALSRowDeleting As V_BANK_WITHDRAWALSRowChangeEventHandler
        
        Public Event V_BANK_WITHDRAWALSRowDeleted As V_BANK_WITHDRAWALSRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddV_BANK_WITHDRAWALSRow(ByVal row As V_BANK_WITHDRAWALSRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddV_BANK_WITHDRAWALSRow(ByVal CHQ_NO As String, ByVal CHQ_TYPE As String, ByVal BANK_AMT As Decimal, ByVal dDATE As Date, ByVal sDESC As String, ByVal BANK_ACC As String, ByVal USER_NAME As String, ByVal GROUP_NAME As String, ByVal EMP_NAME As String) As V_BANK_WITHDRAWALSRow
            Dim rowV_BANK_WITHDRAWALSRow As V_BANK_WITHDRAWALSRow = CType(Me.NewRow,V_BANK_WITHDRAWALSRow)
            rowV_BANK_WITHDRAWALSRow.ItemArray = New Object() {Nothing, CHQ_NO, CHQ_TYPE, BANK_AMT, dDATE, sDESC, BANK_ACC, USER_NAME, GROUP_NAME, Nothing, EMP_NAME}
            Me.Rows.Add(rowV_BANK_WITHDRAWALSRow)
            Return rowV_BANK_WITHDRAWALSRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As V_BANK_WITHDRAWALSDataTable = CType(MyBase.Clone,V_BANK_WITHDRAWALSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New V_BANK_WITHDRAWALSDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnCHQ_NO = MyBase.Columns("CHQ_NO")
            Me.columnCHQ_TYPE = MyBase.Columns("CHQ_TYPE")
            Me.columnBANK_AMT = MyBase.Columns("BANK_AMT")
            Me.columndDATE = MyBase.Columns("dDATE")
            Me.columnsDESC = MyBase.Columns("sDESC")
            Me.columnBANK_ACC = MyBase.Columns("BANK_ACC")
            Me.columnUSER_NAME = MyBase.Columns("USER_NAME")
            Me.columnGROUP_NAME = MyBase.Columns("GROUP_NAME")
            Me.columnGROUP_ID = MyBase.Columns("GROUP_ID")
            Me.columnEMP_NAME = MyBase.Columns("EMP_NAME")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New System.Data.DataColumn("ID", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnCHQ_NO = New System.Data.DataColumn("CHQ_NO", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHQ_NO)
            Me.columnCHQ_TYPE = New System.Data.DataColumn("CHQ_TYPE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHQ_TYPE)
            Me.columnBANK_AMT = New System.Data.DataColumn("BANK_AMT", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBANK_AMT)
            Me.columndDATE = New System.Data.DataColumn("dDATE", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndDATE)
            Me.columnsDESC = New System.Data.DataColumn("sDESC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsDESC)
            Me.columnBANK_ACC = New System.Data.DataColumn("BANK_ACC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBANK_ACC)
            Me.columnUSER_NAME = New System.Data.DataColumn("USER_NAME", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSER_NAME)
            Me.columnGROUP_NAME = New System.Data.DataColumn("GROUP_NAME", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGROUP_NAME)
            Me.columnGROUP_ID = New System.Data.DataColumn("GROUP_ID", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGROUP_ID)
            Me.columnEMP_NAME = New System.Data.DataColumn("EMP_NAME", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMP_NAME)
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnCHQ_NO.AllowDBNull = false
            Me.columnCHQ_NO.MaxLength = 50
            Me.columnCHQ_TYPE.AllowDBNull = false
            Me.columnCHQ_TYPE.MaxLength = 25
            Me.columnBANK_AMT.ReadOnly = true
            Me.columndDATE.AllowDBNull = false
            Me.columnsDESC.MaxLength = 100
            Me.columnBANK_ACC.AllowDBNull = false
            Me.columnBANK_ACC.MaxLength = 50
            Me.columnUSER_NAME.MaxLength = 50
            Me.columnGROUP_NAME.MaxLength = 50
            Me.columnGROUP_ID.AutoIncrement = true
            Me.columnGROUP_ID.AllowDBNull = false
            Me.columnGROUP_ID.ReadOnly = true
            Me.columnEMP_NAME.AllowDBNull = false
            Me.columnEMP_NAME.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewV_BANK_WITHDRAWALSRow() As V_BANK_WITHDRAWALSRow
            Return CType(Me.NewRow,V_BANK_WITHDRAWALSRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New V_BANK_WITHDRAWALSRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(V_BANK_WITHDRAWALSRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.V_BANK_WITHDRAWALSRowChangedEvent) Is Nothing) Then
                RaiseEvent V_BANK_WITHDRAWALSRowChanged(Me, New V_BANK_WITHDRAWALSRowChangeEvent(CType(e.Row,V_BANK_WITHDRAWALSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.V_BANK_WITHDRAWALSRowChangingEvent) Is Nothing) Then
                RaiseEvent V_BANK_WITHDRAWALSRowChanging(Me, New V_BANK_WITHDRAWALSRowChangeEvent(CType(e.Row,V_BANK_WITHDRAWALSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.V_BANK_WITHDRAWALSRowDeletedEvent) Is Nothing) Then
                RaiseEvent V_BANK_WITHDRAWALSRowDeleted(Me, New V_BANK_WITHDRAWALSRowChangeEvent(CType(e.Row,V_BANK_WITHDRAWALSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.V_BANK_WITHDRAWALSRowDeletingEvent) Is Nothing) Then
                RaiseEvent V_BANK_WITHDRAWALSRowDeleting(Me, New V_BANK_WITHDRAWALSRowChangeEvent(CType(e.Row,V_BANK_WITHDRAWALSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveV_BANK_WITHDRAWALSRow(ByVal row As V_BANK_WITHDRAWALSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsBANK_WITHDRAWAL = New dsBANK_WITHDRAWAL
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "V_BANK_WITHDRAWALSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class V_BANK_WITHDRAWALSRow
        Inherits System.Data.DataRow
        
        Private tableV_BANK_WITHDRAWALS As V_BANK_WITHDRAWALSDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableV_BANK_WITHDRAWALS = CType(Me.Table,V_BANK_WITHDRAWALSDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Decimal
            Get
                Return CType(Me(Me.tableV_BANK_WITHDRAWALS.IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_BANK_WITHDRAWALS.IDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHQ_NO() As String
            Get
                Return CType(Me(Me.tableV_BANK_WITHDRAWALS.CHQ_NOColumn),String)
            End Get
            Set
                Me(Me.tableV_BANK_WITHDRAWALS.CHQ_NOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHQ_TYPE() As String
            Get
                Return CType(Me(Me.tableV_BANK_WITHDRAWALS.CHQ_TYPEColumn),String)
            End Get
            Set
                Me(Me.tableV_BANK_WITHDRAWALS.CHQ_TYPEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BANK_AMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_BANK_WITHDRAWALS.BANK_AMTColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'BANK_AMT' in table 'V_BANK_WITHDRAWALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_BANK_WITHDRAWALS.BANK_AMTColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dDATE() As Date
            Get
                Return CType(Me(Me.tableV_BANK_WITHDRAWALS.dDATEColumn),Date)
            End Get
            Set
                Me(Me.tableV_BANK_WITHDRAWALS.dDATEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sDESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_BANK_WITHDRAWALS.sDESCColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'sDESC' in table 'V_BANK_WITHDRAWALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_BANK_WITHDRAWALS.sDESCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BANK_ACC() As String
            Get
                Return CType(Me(Me.tableV_BANK_WITHDRAWALS.BANK_ACCColumn),String)
            End Get
            Set
                Me(Me.tableV_BANK_WITHDRAWALS.BANK_ACCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USER_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_BANK_WITHDRAWALS.USER_NAMEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'USER_NAME' in table 'V_BANK_WITHDRAWALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_BANK_WITHDRAWALS.USER_NAMEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GROUP_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_BANK_WITHDRAWALS.GROUP_NAMEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'GROUP_NAME' in table 'V_BANK_WITHDRAWALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_BANK_WITHDRAWALS.GROUP_NAMEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GROUP_ID() As Decimal
            Get
                Return CType(Me(Me.tableV_BANK_WITHDRAWALS.GROUP_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_BANK_WITHDRAWALS.GROUP_IDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMP_NAME() As String
            Get
                Return CType(Me(Me.tableV_BANK_WITHDRAWALS.EMP_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableV_BANK_WITHDRAWALS.EMP_NAMEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBANK_AMTNull() As Boolean
            Return Me.IsNull(Me.tableV_BANK_WITHDRAWALS.BANK_AMTColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBANK_AMTNull()
            Me(Me.tableV_BANK_WITHDRAWALS.BANK_AMTColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssDESCNull() As Boolean
            Return Me.IsNull(Me.tableV_BANK_WITHDRAWALS.sDESCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsDESCNull()
            Me(Me.tableV_BANK_WITHDRAWALS.sDESCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSER_NAMENull() As Boolean
            Return Me.IsNull(Me.tableV_BANK_WITHDRAWALS.USER_NAMEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSER_NAMENull()
            Me(Me.tableV_BANK_WITHDRAWALS.USER_NAMEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGROUP_NAMENull() As Boolean
            Return Me.IsNull(Me.tableV_BANK_WITHDRAWALS.GROUP_NAMEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGROUP_NAMENull()
            Me(Me.tableV_BANK_WITHDRAWALS.GROUP_NAMEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class V_BANK_WITHDRAWALSRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As V_BANK_WITHDRAWALSRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As V_BANK_WITHDRAWALSRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As V_BANK_WITHDRAWALSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
