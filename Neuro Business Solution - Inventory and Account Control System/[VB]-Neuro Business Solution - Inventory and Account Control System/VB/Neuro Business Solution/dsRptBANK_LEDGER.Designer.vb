'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1433
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsRptBANK_LEDGER"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsRptBANK_LEDGER
    Inherits Global.System.Data.DataSet
    
    Private tablerptBANK_LEDGER As rptBANK_LEDGERDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("rptBANK_LEDGER")) Is Nothing) Then
                MyBase.Tables.Add(New rptBANK_LEDGERDataTable(ds.Tables("rptBANK_LEDGER")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property rptBANK_LEDGER() As rptBANK_LEDGERDataTable
        Get
            Return Me.tablerptBANK_LEDGER
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsRptBANK_LEDGER = CType(MyBase.Clone,dsRptBANK_LEDGER)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("rptBANK_LEDGER")) Is Nothing) Then
                MyBase.Tables.Add(New rptBANK_LEDGERDataTable(ds.Tables("rptBANK_LEDGER")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablerptBANK_LEDGER = CType(MyBase.Tables("rptBANK_LEDGER"),rptBANK_LEDGERDataTable)
        If (initTable = true) Then
            If (Not (Me.tablerptBANK_LEDGER) Is Nothing) Then
                Me.tablerptBANK_LEDGER.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsRptBANK_LEDGER"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsRptBANK_LEDGER.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablerptBANK_LEDGER = New rptBANK_LEDGERDataTable
        MyBase.Tables.Add(Me.tablerptBANK_LEDGER)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializerptBANK_LEDGER() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsRptBANK_LEDGER = New dsRptBANK_LEDGER
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub rptBANK_LEDGERRowChangeEventHandler(ByVal sender As Object, ByVal e As rptBANK_LEDGERRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class rptBANK_LEDGERDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnGROUP_ID As Global.System.Data.DataColumn
        
        Private columnGP_NAME As Global.System.Data.DataColumn
        
        Private columnTR_TYPE As Global.System.Data.DataColumn
        
        Private columnTR_DESC As Global.System.Data.DataColumn
        
        Private columnBK_ACC As Global.System.Data.DataColumn
        
        Private columnBK_NAME As Global.System.Data.DataColumn
        
        Private columnBR_NAME As Global.System.Data.DataColumn
        
        Private columnBR_CODE As Global.System.Data.DataColumn
        
        Private columnBK_ADD As Global.System.Data.DataColumn
        
        Private columnBK_PH As Global.System.Data.DataColumn
        
        Private columndDATE As Global.System.Data.DataColumn
        
        Private columnTR_ID As Global.System.Data.DataColumn
        
        Private columnDr As Global.System.Data.DataColumn
        
        Private columnCr As Global.System.Data.DataColumn
        
        Private columnB_NAME As Global.System.Data.DataColumn
        
        Private columnB_ADD As Global.System.Data.DataColumn
        
        Private columnB_PH As Global.System.Data.DataColumn
        
        Private columnB_CELL As Global.System.Data.DataColumn
        
        Private columnB_FAX As Global.System.Data.DataColumn
        
        Private columnBAL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "rptBANK_LEDGER"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GROUP_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGROUP_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GP_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGP_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TR_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTR_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TR_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTR_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BK_ACCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBK_ACC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BK_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBK_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BR_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBR_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BR_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBR_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BK_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBK_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BK_PHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBK_PH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TR_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTR_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_PHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_PH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_CELLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_CELL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_FAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_FAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As rptBANK_LEDGERRow
            Get
                Return CType(Me.Rows(index),rptBANK_LEDGERRow)
            End Get
        End Property
        
        Public Event rptBANK_LEDGERRowChanging As rptBANK_LEDGERRowChangeEventHandler
        
        Public Event rptBANK_LEDGERRowChanged As rptBANK_LEDGERRowChangeEventHandler
        
        Public Event rptBANK_LEDGERRowDeleting As rptBANK_LEDGERRowChangeEventHandler
        
        Public Event rptBANK_LEDGERRowDeleted As rptBANK_LEDGERRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddrptBANK_LEDGERRow(ByVal row As rptBANK_LEDGERRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddrptBANK_LEDGERRow( _
                    ByVal GROUP_ID As Decimal,  _
                    ByVal GP_NAME As String,  _
                    ByVal TR_TYPE As String,  _
                    ByVal TR_DESC As String,  _
                    ByVal BK_ACC As String,  _
                    ByVal BK_NAME As String,  _
                    ByVal BR_NAME As String,  _
                    ByVal BR_CODE As String,  _
                    ByVal BK_ADD As String,  _
                    ByVal BK_PH As String,  _
                    ByVal dDATE As Date,  _
                    ByVal TR_ID As Decimal,  _
                    ByVal Dr As Decimal,  _
                    ByVal Cr As Decimal,  _
                    ByVal B_NAME As String,  _
                    ByVal B_ADD As String,  _
                    ByVal B_PH As String,  _
                    ByVal B_CELL As String,  _
                    ByVal B_FAX As String,  _
                    ByVal BAL As Decimal) As rptBANK_LEDGERRow
            Dim rowrptBANK_LEDGERRow As rptBANK_LEDGERRow = CType(Me.NewRow,rptBANK_LEDGERRow)
            Dim columnValuesArray() As Object = New Object() {GROUP_ID, GP_NAME, TR_TYPE, TR_DESC, BK_ACC, BK_NAME, BR_NAME, BR_CODE, BK_ADD, BK_PH, dDATE, TR_ID, Dr, Cr, B_NAME, B_ADD, B_PH, B_CELL, B_FAX, BAL}
            rowrptBANK_LEDGERRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowrptBANK_LEDGERRow)
            Return rowrptBANK_LEDGERRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As rptBANK_LEDGERDataTable = CType(MyBase.Clone,rptBANK_LEDGERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New rptBANK_LEDGERDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnGROUP_ID = MyBase.Columns("GROUP_ID")
            Me.columnGP_NAME = MyBase.Columns("GP_NAME")
            Me.columnTR_TYPE = MyBase.Columns("TR_TYPE")
            Me.columnTR_DESC = MyBase.Columns("TR_DESC")
            Me.columnBK_ACC = MyBase.Columns("BK_ACC")
            Me.columnBK_NAME = MyBase.Columns("BK_NAME")
            Me.columnBR_NAME = MyBase.Columns("BR_NAME")
            Me.columnBR_CODE = MyBase.Columns("BR_CODE")
            Me.columnBK_ADD = MyBase.Columns("BK_ADD")
            Me.columnBK_PH = MyBase.Columns("BK_PH")
            Me.columndDATE = MyBase.Columns("dDATE")
            Me.columnTR_ID = MyBase.Columns("TR_ID")
            Me.columnDr = MyBase.Columns("Dr")
            Me.columnCr = MyBase.Columns("Cr")
            Me.columnB_NAME = MyBase.Columns("B_NAME")
            Me.columnB_ADD = MyBase.Columns("B_ADD")
            Me.columnB_PH = MyBase.Columns("B_PH")
            Me.columnB_CELL = MyBase.Columns("B_CELL")
            Me.columnB_FAX = MyBase.Columns("B_FAX")
            Me.columnBAL = MyBase.Columns("BAL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnGROUP_ID = New Global.System.Data.DataColumn("GROUP_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGROUP_ID)
            Me.columnGP_NAME = New Global.System.Data.DataColumn("GP_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGP_NAME)
            Me.columnTR_TYPE = New Global.System.Data.DataColumn("TR_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTR_TYPE)
            Me.columnTR_DESC = New Global.System.Data.DataColumn("TR_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTR_DESC)
            Me.columnBK_ACC = New Global.System.Data.DataColumn("BK_ACC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBK_ACC)
            Me.columnBK_NAME = New Global.System.Data.DataColumn("BK_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBK_NAME)
            Me.columnBR_NAME = New Global.System.Data.DataColumn("BR_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBR_NAME)
            Me.columnBR_CODE = New Global.System.Data.DataColumn("BR_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBR_CODE)
            Me.columnBK_ADD = New Global.System.Data.DataColumn("BK_ADD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBK_ADD)
            Me.columnBK_PH = New Global.System.Data.DataColumn("BK_PH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBK_PH)
            Me.columndDATE = New Global.System.Data.DataColumn("dDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndDATE)
            Me.columnTR_ID = New Global.System.Data.DataColumn("TR_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTR_ID)
            Me.columnDr = New Global.System.Data.DataColumn("Dr", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDr)
            Me.columnCr = New Global.System.Data.DataColumn("Cr", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCr)
            Me.columnB_NAME = New Global.System.Data.DataColumn("B_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_NAME)
            Me.columnB_ADD = New Global.System.Data.DataColumn("B_ADD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_ADD)
            Me.columnB_PH = New Global.System.Data.DataColumn("B_PH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_PH)
            Me.columnB_CELL = New Global.System.Data.DataColumn("B_CELL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_CELL)
            Me.columnB_FAX = New Global.System.Data.DataColumn("B_FAX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_FAX)
            Me.columnBAL = New Global.System.Data.DataColumn("BAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBAL)
            Me.columnGP_NAME.MaxLength = 50
            Me.columnTR_TYPE.MaxLength = 3
            Me.columnTR_DESC.MaxLength = 100
            Me.columnBK_ACC.MaxLength = 50
            Me.columnBK_NAME.MaxLength = 50
            Me.columnBR_NAME.MaxLength = 100
            Me.columnBR_CODE.MaxLength = 50
            Me.columnBK_ADD.MaxLength = 200
            Me.columnBK_PH.MaxLength = 50
            Me.columnB_NAME.MaxLength = 50
            Me.columnB_ADD.MaxLength = 150
            Me.columnB_PH.MaxLength = 50
            Me.columnB_CELL.MaxLength = 50
            Me.columnB_FAX.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewrptBANK_LEDGERRow() As rptBANK_LEDGERRow
            Return CType(Me.NewRow,rptBANK_LEDGERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New rptBANK_LEDGERRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(rptBANK_LEDGERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.rptBANK_LEDGERRowChangedEvent) Is Nothing) Then
                RaiseEvent rptBANK_LEDGERRowChanged(Me, New rptBANK_LEDGERRowChangeEvent(CType(e.Row,rptBANK_LEDGERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.rptBANK_LEDGERRowChangingEvent) Is Nothing) Then
                RaiseEvent rptBANK_LEDGERRowChanging(Me, New rptBANK_LEDGERRowChangeEvent(CType(e.Row,rptBANK_LEDGERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.rptBANK_LEDGERRowDeletedEvent) Is Nothing) Then
                RaiseEvent rptBANK_LEDGERRowDeleted(Me, New rptBANK_LEDGERRowChangeEvent(CType(e.Row,rptBANK_LEDGERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.rptBANK_LEDGERRowDeletingEvent) Is Nothing) Then
                RaiseEvent rptBANK_LEDGERRowDeleting(Me, New rptBANK_LEDGERRowChangeEvent(CType(e.Row,rptBANK_LEDGERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoverptBANK_LEDGERRow(ByVal row As rptBANK_LEDGERRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRptBANK_LEDGER = New dsRptBANK_LEDGER
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "rptBANK_LEDGERDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class rptBANK_LEDGERRow
        Inherits Global.System.Data.DataRow
        
        Private tablerptBANK_LEDGER As rptBANK_LEDGERDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablerptBANK_LEDGER = CType(Me.Table,rptBANK_LEDGERDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GROUP_ID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablerptBANK_LEDGER.GROUP_IDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GROUP_ID' in table 'rptBANK_LEDGER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerptBANK_LEDGER.GROUP_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GP_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tablerptBANK_LEDGER.GP_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GP_NAME' in table 'rptBANK_LEDGER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerptBANK_LEDGER.GP_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TR_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tablerptBANK_LEDGER.TR_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TR_TYPE' in table 'rptBANK_LEDGER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerptBANK_LEDGER.TR_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TR_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablerptBANK_LEDGER.TR_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TR_DESC' in table 'rptBANK_LEDGER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerptBANK_LEDGER.TR_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BK_ACC() As String
            Get
                Try 
                    Return CType(Me(Me.tablerptBANK_LEDGER.BK_ACCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BK_ACC' in table 'rptBANK_LEDGER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerptBANK_LEDGER.BK_ACCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BK_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tablerptBANK_LEDGER.BK_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BK_NAME' in table 'rptBANK_LEDGER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerptBANK_LEDGER.BK_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BR_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tablerptBANK_LEDGER.BR_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BR_NAME' in table 'rptBANK_LEDGER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerptBANK_LEDGER.BR_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BR_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tablerptBANK_LEDGER.BR_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BR_CODE' in table 'rptBANK_LEDGER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerptBANK_LEDGER.BR_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BK_ADD() As String
            Get
                Try 
                    Return CType(Me(Me.tablerptBANK_LEDGER.BK_ADDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BK_ADD' in table 'rptBANK_LEDGER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerptBANK_LEDGER.BK_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BK_PH() As String
            Get
                Try 
                    Return CType(Me(Me.tablerptBANK_LEDGER.BK_PHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BK_PH' in table 'rptBANK_LEDGER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerptBANK_LEDGER.BK_PHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tablerptBANK_LEDGER.dDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'dDATE' in table 'rptBANK_LEDGER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerptBANK_LEDGER.dDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TR_ID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablerptBANK_LEDGER.TR_IDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TR_ID' in table 'rptBANK_LEDGER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerptBANK_LEDGER.TR_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dr() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablerptBANK_LEDGER.DrColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dr' in table 'rptBANK_LEDGER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerptBANK_LEDGER.DrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cr() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablerptBANK_LEDGER.CrColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cr' in table 'rptBANK_LEDGER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerptBANK_LEDGER.CrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tablerptBANK_LEDGER.B_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_NAME' in table 'rptBANK_LEDGER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerptBANK_LEDGER.B_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_ADD() As String
            Get
                Try 
                    Return CType(Me(Me.tablerptBANK_LEDGER.B_ADDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_ADD' in table 'rptBANK_LEDGER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerptBANK_LEDGER.B_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_PH() As String
            Get
                Try 
                    Return CType(Me(Me.tablerptBANK_LEDGER.B_PHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_PH' in table 'rptBANK_LEDGER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerptBANK_LEDGER.B_PHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_CELL() As String
            Get
                Try 
                    Return CType(Me(Me.tablerptBANK_LEDGER.B_CELLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_CELL' in table 'rptBANK_LEDGER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerptBANK_LEDGER.B_CELLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_FAX() As String
            Get
                Try 
                    Return CType(Me(Me.tablerptBANK_LEDGER.B_FAXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_FAX' in table 'rptBANK_LEDGER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerptBANK_LEDGER.B_FAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablerptBANK_LEDGER.BALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BAL' in table 'rptBANK_LEDGER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerptBANK_LEDGER.BALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGROUP_IDNull() As Boolean
            Return Me.IsNull(Me.tablerptBANK_LEDGER.GROUP_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGROUP_IDNull()
            Me(Me.tablerptBANK_LEDGER.GROUP_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGP_NAMENull() As Boolean
            Return Me.IsNull(Me.tablerptBANK_LEDGER.GP_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGP_NAMENull()
            Me(Me.tablerptBANK_LEDGER.GP_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTR_TYPENull() As Boolean
            Return Me.IsNull(Me.tablerptBANK_LEDGER.TR_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTR_TYPENull()
            Me(Me.tablerptBANK_LEDGER.TR_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTR_DESCNull() As Boolean
            Return Me.IsNull(Me.tablerptBANK_LEDGER.TR_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTR_DESCNull()
            Me(Me.tablerptBANK_LEDGER.TR_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBK_ACCNull() As Boolean
            Return Me.IsNull(Me.tablerptBANK_LEDGER.BK_ACCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBK_ACCNull()
            Me(Me.tablerptBANK_LEDGER.BK_ACCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBK_NAMENull() As Boolean
            Return Me.IsNull(Me.tablerptBANK_LEDGER.BK_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBK_NAMENull()
            Me(Me.tablerptBANK_LEDGER.BK_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBR_NAMENull() As Boolean
            Return Me.IsNull(Me.tablerptBANK_LEDGER.BR_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBR_NAMENull()
            Me(Me.tablerptBANK_LEDGER.BR_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBR_CODENull() As Boolean
            Return Me.IsNull(Me.tablerptBANK_LEDGER.BR_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBR_CODENull()
            Me(Me.tablerptBANK_LEDGER.BR_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBK_ADDNull() As Boolean
            Return Me.IsNull(Me.tablerptBANK_LEDGER.BK_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBK_ADDNull()
            Me(Me.tablerptBANK_LEDGER.BK_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBK_PHNull() As Boolean
            Return Me.IsNull(Me.tablerptBANK_LEDGER.BK_PHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBK_PHNull()
            Me(Me.tablerptBANK_LEDGER.BK_PHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdDATENull() As Boolean
            Return Me.IsNull(Me.tablerptBANK_LEDGER.dDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdDATENull()
            Me(Me.tablerptBANK_LEDGER.dDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTR_IDNull() As Boolean
            Return Me.IsNull(Me.tablerptBANK_LEDGER.TR_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTR_IDNull()
            Me(Me.tablerptBANK_LEDGER.TR_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDrNull() As Boolean
            Return Me.IsNull(Me.tablerptBANK_LEDGER.DrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDrNull()
            Me(Me.tablerptBANK_LEDGER.DrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCrNull() As Boolean
            Return Me.IsNull(Me.tablerptBANK_LEDGER.CrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCrNull()
            Me(Me.tablerptBANK_LEDGER.CrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_NAMENull() As Boolean
            Return Me.IsNull(Me.tablerptBANK_LEDGER.B_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_NAMENull()
            Me(Me.tablerptBANK_LEDGER.B_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_ADDNull() As Boolean
            Return Me.IsNull(Me.tablerptBANK_LEDGER.B_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_ADDNull()
            Me(Me.tablerptBANK_LEDGER.B_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_PHNull() As Boolean
            Return Me.IsNull(Me.tablerptBANK_LEDGER.B_PHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_PHNull()
            Me(Me.tablerptBANK_LEDGER.B_PHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_CELLNull() As Boolean
            Return Me.IsNull(Me.tablerptBANK_LEDGER.B_CELLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_CELLNull()
            Me(Me.tablerptBANK_LEDGER.B_CELLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_FAXNull() As Boolean
            Return Me.IsNull(Me.tablerptBANK_LEDGER.B_FAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_FAXNull()
            Me(Me.tablerptBANK_LEDGER.B_FAXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBALNull() As Boolean
            Return Me.IsNull(Me.tablerptBANK_LEDGER.BALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBALNull()
            Me(Me.tablerptBANK_LEDGER.BALColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class rptBANK_LEDGERRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As rptBANK_LEDGERRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As rptBANK_LEDGERRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As rptBANK_LEDGERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
