<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".generated" #>
<#@ assembly name="PresentationCore" #>
<#@ assembly name="PresentationFramework" #>
<#@ assembly name="WindowsBase" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xaml" #>

<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Microsoft.Win32" #>

<#
var props = typeof(OpenFileDialog).GetProperties();
foreach (var p in props)
{
	// PropDp("OpenFileDialogAction", p);
	// Prop(p);
	SetPropertyReverse(p);
}
#>

<#+
// 依存プロパティを作るお
void PropDp(string className, PropertyInfo p)
{
	var propertyType = p.PropertyType + (p.PropertyType.IsValueType ? "?" : "");
#>

public static readonly DependencyProperty <#= p.Name #>Property = 
	DependencyProperty.Register(
		"<#= p.Name #>",
		typeof(<#= propertyType #>),
		typeof(<#= className #>),
		new PropertyMetadata(null));

public <#= propertyType #> <#= p.Name #>
{
	get
	{
		return (<#= propertyType #>)this.GetValue(<#= p.Name #>Property);
	}
	
	set
	{
		this.SetValue(<#= p.Name #>Property, value);
	}
}
<#+
}
#>

<#+
// 普通のプロパティも作るお
void Prop(PropertyInfo p)
{
#>
public <#= p.PropertyType #><#= p.PropertyType.IsValueType ? "?" : "" #> <#= p.Name #> { get; set; }
<#+
}
#>

<#+
// プロパティのコピー
void SetProperty(PropertyInfo p)
{
	var propertyType = p.PropertyType + (p.PropertyType.IsValueType ? "?" : "");
	// 書き込めないプロパティは対象外
	if (!p.CanWrite)
	{
		return;
	}
#>
dlg.<#= p.Name #> = n.<#= p.Name #> ?? this.<#= p.Name #> ?? dlg.<#= p.Name #>;
<#+
}
#>

<#+
// プロパティのコピー(反対）
void SetPropertyReverse(PropertyInfo p)
{
	var propertyType = p.PropertyType + (p.PropertyType.IsValueType ? "?" : "");
	// 読み込めないプロパティは対象外
	if (!p.CanRead)
	{
		return;
	}
#>
if (n != NullObject)
{
	n.<#= p.Name #> = dlg.<#= p.Name #>;
}
this.<#= p.Name #> = dlg.<#= p.Name #>;
<#+
}
#>
