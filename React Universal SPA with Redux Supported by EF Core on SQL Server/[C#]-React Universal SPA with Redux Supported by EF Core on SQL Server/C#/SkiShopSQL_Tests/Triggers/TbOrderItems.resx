<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="dbo_Trigger_OrderItems_Del_PreventTest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for dbo.Trigger_OrderItems_Del_Prevent
DECLARE @OrderItemId AS INT
SELECT @OrderItemId = 1

DELETE [dbo].[OrderItems]
WHERE  OrderItemId = @OrderItemId


</value>
  </data>
  <data name="dbo_Trigger_OrderItems_InsertTest_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for dbo.Trigger_OrderItems_Insert
DECLARE @customerOrderId AS UNIQUEIDENTIFIER, @skuNo AS CHAR(8);
SELECT @customerOrderId = 'FFD8BFD7-A262-4DAF-84BB-0698C2E7706C',
	   @skuNo = '99999999';

DECLARE @OrderId AS INT, @SkuId AS INT, @Price AS DECIMAL (8, 2), @Quantity AS INT;
SELECT @OrderId = (SELECT OrderId FROM dbo.Orders WHERE CustomerOrderId = @customerOrderId),
       @SkuId = (SELECT SkuId FROM dbo.Skus WHERE SkuNo = @skuNo),
       @Price = 99.99,
       @Quantity = 1;

INSERT  INTO [dbo].[OrderItems] ([OrderId], [SkuId], [Price], [Quantity])
VALUES                         (@OrderId, @SkuId, @Price, @Quantity);

IF (SELECT Quantity FROM dbo.Skus WHERE SkuNo = @skuNo) = (3 - @Quantity) 
	AND ((SELECT SoldOut FROM dbo.StyleStates WHERE StyleId = (SELECT StyleId FROM dbo.Skus WHERE SkuNo = @skuNo)) = 0)
	SELECT 1;
ELSE
	SELECT 0;
</value>
  </data>
  <data name="testInitializeAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here that you want to run before 
each test method (unit test) in this test class is run.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

-- insert a style
DECLARE @StyleId AS INT, @StyleNo AS CHAR (6), @StyleName AS NVARCHAR (200), @BrandId AS SMALLINT, 
	@CategoryId AS TINYINT, @GenderId AS TINYINT, @ImageBig AS NVARCHAR (300), @ImageSmall AS NVARCHAR (300), 
	@PriceCurrent AS DECIMAL (8, 2), @PriceRegular AS DECIMAL (8, 2);
SELECT @StyleId = (SELECT MAX(StyleId) + 1 FROM dbo.Styles),
       @StyleNo = '999999',
       @StyleName = 'testingStyle',
       @BrandId = 1,
       @CategoryId = 1,
       @GenderId = 1,
       @ImageBig = 'big image',
       @ImageSmall = 'small image',
       @PriceCurrent = 99.99,
       @PriceRegular = 199.99;

INSERT INTO [dbo].[Styles] ([StyleId], [StyleNo], [StyleName], [BrandId], [CategoryId], [GenderId], [ImageBig], 
	[ImageSmall], [PriceCurrent], [PriceRegular])
VALUES (@StyleId, @StyleNo, @StyleName, @BrandId, @CategoryId, @GenderId, @ImageBig, @ImageSmall, @PriceCurrent, 
	@PriceRegular);

--insert a sku for the style just inserted
DECLARE @SkuId AS INT, @SkuNo AS CHAR (8), @Size AS NVARCHAR (20), @Quantity AS SMALLINT, @SoftDeleted AS BIT
SELECT @SkuId = (SELECT MAX(SkuId) + 1 FROM dbo.Skus),
       @SkuNo = '99999999',
       @Size = 'testing size',
       @Quantity = 3;

INSERT INTO [dbo].[Skus] ([SkuId], [SkuNo], [StyleId], [Size], [Quantity])
VALUES                   (@SkuId, @SkuNo, @StyleId, @Size, @Quantity);

--insert an order that only includes the sku just inserted
DECLARE @orderId AS INT, @customerOrderId AS UNIQUEIDENTIFIER, @email AS NVARCHAR(100), @name AS NVARCHAR(50),
	@provinceId AS TINYINT, @city AS NVARCHAR(50), @addressLine AS NVARCHAR(100),
	@postolCode AS NVARCHAR(7), @totalValue AS DECIMAL(10, 2), @createdDateTime AS DATETIME2;
SELECT @customerOrderId = 'FFD8BFD7-A262-4DAF-84BB-0698C2E7706C',
	   @email = 'testOrderItemTrigger@test.org',
	   @name = 'Test OrderItem',
	   @provinceId = 1,
	   @city = 'Calgary',
	   @addressLine = '77 10th Ave SW',
	   @postolCode = 'T2R 0A9',
	   @totalValue = 99.99,
	   @createdDateTime = GETDATE();

INSERT INTO dbo.Orders (CustomerOrderId, Email, FullName, ProvinceId, City, AddressLine, 
	PostalCode, TotalValue, CreatedDateTime)
VALUES (@customerOrderId, @email, @name, @provinceId, @city, @addressLine, @postolCode, @totalValue,
	@createdDateTime);

IF EXISTS (SELECT SkuId FROM dbo.Skus WHERE SkuId = @SkuId) 
	AND (EXISTS (SELECT OrderId FROM dbo.Orders WHERE CustomerOrderId = @customerOrderId))
	SELECT 1;
ELSE 
	SELECT 0;


</value>
  </data>
  <data name="testCleanupAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here that you want to run after 
each test method (unit test) in this test class is run.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

DISABLE TRIGGER [dbo].[Trigger_Styles_Del_Prevent] ON dbo.Styles;
DISABLE TRIGGER [dbo].[Trigger_Skus_Del_Prevent] ON dbo.Skus;
DISABLE TRIGGER [dbo].[Trigger_Orders_Del_Prevent] ON dbo.Orders;

DECLARE @styleNo AS CHAR (6) = '999999';

DELETE FROM dbo.StyleStates
	WHERE StyleId = (SELECT StyleId FROM dbo.Styles WHERE StyleNo = @styleNo);

DELETE FROM dbo.Skus
	WHERE StyleId = (SELECT StyleId FROM dbo.Styles WHERE StyleNo = @styleNo);

DELETE FROM dbo.Styles
	WHERE StyleNo = @styleNo;

DECLARE @customerOrderId AS UNIQUEIDENTIFIER = 'FFD8BFD7-A262-4DAF-84BB-0698C2E7706C'
DELETE FROM dbo.Orders
	WHERE CustomerOrderId = @customerOrderId;

ENABLE TRIGGER [dbo].[Trigger_Styles_Del_Prevent] ON dbo.Styles;
ENABLE TRIGGER [dbo].[Trigger_Skus_Del_Prevent] ON dbo.Skus;
ENABLE TRIGGER [dbo].[Trigger_Orders_Del_Prevent] ON dbo.Orders;

IF EXISTS (SELECT StyleId FROM dbo.Styles WHERE StyleNo = @styleNo) 
	OR (EXISTS (SELECT OrderId FROM dbo.Orders WHERE CustomerOrderId = @customerOrderId))
	SELECT 0;
ELSE 
	SELECT 1;</value>
  </data>
  <data name="dbo_Trigger_OrderItems_InsertTest_PosttestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here that you want to run after 
the test script is run.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

DISABLE TRIGGER [dbo].[Trigger_OrderItems_Del_Prevent] ON dbo.OrderItems;

DECLARE @customerOrderId AS UNIQUEIDENTIFIER = 'FFD8BFD7-A262-4DAF-84BB-0698C2E7706C';

DELETE FROM dbo.OrderItems WHERE OrderId = (select OrderId from dbo.Orders where CustomerOrderId = @customerOrderId);

ENABLE TRIGGER [dbo].[Trigger_OrderItems_Del_Prevent] ON dbo.OrderItems;

</value>
  </data>
  <data name="dbo_Trigger_OrderItems_InsertTest_UpdateSoldOut_TestAction.SqlScript" xml:space="preserve">
    <value>-- database unit test for dbo.Trigger_OrderItems_Insert to update SoldOut in the table StyleStates
DECLARE @customerOrderId AS UNIQUEIDENTIFIER, @skuNo AS CHAR(8);
SELECT @customerOrderId = 'FFD8BFD7-A262-4DAF-84BB-0698C2E7706C',
	   @skuNo = '99999999';

DECLARE @OrderId AS INT, @SkuId AS INT, @Price AS DECIMAL (8, 2), @Quantity AS INT;
SELECT @OrderId = (SELECT OrderId FROM dbo.Orders WHERE CustomerOrderId = @customerOrderId),
       @SkuId = (SELECT SkuId FROM dbo.Skus WHERE SkuNo = @skuNo),
       @Price = 99.99,
       @Quantity = 3;

INSERT  INTO [dbo].[OrderItems] ([OrderId], [SkuId], [Price], [Quantity])
VALUES                         (@OrderId, @SkuId, @Price, @Quantity);

IF (SELECT Quantity FROM dbo.Skus WHERE SkuNo = @skuNo) = (3 - @Quantity) 
	AND ((SELECT SoldOut FROM dbo.StyleStates WHERE StyleId = (SELECT StyleId FROM dbo.Skus WHERE SkuNo = @skuNo)) = 1)
	SELECT 1;
ELSE
	SELECT 0;</value>
  </data>
  <data name="dbo_Trigger_OrderItems_InsertTest_UpdateSoldOut_PosttestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here that you want to run after 
the test script is run.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

DISABLE TRIGGER [dbo].[Trigger_OrderItems_Del_Prevent] ON dbo.OrderItems;

DECLARE @customerOrderId AS UNIQUEIDENTIFIER = 'FFD8BFD7-A262-4DAF-84BB-0698C2E7706C';

DELETE FROM dbo.OrderItems WHERE OrderId = (select OrderId from dbo.Orders where CustomerOrderId = @customerOrderId);

ENABLE TRIGGER [dbo].[Trigger_OrderItems_Del_Prevent] ON dbo.OrderItems;</value>
  </data>
  <data name="dbo_Trigger_OrderItems_Del_PreventTest_PosttestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here that you want to run after 
the test script is run.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

SELECT OrderItemId FROM dbo.OrderItems WHERE OrderItemId = 1
</value>
  </data>
  <metadata name="$this.Localizable" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
</root>