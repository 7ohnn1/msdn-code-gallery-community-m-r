//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace RCE.Modules.EncoderOutput.OutputService {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SmpteFrameRate", Namespace="http://schemas.datacontract.org/2004/07/SMPTETimecode")]
    public enum SmpteFrameRate : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Smpte2398 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Smpte24 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Smpte25 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Smpte2997Drop = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Smpte2997NonDrop = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Smpte30 = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = -1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="OutputService.IOutputService")]
    public interface IOutputService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOutputService/EnqueueJob", ReplyAction="http://tempuri.org/IOutputService/EnqueueJobResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Container))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.RceObject))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Container>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Item>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Item))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.MetadataField>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.MetadataField))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Resource>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Resource))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.OverlayItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.MediaItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.ImageItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.AudioItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.SmoothStreamingVideoItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.VideoItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.SmoothStreamingAudioItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.SubClipItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.MediaBin))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Comment>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Comment))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Anchor))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.InkComment))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Sequence>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Sequence))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.AdOpportunity>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.AdOpportunity))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Marker>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Marker))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.PlayByPlay))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Track>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Track))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Shot>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Shot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.TransitionItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.VolumeLevelNode>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.VolumeLevelNode))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Title>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Title))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.TextBlock>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.TextBlock))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.TitleTemplate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Transition>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Transition))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Output.OutputMetadata))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Output.OutputSettings))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Output.WindowsMediaHeaderProperties))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Modules.EncoderOutput.OutputService.SmpteFrameRate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.AudioStreamInfo>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.AudioStreamInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.TransitionType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<System.Uri>))]
        System.IAsyncResult BeginEnqueueJob(RCE.Services.Contracts.Project project, System.AsyncCallback callback, object asyncState);
        
        void EndEnqueueJob(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOutputService/GenerateCompositeStreamManifest", ReplyAction="http://tempuri.org/IOutputService/GenerateCompositeStreamManifestResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Container))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.RceObject))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Container>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Item>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Item))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.MetadataField>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.MetadataField))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Resource>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Resource))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.OverlayItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.MediaItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.ImageItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.AudioItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.SmoothStreamingVideoItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.VideoItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.SmoothStreamingAudioItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.SubClipItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.MediaBin))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Comment>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Comment))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Anchor))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.InkComment))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Sequence>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Sequence))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.AdOpportunity>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.AdOpportunity))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Marker>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Marker))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.PlayByPlay))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Track>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Track))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Shot>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Shot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.TransitionItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.VolumeLevelNode>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.VolumeLevelNode))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Title>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Title))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.TextBlock>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.TextBlock))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.TitleTemplate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Transition>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Transition))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Output.OutputMetadata))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Output.OutputSettings))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Output.WindowsMediaHeaderProperties))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Modules.EncoderOutput.OutputService.SmpteFrameRate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.AudioStreamInfo>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.AudioStreamInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.TransitionType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<System.Uri>))]
        System.IAsyncResult BeginGenerateCompositeStreamManifest(RCE.Services.Contracts.Project project, string pbpDataStreamName, string adsDataStreamName, bool compressManifest, string gapUriString, string gapCmsId, string gapAzureId, System.AsyncCallback callback, object asyncState);
        
        string EndGenerateCompositeStreamManifest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOutputService/PersistManifest", ReplyAction="http://tempuri.org/IOutputService/PersistManifestResponse")]
        System.IAsyncResult BeginPersistManifest(string manifest, System.AsyncCallback callback, object asyncState);
        
        string EndPersistManifest(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOutputServiceChannel : RCE.Modules.EncoderOutput.OutputService.IOutputService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GenerateCompositeStreamManifestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GenerateCompositeStreamManifestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PersistManifestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PersistManifestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OutputServiceClient : System.ServiceModel.ClientBase<RCE.Modules.EncoderOutput.OutputService.IOutputService>, RCE.Modules.EncoderOutput.OutputService.IOutputService {
        
        private BeginOperationDelegate onBeginEnqueueJobDelegate;
        
        private EndOperationDelegate onEndEnqueueJobDelegate;
        
        private System.Threading.SendOrPostCallback onEnqueueJobCompletedDelegate;
        
        private BeginOperationDelegate onBeginGenerateCompositeStreamManifestDelegate;
        
        private EndOperationDelegate onEndGenerateCompositeStreamManifestDelegate;
        
        private System.Threading.SendOrPostCallback onGenerateCompositeStreamManifestCompletedDelegate;
        
        private BeginOperationDelegate onBeginPersistManifestDelegate;
        
        private EndOperationDelegate onEndPersistManifestDelegate;
        
        private System.Threading.SendOrPostCallback onPersistManifestCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public OutputServiceClient() {
        }
        
        public OutputServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OutputServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OutputServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OutputServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EnqueueJobCompleted;
        
        public event System.EventHandler<GenerateCompositeStreamManifestCompletedEventArgs> GenerateCompositeStreamManifestCompleted;
        
        public event System.EventHandler<PersistManifestCompletedEventArgs> PersistManifestCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult RCE.Modules.EncoderOutput.OutputService.IOutputService.BeginEnqueueJob(RCE.Services.Contracts.Project project, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEnqueueJob(project, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void RCE.Modules.EncoderOutput.OutputService.IOutputService.EndEnqueueJob(System.IAsyncResult result) {
            base.Channel.EndEnqueueJob(result);
        }
        
        private System.IAsyncResult OnBeginEnqueueJob(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RCE.Services.Contracts.Project project = ((RCE.Services.Contracts.Project)(inValues[0]));
            return ((RCE.Modules.EncoderOutput.OutputService.IOutputService)(this)).BeginEnqueueJob(project, callback, asyncState);
        }
        
        private object[] OnEndEnqueueJob(System.IAsyncResult result) {
            ((RCE.Modules.EncoderOutput.OutputService.IOutputService)(this)).EndEnqueueJob(result);
            return null;
        }
        
        private void OnEnqueueJobCompleted(object state) {
            if ((this.EnqueueJobCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EnqueueJobCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EnqueueJobAsync(RCE.Services.Contracts.Project project) {
            this.EnqueueJobAsync(project, null);
        }
        
        public void EnqueueJobAsync(RCE.Services.Contracts.Project project, object userState) {
            if ((this.onBeginEnqueueJobDelegate == null)) {
                this.onBeginEnqueueJobDelegate = new BeginOperationDelegate(this.OnBeginEnqueueJob);
            }
            if ((this.onEndEnqueueJobDelegate == null)) {
                this.onEndEnqueueJobDelegate = new EndOperationDelegate(this.OnEndEnqueueJob);
            }
            if ((this.onEnqueueJobCompletedDelegate == null)) {
                this.onEnqueueJobCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEnqueueJobCompleted);
            }
            base.InvokeAsync(this.onBeginEnqueueJobDelegate, new object[] {
                        project}, this.onEndEnqueueJobDelegate, this.onEnqueueJobCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult RCE.Modules.EncoderOutput.OutputService.IOutputService.BeginGenerateCompositeStreamManifest(RCE.Services.Contracts.Project project, string pbpDataStreamName, string adsDataStreamName, bool compressManifest, string gapUriString, string gapCmsId, string gapAzureId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGenerateCompositeStreamManifest(project, pbpDataStreamName, adsDataStreamName, compressManifest, gapUriString, gapCmsId, gapAzureId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string RCE.Modules.EncoderOutput.OutputService.IOutputService.EndGenerateCompositeStreamManifest(System.IAsyncResult result) {
            return base.Channel.EndGenerateCompositeStreamManifest(result);
        }
        
        private System.IAsyncResult OnBeginGenerateCompositeStreamManifest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RCE.Services.Contracts.Project project = ((RCE.Services.Contracts.Project)(inValues[0]));
            string pbpDataStreamName = ((string)(inValues[1]));
            string adsDataStreamName = ((string)(inValues[2]));
            bool compressManifest = ((bool)(inValues[3]));
            string gapUriString = ((string)(inValues[4]));
            string gapCmsId = ((string)(inValues[5]));
            string gapAzureId = ((string)(inValues[6]));
            return ((RCE.Modules.EncoderOutput.OutputService.IOutputService)(this)).BeginGenerateCompositeStreamManifest(project, pbpDataStreamName, adsDataStreamName, compressManifest, gapUriString, gapCmsId, gapAzureId, callback, asyncState);
        }
        
        private object[] OnEndGenerateCompositeStreamManifest(System.IAsyncResult result) {
            string retVal = ((RCE.Modules.EncoderOutput.OutputService.IOutputService)(this)).EndGenerateCompositeStreamManifest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGenerateCompositeStreamManifestCompleted(object state) {
            if ((this.GenerateCompositeStreamManifestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GenerateCompositeStreamManifestCompleted(this, new GenerateCompositeStreamManifestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GenerateCompositeStreamManifestAsync(RCE.Services.Contracts.Project project, string pbpDataStreamName, string adsDataStreamName, bool compressManifest, string gapUriString, string gapCmsId, string gapAzureId) {
            this.GenerateCompositeStreamManifestAsync(project, pbpDataStreamName, adsDataStreamName, compressManifest, gapUriString, gapCmsId, gapAzureId, null);
        }
        
        public void GenerateCompositeStreamManifestAsync(RCE.Services.Contracts.Project project, string pbpDataStreamName, string adsDataStreamName, bool compressManifest, string gapUriString, string gapCmsId, string gapAzureId, object userState) {
            if ((this.onBeginGenerateCompositeStreamManifestDelegate == null)) {
                this.onBeginGenerateCompositeStreamManifestDelegate = new BeginOperationDelegate(this.OnBeginGenerateCompositeStreamManifest);
            }
            if ((this.onEndGenerateCompositeStreamManifestDelegate == null)) {
                this.onEndGenerateCompositeStreamManifestDelegate = new EndOperationDelegate(this.OnEndGenerateCompositeStreamManifest);
            }
            if ((this.onGenerateCompositeStreamManifestCompletedDelegate == null)) {
                this.onGenerateCompositeStreamManifestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGenerateCompositeStreamManifestCompleted);
            }
            base.InvokeAsync(this.onBeginGenerateCompositeStreamManifestDelegate, new object[] {
                        project,
                        pbpDataStreamName,
                        adsDataStreamName,
                        compressManifest,
                        gapUriString,
                        gapCmsId,
                        gapAzureId}, this.onEndGenerateCompositeStreamManifestDelegate, this.onGenerateCompositeStreamManifestCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult RCE.Modules.EncoderOutput.OutputService.IOutputService.BeginPersistManifest(string manifest, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPersistManifest(manifest, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string RCE.Modules.EncoderOutput.OutputService.IOutputService.EndPersistManifest(System.IAsyncResult result) {
            return base.Channel.EndPersistManifest(result);
        }
        
        private System.IAsyncResult OnBeginPersistManifest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string manifest = ((string)(inValues[0]));
            return ((RCE.Modules.EncoderOutput.OutputService.IOutputService)(this)).BeginPersistManifest(manifest, callback, asyncState);
        }
        
        private object[] OnEndPersistManifest(System.IAsyncResult result) {
            string retVal = ((RCE.Modules.EncoderOutput.OutputService.IOutputService)(this)).EndPersistManifest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPersistManifestCompleted(object state) {
            if ((this.PersistManifestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PersistManifestCompleted(this, new PersistManifestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PersistManifestAsync(string manifest) {
            this.PersistManifestAsync(manifest, null);
        }
        
        public void PersistManifestAsync(string manifest, object userState) {
            if ((this.onBeginPersistManifestDelegate == null)) {
                this.onBeginPersistManifestDelegate = new BeginOperationDelegate(this.OnBeginPersistManifest);
            }
            if ((this.onEndPersistManifestDelegate == null)) {
                this.onEndPersistManifestDelegate = new EndOperationDelegate(this.OnEndPersistManifest);
            }
            if ((this.onPersistManifestCompletedDelegate == null)) {
                this.onPersistManifestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPersistManifestCompleted);
            }
            base.InvokeAsync(this.onBeginPersistManifestDelegate, new object[] {
                        manifest}, this.onEndPersistManifestDelegate, this.onPersistManifestCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override RCE.Modules.EncoderOutput.OutputService.IOutputService CreateChannel() {
            return new OutputServiceClientChannel(this);
        }
        
        private class OutputServiceClientChannel : ChannelBase<RCE.Modules.EncoderOutput.OutputService.IOutputService>, RCE.Modules.EncoderOutput.OutputService.IOutputService {
            
            public OutputServiceClientChannel(System.ServiceModel.ClientBase<RCE.Modules.EncoderOutput.OutputService.IOutputService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginEnqueueJob(RCE.Services.Contracts.Project project, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = project;
                System.IAsyncResult _result = base.BeginInvoke("EnqueueJob", _args, callback, asyncState);
                return _result;
            }
            
            public void EndEnqueueJob(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("EnqueueJob", _args, result);
            }
            
            public System.IAsyncResult BeginGenerateCompositeStreamManifest(RCE.Services.Contracts.Project project, string pbpDataStreamName, string adsDataStreamName, bool compressManifest, string gapUriString, string gapCmsId, string gapAzureId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = project;
                _args[1] = pbpDataStreamName;
                _args[2] = adsDataStreamName;
                _args[3] = compressManifest;
                _args[4] = gapUriString;
                _args[5] = gapCmsId;
                _args[6] = gapAzureId;
                System.IAsyncResult _result = base.BeginInvoke("GenerateCompositeStreamManifest", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGenerateCompositeStreamManifest(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GenerateCompositeStreamManifest", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPersistManifest(string manifest, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = manifest;
                System.IAsyncResult _result = base.BeginInvoke("PersistManifest", _args, callback, asyncState);
                return _result;
            }
            
            public string EndPersistManifest(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("PersistManifest", _args, result)));
                return _result;
            }
        }
    }
}
