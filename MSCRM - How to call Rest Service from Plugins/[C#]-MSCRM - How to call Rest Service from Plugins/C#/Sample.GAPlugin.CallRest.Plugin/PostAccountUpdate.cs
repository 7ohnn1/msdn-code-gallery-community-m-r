// <copyright file="PostAccountUpdate.cs" company="">
// Copyright (c) 2014 All Rights Reserved
// </copyright>
// <author></author>
// <date>4/8/2014 6:04:45 PM</date>
// <summary>Implements the PostAccountUpdate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System.Diagnostics;
using System.IO;
using System.Net;
using Newtonsoft.Json;

namespace Sample.GAPlugin.CallRest.Plugin
{
    using System;
    using System.ServiceModel;
    using Microsoft.Xrm.Sdk;

    /// <summary>
    /// PostAccountUpdate Plugin.
    /// Fires when the following attributes are updated:
    /// All Attributes
    /// </summary>    
    public class PostAccountUpdate: Plugin
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostAccountUpdate"/> class.
        /// </summary>
        public PostAccountUpdate()
            : base(typeof(PostAccountUpdate))
        {
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(40, "Update", "account", new Action<LocalPluginContext>(ExecutePostAccountUpdate)));

            // Note : you can register for more events here if this plugin is not specific to an individual entity and message combination.
            // You may also need to update your RegisterFile.crmregister plug-in registration file to reflect any change.
        }

        /// <summary>
        /// Executes the plug-in.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics CRM caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected void ExecutePostAccountUpdate(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new ArgumentNullException("localContext");
            }

            // Obtain the execution context from the service provider.
            IPluginExecutionContext context = localContext.PluginExecutionContext;
            IOrganizationService service = localContext.OrganizationService;


            // The InputParameters collection contains all the data passed in the message request.
            if (context.InputParameters.Contains("Target") && context.InputParameters["Target"] is Entity)
            {

                var uri = new Uri("http://localhost:9090/GetHelloWorld");

                var request = WebRequest.Create(uri);
                request.Method = WebRequestMethods.Http.Get;
                request.ContentType = "application/json";
                try
                {
                    string helloWorldString = "";
                    using (var response = request.GetResponse())
                    {
                        using (var reader = new StreamReader(response.GetResponseStream()))
                        {
                            string tmp = reader.ReadToEnd();
                            helloWorldString = JsonConvert.DeserializeObject<string>(tmp);
                            Debug.Print("I read this string {0}: ", helloWorldString);
                        }
                    }

                    var entity = (Entity) context.InputParameters["Target"];
                    if (entity.Contains("description"))
                        entity.Attributes["description"] = helloWorldString;
                    else
                        entity.Attributes.Add("description", helloWorldString);

                    //Update Sales Order Entity
                    if (context.Depth == 1)
                        service.Update(entity);

                }
                catch (Exception ex)
                {
                    throw;
                }

            }
        }
    }
}
