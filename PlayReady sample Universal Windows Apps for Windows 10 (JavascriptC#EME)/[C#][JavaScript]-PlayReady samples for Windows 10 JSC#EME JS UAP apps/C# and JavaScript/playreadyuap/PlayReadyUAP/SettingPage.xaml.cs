//// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
//// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
//// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
//// PARTICULAR PURPOSE.
////
//// Copyright (c) Microsoft Corporation. All rights reserved

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices.WindowsRuntime;
using Windows.Foundation;
using Windows.Foundation.Collections;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Controls.Primitives;
using Windows.UI.Xaml.Data;
using Windows.UI.Xaml.Input;
using Windows.UI.Xaml.Media;
using Windows.UI.Xaml.Navigation;
using Windows.Storage;
// The Blank Page item template is documented at http://go.microsoft.com/fwlink/?LinkId=234238

namespace PlayReadyUAP
{

    /// <summary>
    /// This SettingPage configures how the license is generated by the license server. 
    /// This test sample uses our custom DirectTap LicenseServer business logic to acquire 
    /// specific licenses with particular property. Your license server might have different logic.
    /// To find out what the properties in this pages are and what they are used for, consult our
    /// compliance rule in https://www.microsoft.com/playready/licensing/compliance/
    /// </summary>
    public sealed partial class SettingPage : Page
    {
        private String customRightsURL;
        private Dictionary<string, string> playEnablerGUIDList;
        private Dictionary<string, string> explicitGuidList;
        private Windows.Storage.ApplicationDataContainer localSettings;
        private Windows.Storage.ApplicationDataCompositeValue composite;

        private NavigationHelper navigationHelper;

        static public bool DiableOptOutHWDRM = false;

        /// <summary>
        /// NavigationHelper is used on each page to aid in navigation and 
        /// process lifetime management
        /// </summary>
        public NavigationHelper NavigationHelper
        {
            get { return this.navigationHelper; }
        }

        public SettingPage()
        {
            this.InitializeComponent();
            playEnablerGUIDList = new Dictionary<string, string>();
            explicitGuidList = new Dictionary<string, string>();

            playEnablerGUIDList.Add("None", "None");
            playEnablerGUIDList.Add("Unknown Output", "{786627d8-c2a6-44be-8f88-08ae255b01a7}");
            playEnablerGUIDList.Add("Unknown Output Constrained", "{b621d91f-edcc-4035-8d4b-dc71760d43e9}");

            explicitGuidList.Add("cbBestEffortCGMS_A", "{225CD36F-F132-49EF-BA8C-C91EA28E4369}");
            explicitGuidList.Add("cbCGMS_A", "{2098DE8D-7DDD-4BAB-96C6-32EBB6FABEA3}");
            explicitGuidList.Add("cbDigitalOnlyToken", "{760AE755-682A-41E0-B1B3-DCDF836A7306}");
            explicitGuidList.Add("cbAGCColorStrip", "{C3FD11C6-F8B7-4D20-B008-1DB17D61F2DA}");
            explicitGuidList.Add("cbMaxVGARes", "{D783A191-E083-4BAF-B2DA-E69F910B3772}");
            explicitGuidList.Add("cbMaxComonentRes", "{811C5110-46C8-4C6E-8163-C0482A15D47E}");
            explicitGuidList.Add("cbHCMSorHDCP", "{6D5CFA59-C250-4426-930E-FAC72C8FCFA6}");
            explicitGuidList.Add("cbHDCPType1", "{ABB2C6F1-E663-4625-A945-972D17B231E7}");
            explicitGuidList.Add("tbMaxResDecoderWidth", "{9645E831-E01D-4FFF-8342-0A720E3E028F}");

            localSettings = Windows.Storage.ApplicationData.Current.LocalSettings;
            composite = (Windows.Storage.ApplicationDataCompositeValue)localSettings.Values["CustomRightsSettings"];

            if( composite == null )
            {
                composite = new Windows.Storage.ApplicationDataCompositeValue();
            }

            this.navigationHelper = new NavigationHelper(this);
            this.navigationHelper.LoadState += navigationHelper_LoadState;
            this.navigationHelper.SaveState += navigationHelper_SaveState;

            // Disable the cbOptoutHWDRM if the itemPage has launched before
            cbOptoutHWDRM.IsEnabled = !SettingPage.DiableOptOutHWDRM;
        }

        /// <summary>
        /// Populates the page with content passed during navigation.  Any saved state is also
        /// provided when recreating a page from a prior session.
        /// </summary>
        /// <param name="sender">
        /// The source of the event; typically <see cref="NavigationHelper"/>
        /// </param>
        /// <param name="e">Event data that provides both the navigation parameter passed to
        /// <see cref="Frame.Navigate(Type, Object)"/> when this page was initially requested and
        /// a dictionary of state preserved by this page during an earlier
        /// session.  The state will be null the first time a page is visited.</param>
        private void navigationHelper_LoadState(object sender, LoadStateEventArgs e)
        {
            LoadCurrentCustomRightsSettings();
        }

        private void navigationHelper_SaveState(object sender, SaveStateEventArgs e)
        {
            setCustomRightsSettings();
        }

        #region NavigationHelper registration

        /// The methods provided in this section are simply used to allow
        /// NavigationHelper to respond to the page's navigation methods.
        /// 
        /// Page specific logic should be placed in event handlers for the  
        /// <see cref="GridCS.Common.NavigationHelper.LoadState"/>
        /// and <see cref="GridCS.Common.NavigationHelper.SaveState"/>.
        /// The navigation parameter is available in the LoadState method 
        /// in addition to page state preserved during an earlier session.


        protected override void OnNavigatedTo(NavigationEventArgs e)
        {
            navigationHelper.OnNavigatedTo(e);
        }

        protected override void OnNavigatedFrom(NavigationEventArgs e)
        {
            navigationHelper.OnNavigatedFrom(e);
        }

        #endregion

        private void setCheckBoxValue(ApplicationDataCompositeValue Composite, CheckBox cbObject )
        {
            if (Composite.ContainsKey(cbObject.Name) && Composite[cbObject.Name].ToString().Equals("true"))
            {
                cbObject.IsChecked = true;
            }
        }

        private void setRadioBoxValue(ApplicationDataCompositeValue Composite, RadioButton rbObject )
        {
            if (Composite.ContainsKey(rbObject.Name) && Composite[rbObject.Name].ToString().Equals("true"))
            {
                rbObject.IsChecked = true;
            }
        }

        private void setTextBoxValue(ApplicationDataCompositeValue Composite, TextBox tbObject)
        {
            if (Composite.ContainsKey(tbObject.Name))
            {
                tbObject.Text = Composite[tbObject.Name].ToString();
            }
        }

        private void setComboBoxValue(ApplicationDataCompositeValue Composite, ComboBox tbObject)
        {
            if (Composite.ContainsKey(tbObject.Name))
            {
                tbObject.SelectedIndex = (int)Composite[tbObject.Name];
            }
        }

        public void LoadCurrentCustomRightsSettings()
        {
            if (composite == null)
            {
                // No data
            }
            else
            {
                setCheckBoxValue(composite, cbOptoutHWDRM);
                setCheckBoxValue(composite, cbPersistent);
                setCheckBoxValue(composite, cbBoundToDomain);
                setCheckBoxValue(composite, cbBestEffortCGMS_A);
                setCheckBoxValue(composite, cbCGMS_A);
                setCheckBoxValue(composite, cbDigitalOnlyToken);
                setCheckBoxValue(composite, cbAGCColorStrip);
                setCheckBoxValue(composite, cbMaxVGARes);
                setCheckBoxValue(composite, cbMaxComonentRes);
                setCheckBoxValue(composite, cbHCMSorHDCP);
                setCheckBoxValue(composite, cbHDCPType1);
                setTextBoxValue(composite, tbMaxResDecoderWidth);
                setTextBoxValue(composite, tbMaxResDecoderHeight);

                setRadioBoxValue(composite, rbSL150);
                setRadioBoxValue(composite, rbSL2000);
                setRadioBoxValue(composite, rbSL3000);

                setTextBoxValue(composite, tbUncompressVideo);
                setTextBoxValue(composite, tbCompressVideo);
                setTextBoxValue(composite, tbAnalogVideo);
                setTextBoxValue(composite, tbUncompressedAudio);
                setTextBoxValue(composite, tbCompressAudio);

                setComboBoxValue(composite, cbPlayEnabler);
            }
        }
        private String setCustomRightsSettings()
        {

            setOptoutHWDRM();
            setInMemeryOrPersistentLicense();
            setBoundToDomain();
            setPlayEnabler();
            setSecurityLevel();
            setOPL();
            setMaxResDecode();
            setExplicitGUID("AnalogVideoOutputProtection", cbBestEffortCGMS_A, "AQ==");
            setExplicitGUID("AnalogVideoOutputProtection", cbCGMS_A, "Ag==");
            setExplicitGUID("AnalogVideoOutputProtection", cbDigitalOnlyToken, "AAAAAA==");
            setExplicitGUID("AnalogVideoOutputProtection", cbAGCColorStrip, "Aw==");
            setExplicitGUID("AnalogVideoOutputProtection", cbMaxVGARes, "AAfvQA==");
            setExplicitGUID("AnalogVideoOutputProtection", cbMaxComonentRes, "AAfvQA==");
            setExplicitGUID("DigitalAudioOutputProtection", cbHCMSorHDCP, "AQ==");
            setExplicitGUID("DigitalVideoOutputProtection", cbHDCPType1, "AAAAAQ==");

            localSettings.Values["CustomRightsSettings"] = this.composite;
            localSettings.Values["CustomRightsURL"] = this.customRightsURL;

            return this.customRightsURL;
        }

        private void setOptoutHWDRM()
        {
            Windows.Storage.ApplicationDataContainer ContainerPlayReady;

            if (cbOptoutHWDRM.IsChecked == true)
            {
                if (this.localSettings.Containers.ContainsKey("PlayReady"))
                {
                    ContainerPlayReady = this.localSettings.Containers["PlayReady"];
                }
                else
                {
                    ContainerPlayReady = this.localSettings.CreateContainer("PlayReady", ApplicationDataCreateDisposition.Always);
                }
                ContainerPlayReady.Values["SoftwareOverride"] = 1;
                this.composite[cbOptoutHWDRM.Name] = "true";
            }
            else
            {
                if (this.localSettings.Containers.ContainsKey("PlayReady"))
                {
                    ContainerPlayReady = this.localSettings.Containers["PlayReady"];
                    ContainerPlayReady.Values["SoftwareOverride"] = 0;
                }
                this.composite[cbOptoutHWDRM.Name] = "false";
            }
        }

        private void setInMemeryOrPersistentLicense()
        {
            if (cbPersistent.IsChecked == false)
            {
                if (string.IsNullOrEmpty(this.customRightsURL))
                {
                    this.customRightsURL = "&UseSimpleNonPersistentLicense=1";
                }
                else
                {
                    this.customRightsURL += "&UseSimpleNonPersistentLicense=1";
                }
                this.composite[cbPersistent.Name] = "false";
            }
            else
            {
                this.composite[cbPersistent.Name] = "true";
            }
        }

        private void setBoundToDomain()
        {
            if(cbBoundToDomain.IsChecked == true)
            {
                if (string.IsNullOrEmpty(this.customRightsURL))
                {
                    this.customRightsURL = "&UseDomains=1";
                }
                else
                {
                    this.customRightsURL += "&UseDomains=1";
                }
                this.composite[cbBoundToDomain.Name] = "true";
            }
            else
            {
                this.composite[cbBoundToDomain.Name] = "false";
            }
        }

        private void setSecurityLevel()
        {
            string sl = null;

            this.composite[rbSL150.Name]  = "false";
            this.composite[rbSL2000.Name] = "false";
            this.composite[rbSL3000.Name] = "false";

            if (rbSL150.IsChecked == true )
            {
                sl = "150";
                this.composite[rbSL150.Name] = "true";
            }
            else if( rbSL2000.IsChecked == true )
            {
                sl = "2000";
                this.composite[rbSL2000.Name] = "true";
            }
            else if( rbSL3000.IsChecked == true )
            {
                sl = "3000";
                this.composite[rbSL3000.Name] = "true";
            }

            if( sl != null )
            {
                if (string.IsNullOrEmpty(this.customRightsURL))
                {
                    this.customRightsURL = "&SecurityLevel=" + sl;
                }
                else
                {
                    this.customRightsURL += "&SecurityLevel=" + sl;
                }
            }
        }

        private void setPlayEnabler()
        {
            String guidValue = null;

            if(cbPlayEnabler.SelectedValue != null)
            {
                guidValue = cbPlayEnabler.SelectedValue.ToString();
            }

            string playEnablerGuid = null;
            if (!(string.IsNullOrEmpty(guidValue)) && playEnablerGUIDList.ContainsKey(guidValue))
            {
                playEnablerGuid = playEnablerGUIDList[guidValue];
            }

            if (!string.IsNullOrEmpty(playEnablerGuid) &&
                !(playEnablerGuid.Equals("None")))
            {
                setPlayEnableGuid(playEnablerGuid);
                this.composite["cbPlayEnabler"] = cbPlayEnabler.SelectedIndex;
            }
            else
            {
                this.composite["cbPlayEnabler"] = -1;
            }
        }

        private void setPlayEnableGuid(String guidstr)
        {
            
            if (string.IsNullOrEmpty(this.customRightsURL))
            {
                this.customRightsURL = "&PlayEnablers=" + guidstr;
            }
            else
            {
                this.customRightsURL += "&PlayEnablers=" + guidstr;
            }
        }

        private void setExplicitGUID(String type, object cbObject, String value)
        {
            if (((CheckBox)cbObject).IsChecked == true)
            {
                String guid = explicitGuidList[((CheckBox)cbObject).Name.ToString()];
                if (string.IsNullOrEmpty(this.customRightsURL))
                {
                    this.customRightsURL = "&" + type + "=" + guid + ";" + value;
                }
                else
                {
                    this.customRightsURL += "&" + type + "=" + guid + ";" + value;
                }
                this.composite[((CheckBox)cbObject).Name.ToString()] = "true";
            }
            else
            {
                this.composite[((CheckBox)cbObject).Name.ToString()] = "false";
            }
        }
        private void setOPL()
        {
            setOPLinLicense(tbUncompressVideo,      "tbUncompressVideo",    "UncompressedDigitalVideoOPL");
            setOPLinLicense(tbCompressVideo,        "tbCompressVideo",      "CompressedDigitalVideoOPL");
            setOPLinLicense(tbAnalogVideo,          "tbAnalogVideo",        "AnalogVideoOPL");
            setOPLinLicense(tbUncompressedAudio,    "tbUncompressedAudio",  "UncompressedDigitalAudioOPL");
            setOPLinLicense(tbCompressAudio,        "tbCompressAudio",      "CompressedDigitalAudioOPL");
        }
        private void setOPLinLicense(TextBox tbControl, string controlName, string oplName)
        {
            this.composite[controlName] = tbControl.Text;
            if (!string.IsNullOrEmpty(tbControl.Text))
            {
                if (string.IsNullOrEmpty(this.customRightsURL))
                {
                    this.customRightsURL = "&" + oplName + "=" + tbControl.Text;
                }
                else
                {
                    this.customRightsURL += "&" + oplName + "=" + tbControl.Text;
                }
            }
        }

        private async void setMaxResDecode()
        {
            this.composite["tbMaxResDecoderWidth"] = tbMaxResDecoderWidth.Text;
            this.composite["tbMaxResDecoderHeight"] = tbMaxResDecoderHeight.Text;
            bool isWidthNullOrEmpty = string.IsNullOrEmpty(tbMaxResDecoderWidth.Text);
            bool isHeightNullOrEmpty = string.IsNullOrEmpty(tbMaxResDecoderHeight.Text);
            if (!isWidthNullOrEmpty  && !isHeightNullOrEmpty)
            {
                UInt32 width = Convert.ToUInt32(tbMaxResDecoderWidth.Text);
                UInt32 height = Convert.ToUInt32(tbMaxResDecoderHeight.Text);
                byte[] widthByteArray = BitConverter.GetBytes(width);
                byte[] heightByteArray = BitConverter.GetBytes(height);

                // Convert the bytes in network order
                Array.Reverse(widthByteArray);
                Array.Reverse(heightByteArray);

                byte[] whByteArra = new byte[8];
                Array.Copy(widthByteArray, 0, whByteArra, 0, 4);
                Array.Copy(heightByteArray, 0, whByteArra, 4, 4);

                string b64Encoded = Convert.ToBase64String(whByteArra);

                String type = "DigitalVideoOutputProtection";
                String guid = explicitGuidList[tbMaxResDecoderWidth.Name.ToString()];
                if (string.IsNullOrEmpty(this.customRightsURL))
                {
                    this.customRightsURL = "&" + type + "=" + guid + ";" + b64Encoded;
                }
                else
                {
                    this.customRightsURL += "&" + type + "=" + guid + ";" + b64Encoded;
                }
            }
            else if (isWidthNullOrEmpty != isHeightNullOrEmpty)
            {
                this.composite.Remove("tbMaxResDecoderWidth");
                this.composite.Remove("tbMaxResDecoderHeight");

                var md = new Windows.UI.Popups.MessageDialog("You have to specify both the width and height!  Reset max. resolution decoder.");
                await md.ShowAsync();
            }
        }
    }
        
}
